!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACQUIRED_AFTER	port/thread_annotations.h	32;"	d
ACQUIRED_BEFORE	port/thread_annotations.h	37;"	d
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	447;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	450;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	453;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	456;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	460;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	462;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	464;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	468;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	471;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	474;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	479;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	482;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	485;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	490;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	493;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	496;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	499;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	502;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	505;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	508;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	511;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	516;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	519;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	522;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	525;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	528;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	531;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	534;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	432;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	435;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	438;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	441;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	445;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	447;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	449;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	453;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	456;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	459;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	464;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	467;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	470;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	475;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	478;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	481;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	484;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	487;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	490;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	493;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	496;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	501;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	504;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	507;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	510;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	513;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	516;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	519;"	d	file:
ASSERT_EQ	util/testharness.h	105;"	d
ASSERT_EXCLUSIVE_LOCK	port/port_stdcxx.h	/^  void AssertHeld() ASSERT_EXCLUSIVE_LOCK() {}$/;"	f	class:leveldb::port::Mutex
ASSERT_EXCLUSIVE_LOCK	port/thread_annotations.h	99;"	d
ASSERT_GE	util/testharness.h	109;"	d
ASSERT_GT	util/testharness.h	111;"	d
ASSERT_LE	util/testharness.h	113;"	d
ASSERT_LT	util/testharness.h	115;"	d
ASSERT_NE	util/testharness.h	107;"	d
ASSERT_OK	util/testharness.h	104;"	d
ASSERT_SHARED_LOCK	port/thread_annotations.h	104;"	d
ASSERT_TRUE	util/testharness.h	103;"	d
Abandon	table/table_builder.cc	/^void TableBuilder::Abandon() {$/;"	f	class:leveldb::TableBuilder
AcceleratedCRC32C	port/port_stdcxx.h	/^inline uint32_t AcceleratedCRC32C(uint32_t crc, const char* buf, size_t size) {$/;"	f	namespace:leveldb::port
Acquire	util/env_posix.cc	/^  bool Acquire() {$/;"	f	class:leveldb::__anon19::Limiter
Acquire	util/env_windows.cc	/^  bool Acquire() {$/;"	f	class:leveldb::__anon11::Limiter
Add	db/db_impl.h	/^    void Add(const CompactionStats& c) {$/;"	f	struct:leveldb::DBImpl::CompactionStats
Add	db/memtable.cc	/^void MemTable::Add(SequenceNumber s, ValueType type, const Slice& key,$/;"	f	class:leveldb::MemTable
Add	db/version_set_test.cc	/^  void Add(const char* smallest, const char* largest,$/;"	f	class:leveldb::FindFileTest
Add	table/block_builder.cc	/^void BlockBuilder::Add(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::BlockBuilder
Add	table/table_builder.cc	/^void TableBuilder::Add(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::TableBuilder
Add	table/table_test.cc	/^  void Add(const std::string& key, const Slice& value) {$/;"	f	class:leveldb::Constructor
Add	table/table_test.cc	/^  void Add(const std::string& key, const std::string& value) {$/;"	f	class:leveldb::Harness
Add	util/bloom_test.cc	/^  void Add(const Slice& s) { keys_.push_back(s.ToString()); }$/;"	f	class:leveldb::BloomTest
Add	util/histogram.cc	/^void Histogram::Add(double value) {$/;"	f	class:leveldb::Histogram
AddBoundaryInputs	db/version_set.cc	/^void AddBoundaryInputs(const InternalKeyComparator& icmp,$/;"	f	namespace:leveldb
AddBoundaryInputsTest	db/version_set_test.cc	/^  AddBoundaryInputsTest() : icmp_(BytewiseComparator()) {}$/;"	f	class:leveldb::AddBoundaryInputsTest
AddBoundaryInputsTest	db/version_set_test.cc	/^class AddBoundaryInputsTest {$/;"	c	namespace:leveldb	file:
AddBytes	benchmarks/db_bench.cc	/^  void AddBytes(int64_t n) { bytes_ += n; }$/;"	f	class:leveldb::__anon4::Stats
AddFile	db/version_edit.h	/^  void AddFile(int level, uint64_t file, uint64_t file_size,$/;"	f	class:leveldb::VersionEdit
AddInputDeletions	db/version_set.cc	/^void Compaction::AddInputDeletions(VersionEdit* edit) {$/;"	f	class:leveldb::Compaction
AddIterators	db/version_set.cc	/^void Version::AddIterators(const ReadOptions& options,$/;"	f	class:leveldb::Version
AddKey	table/filter_block.cc	/^void FilterBlockBuilder::AddKey(const Slice& key) {$/;"	f	class:leveldb::FilterBlockBuilder
AddLiveFiles	db/version_set.cc	/^void VersionSet::AddLiveFiles(std::set<uint64_t>* live) {$/;"	f	class:leveldb::VersionSet
AddMessage	benchmarks/db_bench.cc	/^  void AddMessage(Slice msg) { AppendWithSpace(&message_, msg); }$/;"	f	class:leveldb::__anon4::Stats
AddRecord	db/log_writer.cc	/^Status Writer::AddRecord(const Slice& slice) {$/;"	f	class:leveldb::log::Writer
AfterFile	db/version_set.cc	/^static bool AfterFile(const Comparator* ucmp, const Slice* user_key,$/;"	f	namespace:leveldb
AllEntriesFor	db/db_test.cc	/^  std::string AllEntriesFor(const Slice& user_key) {$/;"	f	class:leveldb::DBTest
Allocate	util/arena.h	/^inline char* Arena::Allocate(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateAligned	util/arena.cc	/^char* Arena::AllocateAligned(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateFallback	util/arena.cc	/^char* Arena::AllocateFallback(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateNewBlock	util/arena.cc	/^char* Arena::AllocateNewBlock(size_t block_bytes) {$/;"	f	class:leveldb::Arena
Append	db/fault_injection_test.cc	/^Status TestWritableFile::Append(const Slice& data) {$/;"	f	class:leveldb::TestWritableFile
Append	db/write_batch.cc	/^void WriteBatch::Append(const WriteBatch& source) {$/;"	f	class:leveldb::WriteBatch
Append	db/write_batch.cc	/^void WriteBatchInternal::Append(WriteBatch* dst, const WriteBatch* src) {$/;"	f	class:leveldb::WriteBatchInternal
Append	helpers/memenv/memenv.cc	/^  Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon5::FileState
Append	util/zns/env_zone_cp.cc	/^		Status Append(const Slice& data)$/;"	f	class:leveldb::__anon8::ZoneFile
Append	util/zns/env_zone_temp.cc	/^		Status Append(const Slice& data)$/;"	f	class:leveldb::__anon7::ZoneFile
Append	util/zns/env_zone_temp.cc	/^		virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon7::ZoneWritableFile
AppendEscapedStringTo	util/logging.cc	/^void AppendEscapedStringTo(std::string* str, const Slice& value) {$/;"	f	namespace:leveldb
AppendInternalKey	db/dbformat.cc	/^void AppendInternalKey(std::string* result, const ParsedInternalKey& key) {$/;"	f	namespace:leveldb
AppendNumberTo	util/logging.cc	/^void AppendNumberTo(std::string* str, uint64_t num) {$/;"	f	namespace:leveldb
AppendVersion	db/version_set.cc	/^void VersionSet::AppendVersion(Version* v) {$/;"	f	class:leveldb::VersionSet
AppendWithSpace	benchmarks/db_bench.cc	/^static void AppendWithSpace(std::string* str, Slice msg) {$/;"	f	namespace:leveldb::__anon4
Apply	db/version_set.cc	/^  void Apply(VersionEdit* edit) {$/;"	f	class:leveldb::VersionSet::Builder
ApproximateMemoryUsage	db/memtable.cc	/^size_t MemTable::ApproximateMemoryUsage() { return arena_.MemoryUsage(); }$/;"	f	class:leveldb::MemTable
ApproximateOffsetOf	db/version_set.cc	/^uint64_t VersionSet::ApproximateOffsetOf(Version* v, const InternalKey& ikey) {$/;"	f	class:leveldb::VersionSet
ApproximateOffsetOf	table/table.cc	/^uint64_t Table::ApproximateOffsetOf(const Slice& key) const {$/;"	f	class:leveldb::Table
ApproximateOffsetOf	table/table_test.cc	/^  uint64_t ApproximateOffsetOf(const Slice& key) const {$/;"	f	class:leveldb::TableConstructor
ApproximateSize	db/write_batch.cc	/^size_t WriteBatch::ApproximateSize() const { return rep_.size(); }$/;"	f	class:leveldb::WriteBatch
ArchiveFile	db/repair.cc	/^  void ArchiveFile(const std::string& fname) {$/;"	f	class:leveldb::__anon37::Repairer	file:
Arena	util/arena.cc	/^Arena::Arena()$/;"	f	class:leveldb::Arena
Arena	util/arena.h	/^class Arena {$/;"	c	namespace:leveldb
ArenaTest	util/arena_test.cc	/^class ArenaTest {};$/;"	c	namespace:leveldb	file:
AssertEnvNotInitialized	util/env_posix.cc	/^  static void AssertEnvNotInitialized() {$/;"	f	class:leveldb::__anon20::SingletonEnv
AssertEnvNotInitialized	util/env_windows.cc	/^  static void AssertEnvNotInitialized() {$/;"	f	class:leveldb::__anon11::SingletonEnv
AssertEnvNotInitialized	util/env_zone.cc	/^		static void AssertEnvNotInitialized() {$/;"	f	class:leveldb::__anon21::SingletonEnv
AssertEnvNotInitialized	util/zns/env_zone_cp.cc	/^		static void AssertEnvNotInitialized() {$/;"	f	class:leveldb::__anon8::SingletonEnv
AssertEnvNotInitialized	util/zns/env_zone_temp.cc	/^		static void AssertEnvNotInitialized() {$/;"	f	class:leveldb::__anon7::SingletonEnv
AtomicCounter	db/db_test.cc	/^  AtomicCounter() : count_(0) {}$/;"	f	class:leveldb::__anon41::AtomicCounter
AtomicCounter	db/db_test.cc	/^class AtomicCounter {$/;"	c	namespace:leveldb::__anon41	file:
AutoCompactTest	db/autocompact_test.cc	/^  AutoCompactTest() {$/;"	f	class:leveldb::AutoCompactTest
AutoCompactTest	db/autocompact_test.cc	/^class AutoCompactTest {$/;"	c	namespace:leveldb	file:
Average	util/histogram.cc	/^double Histogram::Average() const {$/;"	f	class:leveldb::Histogram
BGWork	db/db_impl.cc	/^void DBImpl::BGWork(void* db) {$/;"	f	class:leveldb::DBImpl
BINARY_OP	util/testharness.h	75;"	d
BINARY_OP	util/testharness.h	91;"	d
BLOCK_SIZE	zns_ctl/controller.h	25;"	d
BLOCK_TEST	table/table_test.cc	/^enum TestType { TABLE_TEST, BLOCK_TEST, MEMTABLE_TEST, DB_TEST };$/;"	e	enum:leveldb::TestType	file:
BM_LogAndApply	db/db_test.cc	/^void BM_LogAndApply(int iters, int num_base_files) {$/;"	f	namespace:leveldb
BackgroundCall	db/db_impl.cc	/^void DBImpl::BackgroundCall() {$/;"	f	class:leveldb::DBImpl
BackgroundCompaction	db/db_impl.cc	/^void DBImpl::BackgroundCompaction() {$/;"	f	class:leveldb::DBImpl
BackgroundThreadEntryPoint	util/env_posix.cc	/^  static void BackgroundThreadEntryPoint(PosixEnv* env) {$/;"	f	class:leveldb::__anon19::PosixEnv	file:
BackgroundThreadEntryPoint	util/env_windows.cc	/^  static void BackgroundThreadEntryPoint(WindowsEnv* env) {$/;"	f	class:leveldb::__anon11::WindowsEnv	file:
BackgroundThreadEntryPoint	util/env_zone.cc	/^		static void BackgroundThreadEntryPoint(ZoneEnv* env)$/;"	f	class:leveldb::__anon21::ZoneEnv	file:
BackgroundThreadEntryPoint	util/zns/env_zone_cp.cc	/^		static void BackgroundThreadEntryPoint(ZoneEnv* env)$/;"	f	class:leveldb::__anon8::ZoneEnv	file:
BackgroundThreadEntryPoint	util/zns/env_zone_temp.cc	/^		static void BackgroundThreadEntryPoint(ZoneEnv* env)$/;"	f	class:leveldb::__anon7::ZoneEnv	file:
BackgroundThreadMain	util/env_posix.cc	/^void PosixEnv::BackgroundThreadMain() {$/;"	f	class:leveldb::PosixEnv
BackgroundThreadMain	util/env_windows.cc	/^void WindowsEnv::BackgroundThreadMain() {$/;"	f	class:leveldb::__anon11::WindowsEnv
BackgroundThreadMain	util/env_zone.cc	/^		void BackgroundThreadMain()$/;"	f	class:leveldb::__anon21::ZoneEnv	file:
BackgroundThreadMain	util/zns/env_zone_cp.cc	/^		void BackgroundThreadMain()$/;"	f	class:leveldb::__anon8::ZoneEnv	file:
BackgroundThreadMain	util/zns/env_zone_temp.cc	/^		void BackgroundThreadMain()$/;"	f	class:leveldb::__anon7::ZoneEnv	file:
BackgroundWorkItem	util/env_posix.cc	/^    explicit BackgroundWorkItem(void (*function)(void* arg), void* arg)$/;"	f	struct:leveldb::__anon19::PosixEnv::BackgroundWorkItem
BackgroundWorkItem	util/env_posix.cc	/^  struct BackgroundWorkItem {$/;"	s	class:leveldb::__anon19::PosixEnv	file:
BackgroundWorkItem	util/env_windows.cc	/^    explicit BackgroundWorkItem(void (*function)(void* arg), void* arg)$/;"	f	struct:leveldb::__anon11::WindowsEnv::BackgroundWorkItem
BackgroundWorkItem	util/env_windows.cc	/^  struct BackgroundWorkItem {$/;"	s	class:leveldb::__anon11::WindowsEnv	file:
BackgroundWorkItem	util/env_zone.cc	/^			explicit BackgroundWorkItem(void (*function)(void* arg), void* arg)$/;"	f	struct:leveldb::__anon21::ZoneEnv::BackgroundWorkItem
BackgroundWorkItem	util/env_zone.cc	/^		struct BackgroundWorkItem$/;"	s	class:leveldb::__anon21::ZoneEnv	file:
BackgroundWorkItem	util/zns/env_zone_cp.cc	/^			explicit BackgroundWorkItem(void (*function)(void* arg), void* arg)$/;"	f	struct:leveldb::__anon8::ZoneEnv::BackgroundWorkItem
BackgroundWorkItem	util/zns/env_zone_cp.cc	/^		struct BackgroundWorkItem$/;"	s	class:leveldb::__anon8::ZoneEnv	file:
BackgroundWorkItem	util/zns/env_zone_temp.cc	/^			explicit BackgroundWorkItem(void (*function)(void* arg), void* arg)$/;"	f	struct:leveldb::__anon7::ZoneEnv::BackgroundWorkItem
BackgroundWorkItem	util/zns/env_zone_temp.cc	/^		struct BackgroundWorkItem$/;"	s	class:leveldb::__anon7::ZoneEnv	file:
Basename	util/env_posix.cc	/^  static Slice Basename(const std::string& filename) {$/;"	f	class:leveldb::__anon19::final	file:
Basename	util/env_zone.cc	/^        static Slice Basename(const std::string& filename)$/;"	f	class:leveldb::__anon21::final	file:
Basename	util/zns/env_zone_cp.cc	/^		static Slice Basename(const std::string& filename)$/;"	f	class:leveldb::__anon8::ZoneFile	file:
Basename	util/zns/env_zone_temp.cc	/^		static Slice Basename(const std::string& filename)$/;"	f	class:leveldb::__anon7::ZoneFile	file:
BeforeFile	db/version_set.cc	/^static bool BeforeFile(const Comparator* ucmp, const Slice* user_key,$/;"	f	namespace:leveldb
Benchmark	benchmarks/db_bench.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	benchmarks/db_bench.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
Benchmark	benchmarks/db_bench_sqlite3.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	benchmarks/db_bench_sqlite3.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
Benchmark	benchmarks/db_bench_tree_db.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	benchmarks/db_bench_tree_db.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
Between	db/db_test.cc	/^static bool Between(uint64_t val, uint64_t low, uint64_t high) {$/;"	f	namespace:leveldb
Between	table/table_test.cc	/^static bool Between(uint64_t val, uint64_t low, uint64_t high) {$/;"	f	namespace:leveldb
BigString	db/log_test.cc	/^static std::string BigString(const std::string& partial_string, size_t n) {$/;"	f	namespace:leveldb::log
Block	table/block.cc	/^Block::Block(const BlockContents& contents)$/;"	f	class:leveldb::Block
Block	table/block.h	/^class Block {$/;"	c	namespace:leveldb
BlockBuilder	table/block_builder.cc	/^BlockBuilder::BlockBuilder(const Options* options)$/;"	f	class:leveldb::BlockBuilder
BlockBuilder	table/block_builder.h	/^class BlockBuilder {$/;"	c	namespace:leveldb
BlockConstructor	table/table_test.cc	/^  explicit BlockConstructor(const Comparator* cmp)$/;"	f	class:leveldb::BlockConstructor
BlockConstructor	table/table_test.cc	/^class BlockConstructor : public Constructor {$/;"	c	namespace:leveldb	file:
BlockContents	table/format.h	/^struct BlockContents {$/;"	s	namespace:leveldb
BlockFunction	table/two_level_iterator.cc	/^typedef Iterator* (*BlockFunction)(void*, const ReadOptions&, const Slice&);$/;"	t	namespace:leveldb::__anon30	file:
BlockHandle	table/format.h	/^class BlockHandle {$/;"	c	namespace:leveldb
BlockHandle	table/format.h	/^inline BlockHandle::BlockHandle()$/;"	f	class:leveldb::BlockHandle
BlockReader	table/table.cc	/^Iterator* Table::BlockReader(void* arg, const ReadOptions& options,$/;"	f	class:leveldb::Table
BloomFilterPolicy	util/bloom.cc	/^  explicit BloomFilterPolicy(int bits_per_key) : bits_per_key_(bits_per_key) {$/;"	f	class:leveldb::__anon18::BloomFilterPolicy
BloomFilterPolicy	util/bloom.cc	/^class BloomFilterPolicy : public FilterPolicy {$/;"	c	namespace:leveldb::__anon18	file:
BloomHash	util/bloom.cc	/^static uint32_t BloomHash(const Slice& key) {$/;"	f	namespace:leveldb::__anon18
BloomTest	util/bloom_test.cc	/^  BloomTest() : policy_(NewBloomFilterPolicy(10)) {}$/;"	f	class:leveldb::BloomTest
BloomTest	util/bloom_test.cc	/^class BloomTest {$/;"	c	namespace:leveldb	file:
Build	db/corruption_test.cc	/^  void Build(int n) {$/;"	f	class:leveldb::CorruptionTest
Build	db/fault_injection_test.cc	/^  void Build(int start_idx, int num_vals) {$/;"	f	class:leveldb::FaultInjectionTest
Build	util/bloom_test.cc	/^  void Build() {$/;"	f	class:leveldb::BloomTest
BuildBatchGroup	db/db_impl.cc	/^WriteBatch* DBImpl::BuildBatchGroup(Writer** last_writer) {$/;"	f	class:leveldb::DBImpl
BuildTable	db/builder.cc	/^Status BuildTable(const std::string& dbname, Env* env, const Options& options,$/;"	f	namespace:leveldb
Builder	db/version_set.cc	/^  Builder(VersionSet* vset, Version* base) : vset_(vset), base_(base) {$/;"	f	class:leveldb::VersionSet::Builder
Builder	db/version_set.cc	/^class VersionSet::Builder {$/;"	c	class:leveldb::VersionSet	file:
BySmallestKey	db/version_set.cc	/^  struct BySmallestKey {$/;"	s	class:leveldb::VersionSet::Builder	file:
ByteSize	db/write_batch_internal.h	/^  static size_t ByteSize(const WriteBatch* batch) { return batch->rep_.size(); }$/;"	f	class:leveldb::WriteBatchInternal
BytewiseComparator	util/comparator.cc	/^const Comparator* BytewiseComparator() {$/;"	f	namespace:leveldb
BytewiseComparatorImpl	util/comparator.cc	/^class BytewiseComparatorImpl : public Comparator {$/;"	c	namespace:leveldb::__anon17	file:
CC	zns_ctl/Makefile	/^CC=g++$/;"	m
CFLAGS	zns_ctl/Makefile	/^CFLAGS=-g -Wall$/;"	m
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/home\/lkwangh\/project\/leveldb_zonestore\/build$/;"	m
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/usr\/local\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/home\/lkwangh\/project\/leveldb_zonestore$/;"	m
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	108;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	115;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	122;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	129;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	137;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	144;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	151;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	159;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	164;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	171;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	174;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	183;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	186;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	189;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	192;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	19;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	207;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	222;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	229;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	243;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	253;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	271;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	280;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	294;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	311;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	314;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	56;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	64;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	70;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	76;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	85;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	94;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	108;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	115;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	122;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	129;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	13;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	151;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	159;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	164;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	171;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	174;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	183;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	186;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	201;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	216;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	223;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	237;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	251;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	269;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	278;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	296;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	299;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	56;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	70;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	76;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	94;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	226;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	285;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	290;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	220;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	283;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	288;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	102;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	117;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	124;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	130;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	139;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	146;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	152;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	160;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	166;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	177;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	195;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	200;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	211;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	223;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	233;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	244;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	255;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	274;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	27;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	282;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	287;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	296;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	301;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	57;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	65;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	72;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	78;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	87;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	97;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	102;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	130;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	139;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	152;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	160;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	166;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	177;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	189;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	205;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	217;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	227;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	239;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	241;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	253;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	272;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	280;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	285;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	57;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	72;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	78;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	87;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	103;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	111;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	118;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	131;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	140;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	147;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	153;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	161;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	167;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	178;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	196;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	201;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	212;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	224;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	234;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	246;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	256;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	275;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	283;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	288;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	28;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	297;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	302;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	58;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	66;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	73;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	79;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	88;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	98;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	118;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	140;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	147;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	153;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	167;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	16;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	178;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	195;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	206;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	218;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	228;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	254;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	273;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	281;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	286;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	28;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	66;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	73;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	79;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	88;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	104;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	112;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	126;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	132;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	141;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	148;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	168;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	179;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	197;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	202;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	213;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	225;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	235;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	249;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	260;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	263;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	276;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	284;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	289;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	298;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	303;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	30;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	32;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	60;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	67;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	81;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	90;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	99;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	112;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	132;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	141;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	148;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	168;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	191;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	196;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	207;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	219;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	247;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	258;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	261;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	274;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	282;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	287;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	30;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	32;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	60;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	81;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	99;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	133;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	219;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	267;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	36;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	133;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	213;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	265;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	36;"	d	file:
CRC	util/crc32c_test.cc	/^class CRC {};$/;"	c	namespace:leveldb::crc32c	file:
CXX_STD	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	600;"	d	file:
CXX_STD	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	602;"	d	file:
C_DIALECT	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	617;"	d	file:
C_DIALECT	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	619;"	d	file:
C_DIALECT	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	622;"	d	file:
C_DIALECT	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	624;"	d	file:
C_DIALECT	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	626;"	d	file:
Cache	include/leveldb/cache.h	/^class LEVELDB_EXPORT Cache {$/;"	c	namespace:leveldb
Cache	include/leveldb/cache.h	/^class LEVELDB_EXPORT Cache;$/;"	m	namespace:leveldb	typeref:class:leveldb::LEVELDB_EXPORT
CacheTest	util/cache_test.cc	/^  CacheTest() : cache_(NewLRUCache(kCacheSize)) { current_ = this; }$/;"	f	class:leveldb::CacheTest
CacheTest	util/cache_test.cc	/^class CacheTest {$/;"	c	namespace:leveldb	file:
CanAccelerateCRC32C	util/crc32c.cc	/^static bool CanAccelerateCRC32C() {$/;"	f	namespace:leveldb::crc32c
CanAppend	db/recovery_test.cc	/^  bool CanAppend() {$/;"	f	class:leveldb::RecoveryTest
ChangeOptions	db/db_test.cc	/^  bool ChangeOptions() {$/;"	f	class:leveldb::DBTest
ChangeOptions	table/table_builder.cc	/^Status TableBuilder::ChangeOptions(const Options& options) {$/;"	f	class:leveldb::TableBuilder
Check	db/corruption_test.cc	/^  void Check(int min_expected, int max_expected) {$/;"	f	class:leveldb::CorruptionTest
CheckCloseOnExecDoesNotLeakFDs	util/env_posix_test.cc	/^void CheckCloseOnExecDoesNotLeakFDs($/;"	f	namespace:__anon13
CheckCondition	db/c_test.c	25;"	d	file:
CheckDel	db/c_test.c	/^static void CheckDel(void* ptr, const char* k, size_t klen) {$/;"	f	file:
CheckEqual	db/c_test.c	/^static void CheckEqual(const char* expected, const char* v, size_t n) {$/;"	f	file:
CheckGet	db/c_test.c	/^static void CheckGet($/;"	f	file:
CheckInitialOffsetRecord	db/log_test.cc	/^  void CheckInitialOffsetRecord(uint64_t initial_offset,$/;"	f	class:leveldb::log::LogTest
CheckIter	db/c_test.c	/^static void CheckIter(leveldb_iterator_t* iter,$/;"	f	file:
CheckNoError	db/c_test.c	19;"	d	file:
CheckOffsetPastEndReturnsNoRecords	db/log_test.cc	/^  void CheckOffsetPastEndReturnsNoRecords(uint64_t offset_past_end) {$/;"	f	class:leveldb::log::LogTest
CheckPut	db/c_test.c	/^static void CheckPut(void* ptr,$/;"	f	file:
Check_wp_sync	util/zns/env_zone_cp.cc	/^		bool Check_wp_sync(unsigned int zone_number)$/;"	f	class:leveldb::__anon8::Zone_Coordinator	file:
Check_wp_sync	util/zns/env_zone_temp.cc	/^		bool Check_wp_sync(unsigned int zone_number)$/;"	f	class:leveldb::__anon7::Z_interface	file:
Check_zone_full	util/env_zone.cc	/^        bool Check_zone_full()$/;"	f	class:leveldb::__anon21::Zone_Coordinator	file:
Check_zone_full	util/zns/env_zone_cp.cc	/^		bool Check_zone_full(unsigned int zone_number)$/;"	f	class:leveldb::__anon8::Zone_Coordinator	file:
Check_zone_full	util/zns/env_zone_temp.cc	/^		bool Check_zone_full(unsigned int zone_number)$/;"	f	class:leveldb::__anon7::Z_interface	file:
CleanupCompaction	db/db_impl.cc	/^void DBImpl::CleanupCompaction(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
CleanupIteratorState	db/db_impl.cc	/^static void CleanupIteratorState(void* arg1, void* arg2) {$/;"	f	namespace:leveldb::__anon31
CleanupNode	include/leveldb/iterator.h	/^  struct CleanupNode {$/;"	s	class:leveldb::Iterator
Clear	db/dbformat.h	/^  void Clear() { rep_.clear(); }$/;"	f	class:leveldb::InternalKey
Clear	db/version_edit.cc	/^void VersionEdit::Clear() {$/;"	f	class:leveldb::VersionEdit
Clear	db/write_batch.cc	/^void WriteBatch::Clear() {$/;"	f	class:leveldb::WriteBatch
Clear	util/histogram.cc	/^void Histogram::Clear() {$/;"	f	class:leveldb::Histogram
ClearSavedValue	db/db_iter.cc	/^  inline void ClearSavedValue() {$/;"	f	class:leveldb::__anon38::DBIter	file:
ClipToRange	db/db_impl.cc	/^static void ClipToRange(T* ptr, V minvalue, V maxvalue) {$/;"	f	namespace:leveldb
Close	db/db_test.cc	/^  void Close() {$/;"	f	class:leveldb::DBTest
Close	db/fault_injection_test.cc	/^Status TestWritableFile::Close() {$/;"	f	class:leveldb::TestWritableFile
Close	db/recovery_test.cc	/^  void Close() {$/;"	f	class:leveldb::RecoveryTest
Close	util/env_windows.cc	/^  bool Close() {$/;"	f	class:leveldb::__anon11::ScopedHandle
Close	util/zns/env_zone_temp.cc	/^		virtual Status Close()$/;"	f	class:leveldb::__anon7::ZoneWritableFile
CloseDB	db/fault_injection_test.cc	/^  void CloseDB() {$/;"	f	class:leveldb::FaultInjectionTest
Close_zone	util/env_zone.cc	/^		bool Close_zone(unsigned int zone_number)$/;"	f	class:leveldb::__anon21::Zone_Coordinator	file:
Close_zone	util/zns/env_zone_cp.cc	/^		bool Close_zone(unsigned int zone_number)$/;"	f	class:leveldb::__anon8::Zone_Coordinator	file:
Close_zone	util/zns/env_zone_temp.cc	/^		bool Close_zone(unsigned int zone_number)$/;"	f	class:leveldb::__anon7::Z_interface	file:
CmpCompare	db/c_test.c	/^static int CmpCompare(void* arg, const char* a, size_t alen,$/;"	f	file:
CmpDestroy	db/c_test.c	/^static void CmpDestroy(void* arg) { }$/;"	f	file:
CmpName	db/c_test.c	/^static const char* CmpName(void* arg) {$/;"	f	file:
Code	include/leveldb/status.h	/^  enum Code {$/;"	g	class:leveldb::Status
Coding	util/coding_test.cc	/^class Coding {};$/;"	c	namespace:leveldb	file:
Compact	benchmarks/db_bench.cc	/^  void Compact(ThreadState* thread) { db_->CompactRange(nullptr, nullptr); }$/;"	f	class:leveldb::Benchmark	file:
Compact	db/db_test.cc	/^  void Compact(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::DBTest
CompactMemTable	db/db_impl.cc	/^void DBImpl::CompactMemTable() {$/;"	f	class:leveldb::DBImpl
CompactMemTable	db/recovery_test.cc	/^  void CompactMemTable() { dbfull()->TEST_CompactMemTable(); }$/;"	f	class:leveldb::RecoveryTest
CompactRange	db/db_impl.cc	/^void DBImpl::CompactRange(const Slice* begin, const Slice* end) {$/;"	f	class:leveldb::DBImpl
CompactRange	db/version_set.cc	/^Compaction* VersionSet::CompactRange(int level, const InternalKey* begin,$/;"	f	class:leveldb::VersionSet
Compaction	db/version_set.cc	/^Compaction::Compaction(const Options* options, int level)$/;"	f	class:leveldb::Compaction
Compaction	db/version_set.h	/^class Compaction {$/;"	c	namespace:leveldb
CompactionState	db/db_impl.cc	/^  explicit CompactionState(Compaction* c)$/;"	f	struct:leveldb::DBImpl::CompactionState
CompactionState	db/db_impl.cc	/^struct DBImpl::CompactionState {$/;"	s	class:leveldb::DBImpl	file:
CompactionStats	db/db_impl.h	/^    CompactionStats() : micros(0), bytes_read(0), bytes_written(0) {}$/;"	f	struct:leveldb::DBImpl::CompactionStats
CompactionStats	db/db_impl.h	/^  struct CompactionStats {$/;"	s	class:leveldb::DBImpl
Comparator	db/skiplist_test.cc	/^struct Comparator {$/;"	s	namespace:leveldb	file:
Comparator	include/leveldb/comparator.h	/^class LEVELDB_EXPORT Comparator {$/;"	c	namespace:leveldb
Compare	db/dbformat.cc	/^int InternalKeyComparator::Compare(const Slice& akey, const Slice& bkey) const {$/;"	f	class:leveldb::InternalKeyComparator
Compare	db/dbformat.h	/^inline int InternalKeyComparator::Compare(const InternalKey& a,$/;"	f	class:leveldb::InternalKeyComparator
Compare	table/block.cc	/^  inline int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::Block::Iter	file:
CompareIterators	db/db_test.cc	/^static bool CompareIterators(int step, DB* model, DB* db,$/;"	f	namespace:leveldb
CompressibleString	util/testutil.cc	/^Slice CompressibleString(Random* rnd, double compressed_fraction, size_t len,$/;"	f	namespace:leveldb::test
CompressionType	include/leveldb/options.h	/^enum CompressionType {$/;"	g	namespace:leveldb
ConcurrentReader	db/skiplist_test.cc	/^static void ConcurrentReader(void* arg) {$/;"	f	namespace:leveldb
ConcurrentTest	db/skiplist_test.cc	/^  ConcurrentTest() : list_(Comparator(), &arena_) {}$/;"	f	class:leveldb::ConcurrentTest
ConcurrentTest	db/skiplist_test.cc	/^class ConcurrentTest {$/;"	c	namespace:leveldb	file:
CondVar	port/port_example.h	/^class CondVar {$/;"	c	namespace:leveldb::port
CondVar	port/port_stdcxx.h	/^  explicit CondVar(Mutex* mu) : mu_(mu) { assert(mu != nullptr); }$/;"	f	class:leveldb::port::CondVar
CondVar	port/port_stdcxx.h	/^class CondVar {$/;"	c	namespace:leveldb::port
Constructor	table/table_test.cc	/^  explicit Constructor(const Comparator* cmp) : data_(STLLessThan(cmp)) {}$/;"	f	class:leveldb::Constructor
Constructor	table/table_test.cc	/^class Constructor {$/;"	c	namespace:leveldb	file:
ConsumeDecimalNumber	util/logging.cc	/^bool ConsumeDecimalNumber(Slice* in, uint64_t* val) {$/;"	f	namespace:leveldb
ConsumeDecimalNumberNoDigitsTest	util/logging_test.cc	/^void ConsumeDecimalNumberNoDigitsTest(const std::string& input_string) {$/;"	f	namespace:leveldb
ConsumeDecimalNumberOverflowTest	util/logging_test.cc	/^void ConsumeDecimalNumberOverflowTest(const std::string& input_string) {$/;"	f	namespace:leveldb
ConsumeDecimalNumberRoundtripTest	util/logging_test.cc	/^void ConsumeDecimalNumberRoundtripTest(uint64_t number,$/;"	f	namespace:leveldb
Contains	db/skiplist.h	/^bool SkipList<Key, Comparator>::Contains(const Key& key) const {$/;"	f	class:leveldb::SkipList
Contents	db/db_test.cc	/^  std::string Contents() {$/;"	f	class:leveldb::DBTest
Contents	db/write_batch_internal.h	/^  static Slice Contents(const WriteBatch* batch) { return Slice(batch->rep_); }$/;"	f	class:leveldb::WriteBatchInternal
ConvertLogFilesToTables	db/repair.cc	/^  void ConvertLogFilesToTables() {$/;"	f	class:leveldb::__anon37::Repairer	file:
ConvertLogToTable	db/repair.cc	/^  Status ConvertLogToTable(uint64_t log) {$/;"	f	class:leveldb::__anon37::Repairer	file:
CopyState	util/status.cc	/^const char* Status::CopyState(const char* state) {$/;"	f	class:leveldb::Status
CopyString	db/c.cc	/^static char* CopyString(const std::string& str) {$/;"	f	file:
Corrupt	db/corruption_test.cc	/^  void Corrupt(FileType filetype, int offset, int bytes_to_corrupt) {$/;"	f	class:leveldb::CorruptionTest
Corruption	include/leveldb/status.h	/^  static Status Corruption(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
CorruptionError	table/block.cc	/^  void CorruptionError() {$/;"	f	class:leveldb::Block::Iter	file:
CorruptionReporter	db/dumpfile.cc	/^class CorruptionReporter : public log::Reader::Reporter {$/;"	c	namespace:leveldb::__anon35	file:
CorruptionTest	db/corruption_test.cc	/^  CorruptionTest()$/;"	f	class:leveldb::CorruptionTest
CorruptionTest	db/corruption_test.cc	/^class CorruptionTest {$/;"	c	namespace:leveldb	file:
Count	db/write_batch.cc	/^int WriteBatchInternal::Count(const WriteBatch* b) {$/;"	f	class:leveldb::WriteBatchInternal
CountFiles	db/db_test.cc	/^  int CountFiles() {$/;"	f	class:leveldb::DBTest
Crc32c	benchmarks/db_bench.cc	/^  void Crc32c(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
CreateDir	util/zns/env_zone_temp.cc	/^		virtual Status CreateDir(const std::string& dirname)$/;"	f	class:leveldb::__anon7::ZoneEnv
CreateFileMetaData	db/version_set_test.cc	/^  FileMetaData* CreateFileMetaData(uint64_t number, InternalKey smallest,$/;"	f	class:leveldb::AddBoundaryInputsTest
CreateFilter	db/dbformat.cc	/^void InternalFilterPolicy::CreateFilter(const Slice* keys, int n,$/;"	f	class:leveldb::InternalFilterPolicy
CreateRandomString	issues/issue320_test.cc	/^std::string CreateRandomString(int32_t index) {$/;"	f	namespace:leveldb::__anon23
CurrentFileName	db/filename.cc	/^std::string CurrentFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
CurrentOptions	db/db_test.cc	/^  Options CurrentOptions() {$/;"	f	class:leveldb::DBTest
CurrentSizeEstimate	table/block_builder.cc	/^size_t BlockBuilder::CurrentSizeEstimate() const {$/;"	f	class:leveldb::BlockBuilder
DB	include/leveldb/db.h	/^class LEVELDB_EXPORT DB {$/;"	c	namespace:leveldb
DBConstructor	table/table_test.cc	/^  explicit DBConstructor(const Comparator* cmp)$/;"	f	class:leveldb::DBConstructor
DBConstructor	table/table_test.cc	/^class DBConstructor : public Constructor {$/;"	c	namespace:leveldb	file:
DBImpl	db/db_impl.cc	/^DBImpl::DBImpl(const Options& raw_options, const std::string& dbname)$/;"	f	class:leveldb::DBImpl
DBImpl	db/db_impl.h	/^class DBImpl : public DB {$/;"	c	namespace:leveldb
DBIter	db/db_iter.cc	/^  DBIter(DBImpl* db, const Comparator* cmp, Iterator* iter, SequenceNumber s,$/;"	f	class:leveldb::__anon38::DBIter
DBIter	db/db_iter.cc	/^class DBIter : public Iterator {$/;"	c	namespace:leveldb::__anon38	file:
DBState	benchmarks/db_bench_sqlite3.cc	/^  enum DBState { FRESH, EXISTING };$/;"	g	class:leveldb::Benchmark	file:
DBState	benchmarks/db_bench_tree_db.cc	/^  enum DBState { FRESH, EXISTING };$/;"	g	class:leveldb::Benchmark	file:
DBSynchronize	benchmarks/db_bench_tree_db.cc	/^inline static void DBSynchronize(kyotocabinet::TreeDB* db_) {$/;"	f	file:
DBTest	db/db_test.cc	/^  DBTest() : env_(new SpecialEnv(Env::Default())), option_config_(kDefault) {$/;"	f	class:leveldb::DBTest
DBTest	db/db_test.cc	/^class DBTest {$/;"	c	namespace:leveldb	file:
DB_TEST	table/table_test.cc	/^enum TestType { TABLE_TEST, BLOCK_TEST, MEMTABLE_TEST, DB_TEST };$/;"	e	enum:leveldb::TestType	file:
DEC	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	538;"	d	file:
DEC	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	523;"	d	file:
DONE	db/skiplist_test.cc	/^  enum ReaderState { STARTING, RUNNING, DONE };$/;"	e	enum:leveldb::TestState::ReaderState	file:
DebugString	db/dbformat.cc	/^std::string InternalKey::DebugString() const {$/;"	f	class:leveldb::InternalKey
DebugString	db/dbformat.cc	/^std::string ParsedInternalKey::DebugString() const {$/;"	f	class:leveldb::ParsedInternalKey
DebugString	db/version_edit.cc	/^std::string VersionEdit::DebugString() const {$/;"	f	class:leveldb::VersionEdit
DebugString	db/version_set.cc	/^std::string Version::DebugString() const {$/;"	f	class:leveldb::Version
DecodeEntry	table/block.cc	/^static inline const char* DecodeEntry(const char* p, const char* limit,$/;"	f	namespace:leveldb
DecodeFixed32	util/coding.h	/^inline uint32_t DecodeFixed32(const char* ptr) {$/;"	f	namespace:leveldb
DecodeFixed64	util/coding.h	/^inline uint64_t DecodeFixed64(const char* ptr) {$/;"	f	namespace:leveldb
DecodeFrom	db/dbformat.h	/^  bool DecodeFrom(const Slice& s) {$/;"	f	class:leveldb::InternalKey
DecodeFrom	db/version_edit.cc	/^Status VersionEdit::DecodeFrom(const Slice& src) {$/;"	f	class:leveldb::VersionEdit
DecodeFrom	table/format.cc	/^Status BlockHandle::DecodeFrom(Slice* input) {$/;"	f	class:leveldb::BlockHandle
DecodeFrom	table/format.cc	/^Status Footer::DecodeFrom(Slice* input) {$/;"	f	class:leveldb::Footer
DecodeKey	util/cache_test.cc	/^static int DecodeKey(const Slice& k) {$/;"	f	namespace:leveldb
DecodeValue	util/cache_test.cc	/^static int DecodeValue(void* v) { return reinterpret_cast<uintptr_t>(v); }$/;"	f	namespace:leveldb
Default	util/env_posix.cc	/^Env* Env::Default() {$/;"	f	class:leveldb::Env
Default	util/env_windows.cc	/^Env* Env::Default() {$/;"	f	class:leveldb::Env
Default	util/env_zone.cc	/^Env* Env::Default() {$/;"	f	class:leveldb::Env
Default	util/zns/env_zone_cp.cc	/^Env* Env::Default() {$/;"	f	class:leveldb::Env
Default	util/zns/env_zone_temp.cc	/^Env* Env::Default() {$/;"	f	class:leveldb::Env
DelayMilliseconds	db/db_test.cc	/^void DelayMilliseconds(int millis) {$/;"	f	namespace:leveldb::__anon41
Delete	db/db_impl.cc	/^Status DB::Delete(const WriteOptions& opt, const Slice& key) {$/;"	f	class:leveldb::DB
Delete	db/db_impl.cc	/^Status DBImpl::Delete(const WriteOptions& options, const Slice& key) {$/;"	f	class:leveldb::DBImpl
Delete	db/db_test.cc	/^  Status Delete(const std::string& k) { return db_->Delete(WriteOptions(), k); }$/;"	f	class:leveldb::DBTest
Delete	db/snapshot.h	/^  void Delete(const SnapshotImpl* snapshot) {$/;"	f	class:leveldb::SnapshotList
Delete	db/write_batch.cc	/^void WriteBatch::Delete(const Slice& key) {$/;"	f	class:leveldb::WriteBatch
Delete	util/env_zone.cc	/^        bool Delete()$/;"	f	class:leveldb::__anon21::Zone_Coordinator
Delete	util/zns/env_zone_cp.cc	/^		bool Delete()$/;"	f	class:leveldb::__anon8::Zone_Coordinator
Delete	util/zns/env_zone_temp.cc	/^		bool Delete()$/;"	f	class:leveldb::__anon7::Z_interface
Delete	util/zns/env_zone_temp.cc	/^		bool Delete(unsigned int segment_id)$/;"	f	class:leveldb::__anon7::Zone
DeleteAllData	db/fault_injection_test.cc	/^  void DeleteAllData() {$/;"	f	class:leveldb::FaultInjectionTest
DeleteAnSSTFile	db/db_test.cc	/^  bool DeleteAnSSTFile() {$/;"	f	class:leveldb::DBTest
DeleteBlock	table/table.cc	/^static void DeleteBlock(void* arg, void* ignored) {$/;"	f	namespace:leveldb
DeleteCachedBlock	table/table.cc	/^static void DeleteCachedBlock(const Slice& key, void* value) {$/;"	f	namespace:leveldb
DeleteDir	util/zns/env_zone_temp.cc	/^		virtual Status DeleteDir(const std::string& dirname)$/;"	f	class:leveldb::__anon7::ZoneEnv
DeleteEntry	db/table_cache.cc	/^static void DeleteEntry(const Slice& key, void* value) {$/;"	f	namespace:leveldb
DeleteFile	db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::DeleteFile(const std::string& f) {$/;"	f	class:leveldb::FaultInjectionTestEnv
DeleteFile	db/version_edit.h	/^  void DeleteFile(int level, uint64_t file) {$/;"	f	class:leveldb::VersionEdit
DeleteFile	include/leveldb/env.h	381;"	d
DeleteFile	include/leveldb/env.h	41;"	d
DeleteFile	util/env_windows.cc	37;"	d	file:
DeleteFile	util/zns/env_zone_temp.cc	/^		virtual Status DeleteFile(const std::string& fname)$/;"	f	class:leveldb::__anon7::ZoneEnv
DeleteFilesCreatedAfterLastDirSync	db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::DeleteFilesCreatedAfterLastDirSync() {$/;"	f	class:leveldb::FaultInjectionTestEnv
DeleteLogFiles	db/recovery_test.cc	/^  size_t DeleteLogFiles() {$/;"	f	class:leveldb::RecoveryTest
DeleteManifestFile	db/recovery_test.cc	/^  void DeleteManifestFile() { ASSERT_OK(env_->DeleteFile(ManifestFileName())); }$/;"	f	class:leveldb::RecoveryTest
DeleteObsoleteFiles	db/db_impl.cc	/^void DBImpl::DeleteObsoleteFiles() {$/;"	f	class:leveldb::DBImpl
DeleteRandom	benchmarks/db_bench.cc	/^  void DeleteRandom(ThreadState* thread) { DoDelete(thread, false); }$/;"	f	class:leveldb::Benchmark	file:
DeleteSeq	benchmarks/db_bench.cc	/^  void DeleteSeq(ThreadState* thread) { DoDelete(thread, true); }$/;"	f	class:leveldb::Benchmark	file:
DeletedFileSet	db/version_edit.h	/^  typedef std::set<std::pair<int, uint64_t>> DeletedFileSet;$/;"	t	class:leveldb::VersionEdit
Deleter	util/cache_test.cc	/^  static void Deleter(const Slice& key, void* v) {$/;"	f	class:leveldb::CacheTest
DescriptorFileName	db/filename.cc	/^std::string DescriptorFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
DestroyAndReopen	db/db_test.cc	/^  void DestroyAndReopen(Options* options = nullptr) {$/;"	f	class:leveldb::DBTest
DestroyDB	db/db_impl.cc	/^Status DestroyDB(const std::string& dbname, const Options& options) {$/;"	f	namespace:leveldb
DirWasSynced	db/fault_injection_test.cc	/^void FaultInjectionTestEnv::DirWasSynced() {$/;"	f	class:leveldb::FaultInjectionTestEnv
Direction	db/db_iter.cc	/^  enum Direction { kForward, kReverse };$/;"	g	class:leveldb::__anon38::DBIter	file:
Direction	table/merger.cc	/^  enum Direction { kForward, kReverse };$/;"	g	class:leveldb::__anon27::MergingIterator	file:
Dirname	util/env_posix.cc	/^  static std::string Dirname(const std::string& filename) {$/;"	f	class:leveldb::__anon19::final	file:
Dirname	util/env_zone.cc	/^        static std::string Dirname(const std::string& filename) {$/;"	f	class:leveldb::__anon21::final	file:
Dirname	util/zns/env_zone_cp.cc	/^		static std::string Dirname(const std::string& filename) {$/;"	f	class:leveldb::__anon8::final
Dirname	util/zns/env_zone_temp.cc	/^		static std::string Dirname(const std::string& filename)$/;"	f	class:leveldb::__anon7::ZoneWritableFile
DoCompactionWork	db/db_impl.cc	/^Status DBImpl::DoCompactionWork(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
DoDelete	benchmarks/db_bench.cc	/^  void DoDelete(ThreadState* thread, bool seq) {$/;"	f	class:leveldb::Benchmark	file:
DoNotDestruct	util/no_destructor_test.cc	/^  DoNotDestruct(uint32_t a, uint64_t b) : a(a), b(b) {}$/;"	f	struct:leveldb::__anon9::DoNotDestruct
DoNotDestruct	util/no_destructor_test.cc	/^struct DoNotDestruct {$/;"	s	namespace:leveldb::__anon9	file:
DoReads	db/autocompact_test.cc	/^void AutoCompactTest::DoReads(int n) {$/;"	f	class:leveldb::AutoCompactTest
DoTest	db/fault_injection_test.cc	/^  void DoTest() {$/;"	f	class:leveldb::FaultInjectionTest
DoWrite	benchmarks/db_bench.cc	/^  void DoWrite(ThreadState* thread, bool seq) {$/;"	f	class:leveldb::Benchmark	file:
DoWriteStringToFile	util/env.cc	/^static Status DoWriteStringToFile(Env* env, const Slice& data,$/;"	f	namespace:leveldb
DropUnsyncedData	db/fault_injection_test.cc	/^Status FileState::DropUnsyncedData() const {$/;"	f	class:leveldb::FileState
DropUnsyncedFileData	db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::DropUnsyncedFileData() {$/;"	f	class:leveldb::FaultInjectionTestEnv
DroppedBytes	db/log_test.cc	/^  size_t DroppedBytes() const { return report_.dropped_bytes_; }$/;"	f	class:leveldb::log::LogTest
DumpDescriptor	db/dumpfile.cc	/^Status DumpDescriptor(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon35
DumpFile	db/dumpfile.cc	/^Status DumpFile(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb
DumpFileCounts	db/db_test.cc	/^  void DumpFileCounts(const char* label) {$/;"	f	class:leveldb::DBTest
DumpFilter	util/bloom_test.cc	/^  void DumpFilter() {$/;"	f	class:leveldb::BloomTest
DumpLog	db/dumpfile.cc	/^Status DumpLog(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon35
DumpSSTableList	db/db_test.cc	/^  std::string DumpSSTableList() {$/;"	f	class:leveldb::DBTest
DumpTable	db/dumpfile.cc	/^Status DumpTable(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon35
EQUALS	build/Makefile	/^EQUALS = =$/;"	m
EXCLUSIVE_LOCKS_REQUIRED	helpers/memenv/memenv.cc	/^      EXCLUSIVE_LOCKS_REQUIRED(mutex_) {$/;"	f	class:leveldb::__anon5::InMemoryEnv
EXCLUSIVE_LOCKS_REQUIRED	port/thread_annotations.h	42;"	d
EXCLUSIVE_LOCKS_REQUIRED	util/zns/env_zone_temp.cc	/^		void DeleteFileInternal(const std::string& fname) EXCLUSIVE_LOCKS_REQUIRED(mutex_)$/;"	f	class:leveldb::__anon7::ZoneEnv
EXCLUSIVE_LOCK_FUNCTION	port/port_stdcxx.h	/^  void Lock() EXCLUSIVE_LOCK_FUNCTION() { mu_.lock(); }$/;"	f	class:leveldb::port::Mutex
EXCLUSIVE_LOCK_FUNCTION	port/thread_annotations.h	69;"	d
EXCLUSIVE_LOCK_FUNCTION	util/mutexlock.h	/^  explicit MutexLock(port::Mutex* mu) EXCLUSIVE_LOCK_FUNCTION(mu) : mu_(mu) {$/;"	f	class:leveldb::MutexLock
EXCLUSIVE_TRYLOCK_FUNCTION	port/thread_annotations.h	79;"	d
EXISTING	benchmarks/db_bench_sqlite3.cc	/^  enum DBState { FRESH, EXISTING };$/;"	e	enum:leveldb::Benchmark::DBState	file:
EXISTING	benchmarks/db_bench_tree_db.cc	/^  enum DBState { FRESH, EXISTING };$/;"	e	enum:leveldb::Benchmark::DBState	file:
EmitPhysicalRecord	db/log_writer.cc	/^Status Writer::EmitPhysicalRecord(RecordType t, const char* ptr,$/;"	f	class:leveldb::log::Writer
EmptyIterator	table/iterator.cc	/^  EmptyIterator(const Status& s) : status_(s) {}$/;"	f	class:leveldb::__anon24::EmptyIterator
EmptyIterator	table/iterator.cc	/^class EmptyIterator : public Iterator {$/;"	c	namespace:leveldb::__anon24	file:
Encode	db/dbformat.h	/^  Slice Encode() const {$/;"	f	class:leveldb::InternalKey
EncodeFixed32	util/coding.h	/^inline void EncodeFixed32(char* dst, uint32_t value) {$/;"	f	namespace:leveldb
EncodeFixed64	util/coding.h	/^inline void EncodeFixed64(char* dst, uint64_t value) {$/;"	f	namespace:leveldb
EncodeKey	db/memtable.cc	/^static const char* EncodeKey(std::string* scratch, const Slice& target) {$/;"	f	namespace:leveldb
EncodeKey	util/cache_test.cc	/^static std::string EncodeKey(int k) {$/;"	f	namespace:leveldb
EncodeTo	db/version_edit.cc	/^void VersionEdit::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::VersionEdit
EncodeTo	table/format.cc	/^void BlockHandle::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::BlockHandle
EncodeTo	table/format.cc	/^void Footer::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::Footer
EncodeValue	util/cache_test.cc	/^static void* EncodeValue(uintptr_t v) { return reinterpret_cast<void*>(v); }$/;"	f	namespace:leveldb
EncodeVarint32	util/coding.cc	/^char* EncodeVarint32(char* dst, uint32_t v) {$/;"	f	namespace:leveldb
EncodeVarint64	util/coding.cc	/^char* EncodeVarint64(char* dst, uint64_t v) {$/;"	f	namespace:leveldb
Env	include/leveldb/env.h	/^class LEVELDB_EXPORT Env {$/;"	c	namespace:leveldb
EnvPosixTest	util/env_posix_test.cc	/^  EnvPosixTest() : env_(Env::Default()) {}$/;"	f	class:leveldb::EnvPosixTest
EnvPosixTest	util/env_posix_test.cc	/^class EnvPosixTest {$/;"	c	namespace:leveldb	file:
EnvPosixTestHelper	util/env_posix_test_helper.h	/^class EnvPosixTestHelper {$/;"	c	namespace:leveldb
EnvTest	util/env_test.cc	/^  EnvTest() : env_(Env::Default()) {}$/;"	f	class:leveldb::EnvTest
EnvTest	util/env_test.cc	/^class EnvTest {$/;"	c	namespace:leveldb	file:
EnvWindowsTest	util/env_windows_test.cc	/^  EnvWindowsTest() : env_(Env::Default()) {}$/;"	f	class:leveldb::EnvWindowsTest
EnvWindowsTest	util/env_windows_test.cc	/^class EnvWindowsTest {$/;"	c	namespace:leveldb	file:
EnvWindowsTestHelper	util/env_windows_test_helper.h	/^class EnvWindowsTestHelper {$/;"	c	namespace:leveldb
EnvWrapper	include/leveldb/env.h	/^  explicit EnvWrapper(Env* t) : target_(t) {}$/;"	f	class:leveldb::EnvWrapper
EnvWrapper	include/leveldb/env.h	/^class LEVELDB_EXPORT EnvWrapper : public Env {$/;"	c	namespace:leveldb
Equal	db/skiplist.h	/^  bool Equal(const Key& a, const Key& b) const { return (compare_(a, b) == 0); }$/;"	f	class:leveldb::SkipList
Erase	util/cache.cc	/^void LRUCache::Erase(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon16::LRUCache
Erase	util/cache_test.cc	/^  void Erase(int key) { cache_->Erase(EncodeKey(key)); }$/;"	f	class:leveldb::CacheTest
ErrorCheck	benchmarks/db_bench_sqlite3.cc	/^inline static void ErrorCheck(int status) {$/;"	f	file:
ErrorEnv	util/testutil.h	/^  ErrorEnv()$/;"	f	class:leveldb::test::ErrorEnv
ErrorEnv	util/testutil.h	/^class ErrorEnv : public EnvWrapper {$/;"	c	namespace:leveldb::test
EscapeString	util/logging.cc	/^std::string EscapeString(const Slice& value) {$/;"	f	namespace:leveldb
Evict	db/table_cache.cc	/^void TableCache::Evict(uint64_t file_number) {$/;"	f	class:leveldb::TableCache
ExecErrorCheck	benchmarks/db_bench_sqlite3.cc	/^inline static void ExecErrorCheck(int status, char* err_msg) {$/;"	f	file:
ExpandedCompactionByteSizeLimit	db/version_set.cc	/^static int64_t ExpandedCompactionByteSizeLimit(const Options* options) {$/;"	f	namespace:leveldb
ExpectedVerifResult	db/fault_injection_test.cc	/^  enum ExpectedVerifResult { VAL_EXPECT_NO_ERROR, VAL_EXPECT_ERROR };$/;"	g	class:leveldb::FaultInjectionTest	file:
Extend	util/crc32c.cc	/^uint32_t Extend(uint32_t crc, const char* data, size_t n) {$/;"	f	namespace:leveldb::crc32c
ExtractMetaData	db/repair.cc	/^  void ExtractMetaData() {$/;"	f	class:leveldb::__anon37::Repairer	file:
ExtractUserKey	db/dbformat.h	/^inline Slice ExtractUserKey(const Slice& internal_key) {$/;"	f	namespace:leveldb
FALLTHROUGH_INTENDED	util/hash.cc	15;"	d	file:
FLAGS_WAL_enabled	benchmarks/db_bench_sqlite3.cc	/^static bool FLAGS_WAL_enabled = true;$/;"	v	file:
FLAGS_benchmarks	benchmarks/db_bench.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_benchmarks	benchmarks/db_bench_sqlite3.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_benchmarks	benchmarks/db_bench_tree_db.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_block_size	benchmarks/db_bench.cc	/^static int FLAGS_block_size = 0;$/;"	v	file:
FLAGS_bloom_bits	benchmarks/db_bench.cc	/^static int FLAGS_bloom_bits = -1;$/;"	v	file:
FLAGS_cache_size	benchmarks/db_bench.cc	/^static int FLAGS_cache_size = -1;$/;"	v	file:
FLAGS_cache_size	benchmarks/db_bench_tree_db.cc	/^static int FLAGS_cache_size = 4194304;$/;"	v	file:
FLAGS_compression	benchmarks/db_bench_tree_db.cc	/^static bool FLAGS_compression = true;$/;"	v	file:
FLAGS_compression_ratio	benchmarks/db_bench.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_compression_ratio	benchmarks/db_bench_sqlite3.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_compression_ratio	benchmarks/db_bench_tree_db.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_db	benchmarks/db_bench.cc	/^static const char* FLAGS_db = nullptr;$/;"	v	file:
FLAGS_db	benchmarks/db_bench_sqlite3.cc	/^static const char* FLAGS_db = nullptr;$/;"	v	file:
FLAGS_db	benchmarks/db_bench_tree_db.cc	/^static const char* FLAGS_db = nullptr;$/;"	v	file:
FLAGS_histogram	benchmarks/db_bench.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_histogram	benchmarks/db_bench_sqlite3.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_histogram	benchmarks/db_bench_tree_db.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_max_file_size	benchmarks/db_bench.cc	/^static int FLAGS_max_file_size = 0;$/;"	v	file:
FLAGS_num	benchmarks/db_bench.cc	/^static int FLAGS_num = 1000;$/;"	v	file:
FLAGS_num	benchmarks/db_bench_sqlite3.cc	/^static int FLAGS_num = 1000000;$/;"	v	file:
FLAGS_num	benchmarks/db_bench_tree_db.cc	/^static int FLAGS_num = 1000000;$/;"	v	file:
FLAGS_num_pages	benchmarks/db_bench_sqlite3.cc	/^static int FLAGS_num_pages = 4096;$/;"	v	file:
FLAGS_open_files	benchmarks/db_bench.cc	/^static int FLAGS_open_files = 0;$/;"	v	file:
FLAGS_page_size	benchmarks/db_bench_sqlite3.cc	/^static int FLAGS_page_size = 1024;$/;"	v	file:
FLAGS_page_size	benchmarks/db_bench_tree_db.cc	/^static int FLAGS_page_size = 1024;$/;"	v	file:
FLAGS_reads	benchmarks/db_bench.cc	/^static int FLAGS_reads = 100000;$/;"	v	file:
FLAGS_reads	benchmarks/db_bench_sqlite3.cc	/^static int FLAGS_reads = -1;$/;"	v	file:
FLAGS_reads	benchmarks/db_bench_tree_db.cc	/^static int FLAGS_reads = -1;$/;"	v	file:
FLAGS_reuse_logs	benchmarks/db_bench.cc	/^static bool FLAGS_reuse_logs = false;$/;"	v	file:
FLAGS_threads	benchmarks/db_bench.cc	/^static int FLAGS_threads = 1;$/;"	v	file:
FLAGS_transaction	benchmarks/db_bench_sqlite3.cc	/^static bool FLAGS_transaction = true;$/;"	v	file:
FLAGS_use_existing_db	benchmarks/db_bench.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v	file:
FLAGS_use_existing_db	benchmarks/db_bench_sqlite3.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v	file:
FLAGS_use_existing_db	benchmarks/db_bench_tree_db.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v	file:
FLAGS_value_size	benchmarks/db_bench.cc	/^static int FLAGS_value_size = 1024;$/;"	v	file:
FLAGS_value_size	benchmarks/db_bench_sqlite3.cc	/^static int FLAGS_value_size = 100;$/;"	v	file:
FLAGS_value_size	benchmarks/db_bench_tree_db.cc	/^static int FLAGS_value_size = 100;$/;"	v	file:
FLAGS_write_buffer_size	benchmarks/db_bench.cc	/^static int FLAGS_write_buffer_size = 0;$/;"	v	file:
FRESH	benchmarks/db_bench_sqlite3.cc	/^  enum DBState { FRESH, EXISTING };$/;"	e	enum:leveldb::Benchmark::DBState	file:
FRESH	benchmarks/db_bench_tree_db.cc	/^  enum DBState { FRESH, EXISTING };$/;"	e	enum:leveldb::Benchmark::DBState	file:
FalsePositiveRate	util/bloom_test.cc	/^  double FalsePositiveRate() {$/;"	f	class:leveldb::BloomTest
FaultInjectionTest	db/fault_injection_test.cc	/^  FaultInjectionTest()$/;"	f	class:leveldb::FaultInjectionTest
FaultInjectionTest	db/fault_injection_test.cc	/^class FaultInjectionTest {$/;"	c	namespace:leveldb	file:
FaultInjectionTestEnv	db/fault_injection_test.cc	/^  FaultInjectionTestEnv()$/;"	f	class:leveldb::FaultInjectionTestEnv
FaultInjectionTestEnv	db/fault_injection_test.cc	/^class FaultInjectionTestEnv : public EnvWrapper {$/;"	c	namespace:leveldb	file:
FileExists	util/zns/env_zone_temp.cc	/^		virtual bool FileExists(const std::string& fname)$/;"	f	class:leveldb::__anon7::ZoneEnv
FileLock	include/leveldb/env.h	/^class LEVELDB_EXPORT FileLock {$/;"	c	namespace:leveldb
FileMetaData	db/version_edit.h	/^  FileMetaData() : refs(0), allowed_seeks(1 << 30), file_size(0) {}$/;"	f	struct:leveldb::FileMetaData
FileMetaData	db/version_edit.h	/^struct FileMetaData {$/;"	s	namespace:leveldb
FileNameTest	db/filename_test.cc	/^class FileNameTest {};$/;"	c	namespace:leveldb	file:
FileSet	db/version_set.cc	/^  typedef std::set<FileMetaData*, BySmallestKey> FileSet;$/;"	t	class:leveldb::VersionSet::Builder	file:
FileSize	db/recovery_test.cc	/^  uint64_t FileSize(const std::string& fname) {$/;"	f	class:leveldb::RecoveryTest
FileSize	table/table_builder.cc	/^uint64_t TableBuilder::FileSize() const { return rep_->offset; }$/;"	f	class:leveldb::TableBuilder
FileState	db/fault_injection_test.cc	/^  FileState() : pos_(-1), pos_at_last_sync_(-1), pos_at_last_flush_(-1) {}$/;"	f	struct:leveldb::__anon40::FileState
FileState	db/fault_injection_test.cc	/^  FileState(const std::string& filename)$/;"	f	struct:leveldb::__anon40::FileState
FileState	db/fault_injection_test.cc	/^struct FileState {$/;"	s	namespace:leveldb::__anon40	file:
FileState	helpers/memenv/memenv.cc	/^  FileState() : refs_(0), size_(0) {}$/;"	f	class:leveldb::__anon5::FileState
FileState	helpers/memenv/memenv.cc	/^class FileState {$/;"	c	namespace:leveldb::__anon5	file:
FileSystem	helpers/memenv/memenv.cc	/^  typedef std::map<std::string, FileState*> FileSystem;$/;"	t	class:leveldb::__anon5::InMemoryEnv	file:
FileType	db/filename.h	/^enum FileType {$/;"	g	namespace:leveldb
File_Info	util/env_zone.cc	/^        File_Info(ssize_t zone_number, uint64_t write_point, ssize_t offset)$/;"	f	class:leveldb::__anon21::File_Info
File_Info	util/env_zone.cc	/^class File_Info$/;"	c	namespace:leveldb::__anon21	file:
FilesPerLevel	db/db_test.cc	/^  std::string FilesPerLevel() {$/;"	f	class:leveldb::DBTest
FillLevels	db/db_test.cc	/^  void FillLevels(const std::string& smallest, const std::string& largest) {$/;"	f	class:leveldb::DBTest
FilterBlockBuilder	table/filter_block.cc	/^FilterBlockBuilder::FilterBlockBuilder(const FilterPolicy* policy)$/;"	f	class:leveldb::FilterBlockBuilder
FilterBlockBuilder	table/filter_block.h	/^class FilterBlockBuilder {$/;"	c	namespace:leveldb
FilterBlockReader	table/filter_block.cc	/^FilterBlockReader::FilterBlockReader(const FilterPolicy* policy,$/;"	f	class:leveldb::FilterBlockReader
FilterBlockReader	table/filter_block.h	/^class FilterBlockReader {$/;"	c	namespace:leveldb
FilterBlockTest	table/filter_block_test.cc	/^class FilterBlockTest {$/;"	c	namespace:leveldb	file:
FilterCreate	db/c_test.c	/^static char* FilterCreate($/;"	f	file:
FilterDestroy	db/c_test.c	/^static void FilterDestroy(void* arg) { }$/;"	f	file:
FilterKeyMatch	db/c_test.c	/^uint8_t FilterKeyMatch(void* arg, const char* key, size_t length,$/;"	f
FilterName	db/c_test.c	/^static const char* FilterName(void* arg) {$/;"	f	file:
FilterPolicy	include/leveldb/filter_policy.h	/^class LEVELDB_EXPORT FilterPolicy {$/;"	c	namespace:leveldb
FilterSize	util/bloom_test.cc	/^  size_t FilterSize() const { return filter_.size(); }$/;"	f	class:leveldb::BloomTest
Finalize	db/version_set.cc	/^void VersionSet::Finalize(Version* v) {$/;"	f	class:leveldb::VersionSet
Find	db/version_set_test.cc	/^  int Find(const char* key) {$/;"	f	class:leveldb::FindFileTest
FindFile	db/version_set.cc	/^int FindFile(const InternalKeyComparator& icmp,$/;"	f	namespace:leveldb
FindFileTest	db/version_set_test.cc	/^  FindFileTest() : disjoint_sorted_files_(true) {}$/;"	f	class:leveldb::FindFileTest
FindFileTest	db/version_set_test.cc	/^class FindFileTest {$/;"	c	namespace:leveldb	file:
FindFiles	db/repair.cc	/^  Status FindFiles() {$/;"	f	class:leveldb::__anon37::Repairer	file:
FindGreaterOrEqual	db/skiplist.h	/^SkipList<Key, Comparator>::FindGreaterOrEqual(const Key& key,$/;"	f	class:leveldb::SkipList
FindLargest	table/merger.cc	/^void MergingIterator::FindLargest() {$/;"	f	class:leveldb::__anon27::MergingIterator
FindLargestKey	db/version_set.cc	/^bool FindLargestKey(const InternalKeyComparator& icmp,$/;"	f	namespace:leveldb
FindLast	db/skiplist.h	/^typename SkipList<Key, Comparator>::Node* SkipList<Key, Comparator>::FindLast()$/;"	f	class:leveldb::SkipList
FindLessThan	db/skiplist.h	/^SkipList<Key, Comparator>::FindLessThan(const Key& key) const {$/;"	f	class:leveldb::SkipList
FindNextUserEntry	db/db_iter.cc	/^void DBIter::FindNextUserEntry(bool skipping, std::string* skip) {$/;"	f	class:leveldb::__anon38::DBIter
FindPointer	util/cache.cc	/^  LRUHandle** FindPointer(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon16::HandleTable	file:
FindPrevUserEntry	db/db_iter.cc	/^void DBIter::FindPrevUserEntry() {$/;"	f	class:leveldb::__anon38::DBIter
FindShortSuccessor	db/dbformat.cc	/^void InternalKeyComparator::FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::InternalKeyComparator
FindShortestSeparator	db/dbformat.cc	/^void InternalKeyComparator::FindShortestSeparator(std::string* start,$/;"	f	class:leveldb::InternalKeyComparator
FindSmallest	table/merger.cc	/^void MergingIterator::FindSmallest() {$/;"	f	class:leveldb::__anon27::MergingIterator
FindSmallestBoundaryFile	db/version_set.cc	/^FileMetaData* FindSmallestBoundaryFile($/;"	f	namespace:leveldb
FindTable	db/table_cache.cc	/^Status TableCache::FindTable(uint64_t file_number, uint64_t file_size,$/;"	f	class:leveldb::TableCache
Finish	table/block_builder.cc	/^Slice BlockBuilder::Finish() {$/;"	f	class:leveldb::BlockBuilder
Finish	table/filter_block.cc	/^Slice FilterBlockBuilder::Finish() {$/;"	f	class:leveldb::FilterBlockBuilder
Finish	table/table_builder.cc	/^Status TableBuilder::Finish() {$/;"	f	class:leveldb::TableBuilder
Finish	table/table_test.cc	/^  void Finish(const Options& options, std::vector<std::string>* keys,$/;"	f	class:leveldb::Constructor
FinishCompactionOutputFile	db/db_impl.cc	/^Status DBImpl::FinishCompactionOutputFile(CompactionState* compact,$/;"	f	class:leveldb::DBImpl
FinishErase	util/cache.cc	/^bool LRUCache::FinishErase(LRUHandle* e) {$/;"	f	class:leveldb::__anon16::LRUCache
FinishedSingleOp	benchmarks/db_bench.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::__anon4::Stats
FinishedSingleOp	benchmarks/db_bench_sqlite3.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::Benchmark	file:
FinishedSingleOp	benchmarks/db_bench_tree_db.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::Benchmark	file:
FirstLogFile	db/recovery_test.cc	/^  uint64_t FirstLogFile() { return GetFiles(kLogFile)[0]; }$/;"	f	class:leveldb::RecoveryTest
FixChecksum	db/log_test.cc	/^  void FixChecksum(int header_offset, int len) {$/;"	f	class:leveldb::log::LogTest
Flush	db/fault_injection_test.cc	/^Status TestWritableFile::Flush() {$/;"	f	class:leveldb::TestWritableFile
Flush	table/table_builder.cc	/^void TableBuilder::Flush() {$/;"	f	class:leveldb::TableBuilder
FlushBuffer	util/env_posix.cc	/^  Status FlushBuffer() {$/;"	f	class:leveldb::__anon19::final	file:
FlushBuffer	util/env_windows.cc	/^  Status FlushBuffer() {$/;"	f	class:leveldb::__anon11::WindowsWritableFile	file:
FlushBuffer	util/env_zone.cc	/^		void FlushBuffer(bool sync)$/;"	f	class:leveldb::__anon21::Zone_Coordinator
FlushBuffer	util/env_zone.cc	/^        Status FlushBuffer(bool sync)$/;"	f	class:leveldb::__anon21::final	file:
FlushBuffer	util/zns/env_zone_cp.cc	/^		Status FlushBuffer()$/;"	f	class:leveldb::__anon8::ZoneFile
FlushBuffer	util/zns/env_zone_temp.cc	/^		Status FlushBuffer()$/;"	f	class:leveldb::__anon7::ZoneFile
Footer	table/format.h	/^class Footer {$/;"	c	namespace:leveldb
ForEachOverlapping	db/version_set.cc	/^void Version::ForEachOverlapping(Slice user_key, Slice internal_key, void* arg,$/;"	f	class:leveldb::Version
ForceError	db/log_test.cc	/^  void ForceError() { source_.force_error_ = true; }$/;"	f	class:leveldb::log::LogTest
FormatTest	db/dbformat_test.cc	/^class FormatTest {};$/;"	c	namespace:leveldb	file:
Free	db/c_test.c	/^static void Free(char** ptr) {$/;"	f	file:
GC	util/zns/env_zone_temp.cc	/^		void GC()$/;"	f	class:leveldb::__anon7::Z_interface	file:
GUARDED_BY	port/thread_annotations.h	24;"	d
Generate	benchmarks/db_bench.cc	/^  Slice Generate(size_t len) {$/;"	f	class:leveldb::__anon4::RandomGenerator
Generate	benchmarks/db_bench_sqlite3.cc	/^  Slice Generate(int len) {$/;"	f	class:leveldb::__anon3::RandomGenerator
Generate	benchmarks/db_bench_tree_db.cc	/^  Slice Generate(int len) {$/;"	f	class:leveldb::__anon2::RandomGenerator
GenerateFilter	table/filter_block.cc	/^void FilterBlockBuilder::GenerateFilter() {$/;"	f	class:leveldb::FilterBlockBuilder
GenerateRandomNumber	issues/issue320_test.cc	/^int GenerateRandomNumber(int max) { return std::rand() % max; }$/;"	f	namespace:leveldb::__anon23
Get	db/db_impl.cc	/^Status DBImpl::Get(const ReadOptions& options, const Slice& key,$/;"	f	class:leveldb::DBImpl
Get	db/db_test.cc	/^  std::string Get(const std::string& k, const Snapshot* snapshot = nullptr) {$/;"	f	class:leveldb::DBTest
Get	db/memtable.cc	/^bool MemTable::Get(const LookupKey& key, std::string* value, Status* s) {$/;"	f	class:leveldb::MemTable
Get	db/recovery_test.cc	/^  std::string Get(const std::string& k, const Snapshot* snapshot = nullptr) {$/;"	f	class:leveldb::RecoveryTest
Get	db/skiplist_test.cc	/^    int Get(int k) { return generation[k].load(std::memory_order_acquire); }$/;"	f	struct:leveldb::ConcurrentTest::State
Get	db/table_cache.cc	/^Status TableCache::Get(const ReadOptions& options, uint64_t file_number,$/;"	f	class:leveldb::TableCache
Get	db/version_set.cc	/^Status Version::Get(const ReadOptions& options, const LookupKey& k,$/;"	f	class:leveldb::Version
GetApproximateSizes	db/db_impl.cc	/^void DBImpl::GetApproximateSizes(const Range* range, int n, uint64_t* sizes) {$/;"	f	class:leveldb::DBImpl
GetArgvZero	util/env_posix_test.cc	/^std::vector<char>* GetArgvZero() {$/;"	f	namespace:__anon13
GetChildren	util/zns/env_zone_temp.cc	/^		virtual Status GetChildren(const std::string& dir, std::vector<std::string>* result)$/;"	f	class:leveldb::__anon7::ZoneEnv
GetDirName	db/fault_injection_test.cc	/^static std::string GetDirName(const std::string& filename) {$/;"	f	namespace:leveldb::__anon40
GetFileIterator	db/version_set.cc	/^static Iterator* GetFileIterator(void* arg, const ReadOptions& options,$/;"	f	namespace:leveldb
GetFileSize	util/zns/env_zone_temp.cc	/^		virtual Status GetFileSize(const std::string& fname, uint64_t* file_size)$/;"	f	class:leveldb::__anon7::ZoneEnv
GetFiles	db/recovery_test.cc	/^  std::vector<uint64_t> GetFiles(FileType t) {$/;"	f	class:leveldb::RecoveryTest
GetHeapProfile	port/port_stdcxx.h	/^inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {$/;"	f	namespace:leveldb::port
GetInternalKey	db/version_edit.cc	/^static bool GetInternalKey(Slice* input, InternalKey* dst) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	db/memtable.cc	/^static Slice GetLengthPrefixedSlice(const char* data) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	util/coding.cc	/^bool GetLengthPrefixedSlice(Slice* input, Slice* result) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	util/coding.cc	/^const char* GetLengthPrefixedSlice(const char* p, const char* limit,$/;"	f	namespace:leveldb
GetLevel	db/version_edit.cc	/^static bool GetLevel(Slice* input, int* level) {$/;"	f	namespace:leveldb
GetMaxFileDescriptor	util/env_posix_test.cc	/^void GetMaxFileDescriptor(int* result_fd) {$/;"	f	namespace:__anon13
GetMaxHeight	db/skiplist.h	/^  inline int GetMaxHeight() const {$/;"	f	class:leveldb::SkipList
GetNewlyOpenedFileDescriptor	util/env_posix_test.cc	/^void GetNewlyOpenedFileDescriptor($/;"	f	namespace:__anon13
GetOpenFileDescriptors	util/env_posix_test.cc	/^void GetOpenFileDescriptors(std::unordered_set<int>* open_fds) {$/;"	f	namespace:__anon13
GetOverlappingInputs	db/version_set.cc	/^void Version::GetOverlappingInputs(int level, const InternalKey* begin,$/;"	f	class:leveldb::Version
GetProperty	db/db_impl.cc	/^bool DBImpl::GetProperty(const Slice& property, std::string* value) {$/;"	f	class:leveldb::DBImpl
GetRange	db/version_set.cc	/^void VersionSet::GetRange(const std::vector<FileMetaData*>& inputs,$/;"	f	class:leveldb::VersionSet
GetRange2	db/version_set.cc	/^void VersionSet::GetRange2(const std::vector<FileMetaData*>& inputs1,$/;"	f	class:leveldb::VersionSet
GetRestartPoint	table/block.cc	/^  uint32_t GetRestartPoint(uint32_t index) {$/;"	f	class:leveldb::Block::Iter	file:
GetSnapshot	db/db_impl.cc	/^const Snapshot* DBImpl::GetSnapshot() {$/;"	f	class:leveldb::DBImpl
GetStats	db/version_set.h	/^  struct GetStats {$/;"	s	class:leveldb::Version
GetTestDirectory	util/zns/env_zone_temp.cc	/^		virtual Status GetTestDirectory(std::string* path)$/;"	f	class:leveldb::__anon7::ZoneEnv
GetVarint32	util/coding.cc	/^bool GetVarint32(Slice* input, uint32_t* value) {$/;"	f	namespace:leveldb
GetVarint32Ptr	util/coding.h	/^inline const char* GetVarint32Ptr(const char* p, const char* limit,$/;"	f	namespace:leveldb
GetVarint32PtrFallback	util/coding.cc	/^const char* GetVarint32PtrFallback(const char* p, const char* limit,$/;"	f	namespace:leveldb
GetVarint64	util/coding.cc	/^bool GetVarint64(Slice* input, uint64_t* value) {$/;"	f	namespace:leveldb
GetVarint64Ptr	util/coding.cc	/^const char* GetVarint64Ptr(const char* p, const char* limit, uint64_t* value) {$/;"	f	namespace:leveldb
GetWindowsErrorMessage	util/env_windows.cc	/^std::string GetWindowsErrorMessage(DWORD error_code) {$/;"	f	namespace:leveldb::__anon11
GuessType	db/dumpfile.cc	/^bool GuessType(const std::string& fname, FileType* type) {$/;"	f	namespace:leveldb::__anon35
HASH	util/hash_test.cc	/^class HASH {};$/;"	c	namespace:leveldb	file:
HAVE_CRC32C	build/include/port/port_config.h	25;"	d
HAVE_FDATASYNC	build/include/port/port_config.h	10;"	d
HAVE_FULLFSYNC	build/include/port/port_config.h	15;"	d
HAVE_O_CLOEXEC	build/include/port/port_config.h	20;"	d
HAVE_SNAPPY	build/include/port/port_config.h	30;"	d
HEX	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	549;"	d	file:
HEX	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	534;"	d	file:
Handle	include/leveldb/cache.h	/^  struct Handle {};$/;"	s	class:leveldb::Cache
HandleDumpCommand	db/leveldbutil.cc	/^bool HandleDumpCommand(Env* env, char** files, int num) {$/;"	f	namespace:leveldb::__anon39
HandleTable	util/cache.cc	/^  HandleTable() : length_(0), elems_(0), list_(nullptr) { Resize(); }$/;"	f	class:leveldb::__anon16::HandleTable
HandleTable	util/cache.cc	/^class HandleTable {$/;"	c	namespace:leveldb::__anon16	file:
Handler	include/leveldb/write_batch.h	/^  class LEVELDB_EXPORT Handler {$/;"	c	class:leveldb::WriteBatch
Harness	table/table_test.cc	/^  Harness() : constructor_(nullptr) {}$/;"	f	class:leveldb::Harness
Harness	table/table_test.cc	/^class Harness {$/;"	c	namespace:leveldb	file:
Hash	util/hash.cc	/^uint32_t Hash(const char* data, size_t n, uint32_t seed) {$/;"	f	namespace:leveldb
HashNumbers	db/skiplist_test.cc	/^  static uint64_t HashNumbers(uint64_t k, uint64_t g) {$/;"	f	class:leveldb::ConcurrentTest	file:
HashSlice	util/cache.cc	/^  static inline uint32_t HashSlice(const Slice& s) {$/;"	f	class:leveldb::__anon16::ShardedLRUCache	file:
HeapProfile	benchmarks/db_bench.cc	/^  void HeapProfile() {$/;"	f	class:leveldb::Benchmark	file:
Histogram	util/histogram.h	/^  Histogram() {}$/;"	f	class:leveldb::Histogram
Histogram	util/histogram.h	/^class Histogram {$/;"	c	namespace:leveldb
ID_VOID_MAIN	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
IKey	db/dbformat_test.cc	/^static std::string IKey(const std::string& user_key, uint64_t seq,$/;"	f	namespace:leveldb
IOError	include/leveldb/status.h	/^  static Status IOError(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
InMemoryEnv	helpers/memenv/memenv.cc	/^  explicit InMemoryEnv(Env* base_env) : EnvWrapper(base_env) {}$/;"	f	class:leveldb::__anon5::InMemoryEnv
InMemoryEnv	helpers/memenv/memenv.cc	/^class InMemoryEnv : public EnvWrapper {$/;"	c	namespace:leveldb::__anon5	file:
Increment	db/db_test.cc	/^  void Increment() { IncrementBy(1); }$/;"	f	class:leveldb::__anon41::AtomicCounter
Increment	table/table_test.cc	/^static void Increment(const Comparator* cmp, std::string* key) {$/;"	f	namespace:leveldb
IncrementByte	db/log_test.cc	/^  void IncrementByte(int offset, int delta) {$/;"	f	class:leveldb::log::LogTest
InfoLogFileName	db/filename.cc	/^std::string InfoLogFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
Init	table/table_test.cc	/^  void Init(const TestArgs& args) {$/;"	f	class:leveldb::Harness
InitDataBlock	table/two_level_iterator.cc	/^void TwoLevelIterator::InitDataBlock() {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
InitTypeCrc	db/log_writer.cc	/^static void InitTypeCrc(uint32_t* type_crc) {$/;"	f	namespace:leveldb::log
Insert	db/skiplist.h	/^void SkipList<Key, Comparator>::Insert(const Key& key) {$/;"	f	class:leveldb::SkipList
Insert	util/cache.cc	/^  LRUHandle* Insert(LRUHandle* h) {$/;"	f	class:leveldb::__anon16::HandleTable
Insert	util/cache.cc	/^Cache::Handle* LRUCache::Insert(const Slice& key, uint32_t hash, void* value,$/;"	f	class:leveldb::__anon16::LRUCache
Insert	util/cache_test.cc	/^  void Insert(int key, int value, int charge = 1) {$/;"	f	class:leveldb::CacheTest
InsertAndReturnHandle	util/cache_test.cc	/^  Cache::Handle* InsertAndReturnHandle(int key, int value, int charge = 1) {$/;"	f	class:leveldb::CacheTest
InsertInto	db/write_batch.cc	/^Status WriteBatchInternal::InsertInto(const WriteBatch* b, MemTable* memtable) {$/;"	f	class:leveldb::WriteBatchInternal
InstallCompactionResults	db/db_impl.cc	/^Status DBImpl::InstallCompactionResults(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
InternalFilterPolicy	db/dbformat.h	/^  explicit InternalFilterPolicy(const FilterPolicy* p) : user_policy_(p) {}$/;"	f	class:leveldb::InternalFilterPolicy
InternalFilterPolicy	db/dbformat.h	/^class InternalFilterPolicy : public FilterPolicy {$/;"	c	namespace:leveldb
InternalGet	table/table.cc	/^Status Table::InternalGet(const ReadOptions& options, const Slice& k, void* arg,$/;"	f	class:leveldb::Table
InternalKey	db/dbformat.h	/^  InternalKey() {}  \/\/ Leave rep_ as empty to indicate it is invalid$/;"	f	class:leveldb::InternalKey
InternalKey	db/dbformat.h	/^  InternalKey(const Slice& user_key, SequenceNumber s, ValueType t) {$/;"	f	class:leveldb::InternalKey
InternalKey	db/dbformat.h	/^class InternalKey {$/;"	c	namespace:leveldb
InternalKeyComparator	db/dbformat.h	/^  explicit InternalKeyComparator(const Comparator* c) : user_comparator_(c) {}$/;"	f	class:leveldb::InternalKeyComparator
InternalKeyComparator	db/dbformat.h	/^class InternalKeyComparator : public Comparator {$/;"	c	namespace:leveldb
InternalKeyEncodingLength	db/dbformat.h	/^inline size_t InternalKeyEncodingLength(const ParsedInternalKey& key) {$/;"	f	namespace:leveldb
InvalidArgument	include/leveldb/status.h	/^  static Status InvalidArgument(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
Is	util/testharness.h	/^  Tester& Is(bool b, const char* msg) {$/;"	f	class:leveldb::test::Tester
IsBaseLevelForKey	db/version_set.cc	/^bool Compaction::IsBaseLevelForKey(const Slice& user_key) {$/;"	f	class:leveldb::Compaction
IsCorruption	include/leveldb/status.h	/^  bool IsCorruption() const { return code() == kCorruption; }$/;"	f	class:leveldb::Status
IsEmpty	include/leveldb/iterator.h	/^    bool IsEmpty() const { return function == nullptr; }$/;"	f	struct:leveldb::Iterator::CleanupNode
IsFileCreatedSinceLastDirSync	db/fault_injection_test.cc	/^bool FaultInjectionTestEnv::IsFileCreatedSinceLastDirSync($/;"	f	class:leveldb::FaultInjectionTestEnv
IsFullySynced	db/fault_injection_test.cc	/^  bool IsFullySynced() const { return pos_ <= 0 || pos_ == pos_at_last_sync_; }$/;"	f	struct:leveldb::__anon40::FileState
IsIOError	include/leveldb/status.h	/^  bool IsIOError() const { return code() == kIOError; }$/;"	f	class:leveldb::Status
IsInvalidArgument	include/leveldb/status.h	/^  bool IsInvalidArgument() const { return code() == kInvalidArgument; }$/;"	f	class:leveldb::Status
IsManifest	util/env_posix.cc	/^  static bool IsManifest(const std::string& filename) {$/;"	f	class:leveldb::__anon19::final	file:
IsManifest	util/env_zone.cc	/^		static bool IsManifest(const std::string& filename)$/;"	f	class:leveldb::__anon21::final	file:
IsManifest	util/zns/env_zone_cp.cc	/^		static bool IsManifest(const std::string& filename)$/;"	f	class:leveldb::__anon8::ZoneFile	file:
IsManifest	util/zns/env_zone_temp.cc	/^		static bool IsManifest(const std::string& filename) {$/;"	f	class:leveldb::__anon7::ZoneFile	file:
IsNotFound	include/leveldb/status.h	/^  bool IsNotFound() const { return code() == kNotFound; }$/;"	f	class:leveldb::Status
IsNotSupportedError	include/leveldb/status.h	/^  bool IsNotSupportedError() const { return code() == kNotSupported; }$/;"	f	class:leveldb::Status
IsOk	util/testharness.h	/^  Tester& IsOk(const Status& s) {$/;"	f	class:leveldb::test::Tester
IsTrivialMove	db/version_set.cc	/^bool Compaction::IsTrivialMove() const {$/;"	f	class:leveldb::Compaction
IsValidKey	db/skiplist_test.cc	/^  static bool IsValidKey(Key k) {$/;"	f	class:leveldb::ConcurrentTest	file:
Issue178	issues/issue178_test.cc	/^class Issue178 {};$/;"	c	namespace:__anon22	file:
Issue200	issues/issue200_test.cc	/^class Issue200 {};$/;"	c	namespace:leveldb	file:
Issue320	issues/issue320_test.cc	/^class Issue320 {};$/;"	c	namespace:leveldb	file:
Iter	table/block.cc	/^  Iter(const Comparator* comparator, const char* data, uint32_t restarts,$/;"	f	class:leveldb::Block::Iter
Iter	table/block.cc	/^class Block::Iter : public Iterator {$/;"	c	class:leveldb::Block	file:
IterState	db/db_impl.cc	/^  IterState(port::Mutex* mutex, MemTable* mem, MemTable* imm, Version* version)$/;"	f	struct:leveldb::__anon31::IterState
IterState	db/db_impl.cc	/^struct IterState {$/;"	s	namespace:leveldb::__anon31	file:
IterStatus	db/db_test.cc	/^  std::string IterStatus(Iterator* iter) {$/;"	f	class:leveldb::DBTest
Iterate	db/write_batch.cc	/^Status WriteBatch::Iterate(Handler* handler) const {$/;"	f	class:leveldb::WriteBatch
Iterator	db/skiplist.h	/^  class Iterator {$/;"	c	class:leveldb::SkipList
Iterator	db/skiplist.h	/^inline SkipList<Key, Comparator>::Iterator::Iterator(const SkipList* list) {$/;"	f	class:leveldb::SkipList::Iterator
Iterator	include/leveldb/iterator.h	/^class LEVELDB_EXPORT Iterator {$/;"	c	namespace:leveldb
Iterator	table/iterator.cc	/^Iterator::Iterator() {$/;"	f	class:leveldb::Iterator
IteratorWrapper	table/iterator_wrapper.h	/^  IteratorWrapper() : iter_(nullptr), valid_(false) {}$/;"	f	class:leveldb::IteratorWrapper
IteratorWrapper	table/iterator_wrapper.h	/^  explicit IteratorWrapper(Iterator* iter) : iter_(nullptr) { Set(iter); }$/;"	f	class:leveldb::IteratorWrapper
IteratorWrapper	table/iterator_wrapper.h	/^class IteratorWrapper {$/;"	c	namespace:leveldb
K	db/skiplist_test.cc	/^  static const uint32_t K = 4;$/;"	m	class:leveldb::ConcurrentTest	file:
K	db/skiplist_test.cc	/^const uint32_t ConcurrentTest::K;$/;"	m	class:leveldb::ConcurrentTest	file:
KEY	build/CMakeFiles/CheckTypeSize/CMAKE_SIZEOF_UNSIGNED_SHORT.c	10;"	d	file:
KEY	build/CMakeFiles/CheckTypeSize/CMAKE_SIZEOF_UNSIGNED_SHORT.c	12;"	d	file:
KEY	build/CMakeFiles/CheckTypeSize/CMAKE_SIZEOF_UNSIGNED_SHORT.c	14;"	d	file:
KEY	build/CMakeFiles/CheckTypeSize/CMAKE_SIZEOF_UNSIGNED_SHORT.c	16;"	d	file:
KEY	build/CMakeFiles/CheckTypeSize/CMAKE_SIZEOF_UNSIGNED_SHORT.c	18;"	d	file:
KEY	build/CMakeFiles/CheckTypeSize/CMAKE_SIZEOF_UNSIGNED_SHORT.c	20;"	d	file:
KEY	build/CMakeFiles/CheckTypeSize/CMAKE_SIZEOF_UNSIGNED_SHORT.c	6;"	d	file:
KEY	build/CMakeFiles/CheckTypeSize/CMAKE_SIZEOF_UNSIGNED_SHORT.c	8;"	d	file:
KVMap	db/db_test.cc	/^typedef std::map<std::string, std::string> KVMap;$/;"	t	namespace:leveldb::__anon43	file:
KVMap	table/table_test.cc	/^typedef std::map<std::string, std::string, STLLessThan> KVMap;$/;"	t	namespace:leveldb	file:
Key	db/autocompact_test.cc	/^  std::string Key(int i) {$/;"	f	class:leveldb::AutoCompactTest
Key	db/corruption_test.cc	/^  Slice Key(int i, std::string* storage) {$/;"	f	class:leveldb::CorruptionTest
Key	db/db_test.cc	/^static std::string Key(int i) {$/;"	f	namespace:leveldb
Key	db/fault_injection_test.cc	/^  Slice Key(int i, std::string* storage) const {$/;"	f	class:leveldb::FaultInjectionTest
Key	db/skiplist_test.cc	/^typedef uint64_t Key;$/;"	t	namespace:leveldb	file:
Key	util/bloom_test.cc	/^static Slice Key(int i, char* buffer) {$/;"	f	namespace:leveldb
Key1	issues/issue178_test.cc	/^std::string Key1(int i) {$/;"	f	namespace:__anon22
Key2	issues/issue178_test.cc	/^std::string Key2(int i) { return Key1(i) + "_xxx"; }$/;"	f	namespace:__anon22
KeyComparator	db/memtable.h	/^    explicit KeyComparator(const InternalKeyComparator& c) : comparator(c) {}$/;"	f	struct:leveldb::MemTable::KeyComparator
KeyComparator	db/memtable.h	/^  struct KeyComparator {$/;"	s	class:leveldb::MemTable
KeyConvertingIterator	table/table_test.cc	/^  explicit KeyConvertingIterator(Iterator* iter) : iter_(iter) {}$/;"	f	class:leveldb::KeyConvertingIterator
KeyConvertingIterator	table/table_test.cc	/^class KeyConvertingIterator : public Iterator {$/;"	c	namespace:leveldb	file:
KeyIsAfterNode	db/skiplist.h	/^bool SkipList<Key, Comparator>::KeyIsAfterNode(const Key& key, Node* n) const {$/;"	f	class:leveldb::SkipList
KeyMayMatch	db/dbformat.cc	/^bool InternalFilterPolicy::KeyMayMatch(const Slice& key, const Slice& f) const {$/;"	f	class:leveldb::InternalFilterPolicy
KeyMayMatch	table/filter_block.cc	/^bool FilterBlockReader::KeyMayMatch(uint64_t block_offset, const Slice& key) {$/;"	f	class:leveldb::FilterBlockReader
LEVELDB_DELETEFILE_UNDEFINED	include/leveldb/env.h	42;"	d
LEVELDB_EXPORT	include/leveldb/export.h	14;"	d
LEVELDB_EXPORT	include/leveldb/export.h	16;"	d
LEVELDB_EXPORT	include/leveldb/export.h	21;"	d
LEVELDB_EXPORT	include/leveldb/export.h	23;"	d
LEVELDB_EXPORT	include/leveldb/export.h	28;"	d
LEVELDB_IS_BIG_ENDIAN	build/include/port/port_config.h	36;"	d
LOCKABLE	port/thread_annotations.h	61;"	d
LOCKS_EXCLUDED	db/db_test.cc	/^  int Read() LOCKS_EXCLUDED(mu_) {$/;"	f	class:leveldb::__anon41::AtomicCounter
LOCKS_EXCLUDED	db/db_test.cc	/^  void IncrementBy(int count) LOCKS_EXCLUDED(mu_) {$/;"	f	class:leveldb::__anon41::AtomicCounter
LOCKS_EXCLUDED	db/db_test.cc	/^  void Reset() LOCKS_EXCLUDED(mu_) {$/;"	f	class:leveldb::__anon41::AtomicCounter
LOCKS_EXCLUDED	db/fault_injection_test.cc	/^  bool IsFilesystemActive() LOCKS_EXCLUDED(mutex_) {$/;"	f	class:leveldb::FaultInjectionTestEnv
LOCKS_EXCLUDED	db/fault_injection_test.cc	/^  void SetFilesystemActive(bool active) LOCKS_EXCLUDED(mutex_) {$/;"	f	class:leveldb::FaultInjectionTestEnv
LOCKS_EXCLUDED	db/skiplist_test.cc	/^  void Change(ReaderState s) LOCKS_EXCLUDED(mu_) {$/;"	f	class:leveldb::TestState
LOCKS_EXCLUDED	db/skiplist_test.cc	/^  void Wait(ReaderState s) LOCKS_EXCLUDED(mu_) {$/;"	f	class:leveldb::TestState
LOCKS_EXCLUDED	port/thread_annotations.h	52;"	d
LOCKS_EXCLUDED	util/env_posix.cc	/^  bool Insert(const std::string& fname) LOCKS_EXCLUDED(mu_) {$/;"	f	class:leveldb::__anon19::PosixLockTable
LOCKS_EXCLUDED	util/env_posix.cc	/^  void Remove(const std::string& fname) LOCKS_EXCLUDED(mu_) {$/;"	f	class:leveldb::__anon19::PosixLockTable
LOCKS_EXCLUDED	util/env_zone.cc	/^		bool Insert(const std::string& fname) LOCKS_EXCLUDED(mu_) {$/;"	f	class:leveldb::__anon21::ZoneLockTable
LOCKS_EXCLUDED	util/env_zone.cc	/^		void Remove(const std::string& fname) LOCKS_EXCLUDED(mu_) {$/;"	f	class:leveldb::__anon21::ZoneLockTable
LOCKS_EXCLUDED	util/zns/env_zone_temp.cc	/^		bool Insert(const std::string& fname) LOCKS_EXCLUDED(mu_) {$/;"	f	class:leveldb::__anon7::ZoneLockTable
LOCKS_EXCLUDED	util/zns/env_zone_temp.cc	/^		void Remove(const std::string& fname) LOCKS_EXCLUDED(mu_) {$/;"	f	class:leveldb::__anon7::ZoneLockTable
LOCK_RETURNED	port/thread_annotations.h	57;"	d
LOG_SIZE	zns_ctl/controller.h	27;"	d
LRUCache	util/cache.cc	/^LRUCache::LRUCache() : capacity_(0), usage_(0) {$/;"	f	class:leveldb::__anon16::LRUCache
LRUCache	util/cache.cc	/^class LRUCache {$/;"	c	namespace:leveldb::__anon16	file:
LRUHandle	util/cache.cc	/^struct LRUHandle {$/;"	s	namespace:leveldb::__anon16	file:
LRU_Append	util/cache.cc	/^void LRUCache::LRU_Append(LRUHandle* list, LRUHandle* e) {$/;"	f	class:leveldb::__anon16::LRUCache
LRU_Remove	util/cache.cc	/^void LRUCache::LRU_Remove(LRUHandle* e) {$/;"	f	class:leveldb::__anon16::LRUCache
LastRecordOffset	db/log_reader.cc	/^uint64_t Reader::LastRecordOffset() { return last_record_offset_; }$/;"	f	class:leveldb::log::Reader
LastSequence	db/version_set.h	/^  uint64_t LastSequence() const { return last_sequence_; }$/;"	f	class:leveldb::VersionSet
LevelFileNumIterator	db/version_set.cc	/^  LevelFileNumIterator(const InternalKeyComparator& icmp,$/;"	f	class:leveldb::Version::LevelFileNumIterator
LevelFileNumIterator	db/version_set.cc	/^class Version::LevelFileNumIterator : public Iterator {$/;"	c	class:leveldb::Version	file:
LevelState	db/version_set.cc	/^  struct LevelState {$/;"	s	class:leveldb::VersionSet::Builder	file:
LevelSummary	db/version_set.cc	/^const char* VersionSet::LevelSummary(LevelSummaryStorage* scratch) const {$/;"	f	class:leveldb::VersionSet
LevelSummaryStorage	db/version_set.h	/^  struct LevelSummaryStorage {$/;"	s	class:leveldb::VersionSet
Limiter	util/env_posix.cc	/^  Limiter(int max_acquires) : acquires_allowed_(max_acquires) {}$/;"	f	class:leveldb::__anon19::Limiter
Limiter	util/env_posix.cc	/^class Limiter {$/;"	c	namespace:leveldb::__anon19	file:
Limiter	util/env_windows.cc	/^  Limiter(int max_acquires) : acquires_allowed_(max_acquires) {}$/;"	f	class:leveldb::__anon11::Limiter
Limiter	util/env_windows.cc	/^class Limiter {$/;"	c	namespace:leveldb::__anon11	file:
LockFile	util/zns/env_zone_temp.cc	/^		virtual Status LockFile(const std::string& fname, FileLock** lock)$/;"	f	class:leveldb::__anon7::ZoneEnv
LockFileName	db/filename.cc	/^std::string LockFileName(const std::string& dbname) { return dbname + "\/LOCK"; }$/;"	f	namespace:leveldb
LockOrUnlock	util/env_posix.cc	/^int LockOrUnlock(int fd, bool lock) {$/;"	f	namespace:leveldb::__anon19
LockOrUnlock	util/env_windows.cc	/^bool LockOrUnlock(HANDLE handle, bool lock) {$/;"	f	namespace:leveldb::__anon11
Log	util/env.cc	/^void Log(Logger* info_log, const char* format, ...) {$/;"	f	namespace:leveldb
LogAndApply	db/version_set.cc	/^Status VersionSet::LogAndApply(VersionEdit* edit, port::Mutex* mu) {$/;"	f	class:leveldb::VersionSet
LogFileName	db/filename.cc	/^std::string LogFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
LogName	db/recovery_test.cc	/^  std::string LogName(uint64_t number) { return LogFileName(dbname_, number); }$/;"	f	class:leveldb::RecoveryTest
LogNumber	db/version_set.h	/^  uint64_t LogNumber() const { return log_number_; }$/;"	f	class:leveldb::VersionSet
LogTest	db/log_test.cc	/^  LogTest()$/;"	f	class:leveldb::log::LogTest
LogTest	db/log_test.cc	/^class LogTest {$/;"	c	namespace:leveldb::log	file:
Logger	include/leveldb/env.h	/^class LEVELDB_EXPORT Logger {$/;"	c	namespace:leveldb
Logging	util/logging_test.cc	/^class Logging {};$/;"	c	namespace:leveldb	file:
Logv	util/zns/env_zone_temp.cc	/^		virtual void Logv(const char* format, va_list ap) { }$/;"	f	class:leveldb::__anon7::NoOpLogger
Lookup	util/cache.cc	/^  LRUHandle* Lookup(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon16::HandleTable
Lookup	util/cache.cc	/^Cache::Handle* LRUCache::Lookup(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon16::LRUCache
Lookup	util/cache_test.cc	/^  int Lookup(int key) {$/;"	f	class:leveldb::CacheTest
LookupKey	db/dbformat.cc	/^LookupKey::LookupKey(const Slice& user_key, SequenceNumber s) {$/;"	f	class:leveldb::LookupKey
LookupKey	db/dbformat.h	/^class LookupKey {$/;"	c	namespace:leveldb
MEMTABLE_TEST	table/table_test.cc	/^enum TestType { TABLE_TEST, BLOCK_TEST, MEMTABLE_TEST, DB_TEST };$/;"	e	enum:leveldb::TestType	file:
MTState	db/db_test.cc	/^struct MTState {$/;"	s	namespace:leveldb::__anon42	file:
MTThread	db/db_test.cc	/^struct MTThread {$/;"	s	namespace:leveldb::__anon42	file:
MTThreadBody	db/db_test.cc	/^static void MTThreadBody(void* arg) {$/;"	f	namespace:leveldb::__anon42
MakeFileName	db/filename.cc	/^static std::string MakeFileName(const std::string& dbname, uint64_t number,$/;"	f	namespace:leveldb
MakeInputIterator	db/version_set.cc	/^Iterator* VersionSet::MakeInputIterator(Compaction* c) {$/;"	f	class:leveldb::VersionSet
MakeKey	db/db_test.cc	/^std::string MakeKey(unsigned int num) {$/;"	f	namespace:leveldb
MakeKey	db/skiplist_test.cc	/^  static Key MakeKey(uint64_t k, uint64_t g) {$/;"	f	class:leveldb::ConcurrentTest	file:
MakeLogFile	db/recovery_test.cc	/^  void MakeLogFile(uint64_t lognum, SequenceNumber seq, Slice key, Slice val) {$/;"	f	class:leveldb::RecoveryTest
MakeRoomForWrite	db/db_impl.cc	/^Status DBImpl::MakeRoomForWrite(bool force) {$/;"	f	class:leveldb::DBImpl
MakeTables	db/db_test.cc	/^  void MakeTables(int n, const std::string& small_key,$/;"	f	class:leveldb::DBTest
ManifestFileName	db/recovery_test.cc	/^  std::string ManifestFileName() {$/;"	f	class:leveldb::RecoveryTest
ManifestFileNumber	db/version_set.h	/^  uint64_t ManifestFileNumber() const { return manifest_file_number_; }$/;"	f	class:leveldb::VersionSet
ManualCompaction	db/db_impl.h	/^  struct ManualCompaction {$/;"	s	class:leveldb::DBImpl
MarkFileNumberUsed	db/version_set.cc	/^void VersionSet::MarkFileNumberUsed(uint64_t number) {$/;"	f	class:leveldb::VersionSet
Mask	util/crc32c.h	/^inline uint32_t Mask(uint32_t crc) {$/;"	f	namespace:leveldb::crc32c
MatchError	db/log_test.cc	/^  std::string MatchError(const std::string& msg) const {$/;"	f	class:leveldb::log::LogTest
Matches	util/bloom_test.cc	/^  bool Matches(const Slice& s) {$/;"	f	class:leveldb::BloomTest
MaxBytesForLevel	db/version_set.cc	/^static double MaxBytesForLevel(const Options* options, int level) {$/;"	f	namespace:leveldb
MaxFileSizeForLevel	db/version_set.cc	/^static uint64_t MaxFileSizeForLevel(const Options* options, int level) {$/;"	f	namespace:leveldb
MaxGrandParentOverlapBytes	db/version_set.cc	/^static int64_t MaxGrandParentOverlapBytes(const Options* options) {$/;"	f	namespace:leveldb
MaxMmaps	util/env_posix.cc	/^int MaxMmaps() { return g_mmap_limit; }$/;"	f	namespace:leveldb::__anon19
MaxMmaps	util/env_windows.cc	/^int MaxMmaps() { return g_mmap_limit; }$/;"	f	namespace:leveldb::__anon11
MaxNextLevelOverlappingBytes	db/version_set.cc	/^int64_t VersionSet::MaxNextLevelOverlappingBytes() {$/;"	f	class:leveldb::VersionSet
MaxOpenFiles	util/env_posix.cc	/^int MaxOpenFiles() {$/;"	f	namespace:leveldb::__anon19
MaxOutputFileSize	db/version_set.h	/^  uint64_t MaxOutputFileSize() const { return max_output_file_size_; }$/;"	f	class:leveldb::Compaction
MaybeAddFile	db/version_set.cc	/^  void MaybeAddFile(Version* v, int level, FileMetaData* f) {$/;"	f	class:leveldb::VersionSet::Builder
MaybeIgnoreError	db/db_impl.cc	/^void DBImpl::MaybeIgnoreError(Status* s) const {$/;"	f	class:leveldb::DBImpl
MaybeScheduleCompaction	db/db_impl.cc	/^void DBImpl::MaybeScheduleCompaction() {$/;"	f	class:leveldb::DBImpl
Median	util/histogram.cc	/^double Histogram::Median() const { return Percentile(50.0); }$/;"	f	class:leveldb::Histogram
MemEnvTest	helpers/memenv/memenv_test.cc	/^  MemEnvTest() : env_(NewMemEnv(Env::Default())) {}$/;"	f	class:leveldb::MemEnvTest
MemEnvTest	helpers/memenv/memenv_test.cc	/^class MemEnvTest {$/;"	c	namespace:leveldb	file:
MemTable	db/memtable.cc	/^MemTable::MemTable(const InternalKeyComparator& comparator)$/;"	f	class:leveldb::MemTable
MemTable	db/memtable.h	/^class MemTable {$/;"	c	namespace:leveldb
MemTableConstructor	table/table_test.cc	/^  explicit MemTableConstructor(const Comparator* cmp)$/;"	f	class:leveldb::MemTableConstructor
MemTableConstructor	table/table_test.cc	/^class MemTableConstructor : public Constructor {$/;"	c	namespace:leveldb	file:
MemTableInserter	db/write_batch.cc	/^class MemTableInserter : public WriteBatch::Handler {$/;"	c	namespace:leveldb::__anon36	file:
MemTableIterator	db/memtable.cc	/^  explicit MemTableIterator(MemTable::Table* table) : iter_(table) {}$/;"	f	class:leveldb::MemTableIterator
MemTableIterator	db/memtable.cc	/^class MemTableIterator : public Iterator {$/;"	c	namespace:leveldb	file:
MemTableTest	table/table_test.cc	/^class MemTableTest {};$/;"	c	namespace:leveldb	file:
MemoryUsage	util/arena.h	/^  size_t MemoryUsage() const {$/;"	f	class:leveldb::Arena
Merge	benchmarks/db_bench.cc	/^  void Merge(const Stats& other) {$/;"	f	class:leveldb::__anon4::Stats
Merge	util/histogram.cc	/^void Histogram::Merge(const Histogram& other) {$/;"	f	class:leveldb::Histogram
MergingIterator	table/merger.cc	/^  MergingIterator(const Comparator* comparator, Iterator** children, int n)$/;"	f	class:leveldb::__anon27::MergingIterator
MergingIterator	table/merger.cc	/^class MergingIterator : public Iterator {$/;"	c	namespace:leveldb::__anon27	file:
ModelDB	db/db_test.cc	/^  explicit ModelDB(const Options& options) : options_(options) {}$/;"	f	class:leveldb::ModelDB
ModelDB	db/db_test.cc	/^class ModelDB : public DB {$/;"	c	namespace:leveldb	file:
ModelIter	db/db_test.cc	/^    ModelIter(const KVMap* map, bool owned)$/;"	f	class:leveldb::ModelDB::ModelIter
ModelIter	db/db_test.cc	/^  class ModelIter : public Iterator {$/;"	c	class:leveldb::ModelDB	file:
ModelSnapshot	db/db_test.cc	/^  class ModelSnapshot : public Snapshot {$/;"	c	class:leveldb::ModelDB	file:
Mutex	port/port_example.h	/^class LOCKABLE Mutex {$/;"	c	namespace:leveldb::port
Mutex	port/port_stdcxx.h	/^class LOCKABLE Mutex {$/;"	c	namespace:leveldb::port
MutexLock	util/mutexlock.h	/^class SCOPED_LOCKABLE MutexLock {$/;"	c	namespace:leveldb
NOMINMAX	util/env_windows.cc	8;"	d	file:
NO_THREAD_SAFETY_ANALYSIS	port/thread_annotations.h	94;"	d
NVME_IOCTL_ADMIN_CMD	zns_ctl/controller.h	403;"	d
NVME_IOCTL_ID	zns_ctl/controller.h	402;"	d
NVME_IOCTL_IO_CMD	zns_ctl/controller.h	405;"	d
NVME_IOCTL_RESCAN	zns_ctl/controller.h	408;"	d
NVME_IOCTL_RESET	zns_ctl/controller.h	406;"	d
NVME_IOCTL_SUBMIT_IO	zns_ctl/controller.h	404;"	d
NVME_IOCTL_SUBSYS_RESET	zns_ctl/controller.h	407;"	d
Name	db/dbformat.cc	/^const char* InternalFilterPolicy::Name() const { return user_policy_->Name(); }$/;"	f	class:leveldb::InternalFilterPolicy
Name	db/dbformat.cc	/^const char* InternalKeyComparator::Name() const {$/;"	f	class:leveldb::InternalKeyComparator
NeedsCompaction	db/version_set.h	/^  bool NeedsCompaction() const {$/;"	f	class:leveldb::VersionSet
New	db/snapshot.h	/^  SnapshotImpl* New(SequenceNumber sequence_number) {$/;"	f	class:leveldb::SnapshotList
NewAppendableFile	db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::NewAppendableFile(const std::string& fname,$/;"	f	class:leveldb::FaultInjectionTestEnv
NewAppendableFile	util/env.cc	/^Status Env::NewAppendableFile(const std::string& fname, WritableFile** result) {$/;"	f	class:leveldb::Env
NewAppendableFile	util/zns/env_zone_temp.cc	/^		virtual Status NewAppendableFile(const std::string& fname, WritableFile** result)$/;"	f	class:leveldb::__anon7::ZoneEnv
NewBloomFilterPolicy	util/bloom.cc	/^const FilterPolicy* NewBloomFilterPolicy(int bits_per_key) {$/;"	f	namespace:leveldb
NewConcatenatingIterator	db/version_set.cc	/^Iterator* Version::NewConcatenatingIterator(const ReadOptions& options,$/;"	f	class:leveldb::Version
NewDB	db/db_impl.cc	/^Status DBImpl::NewDB() {$/;"	f	class:leveldb::DBImpl
NewDB	table/table_test.cc	/^  void NewDB() {$/;"	f	class:leveldb::DBConstructor	file:
NewDBIterator	db/db_iter.cc	/^Iterator* NewDBIterator(DBImpl* db, const Comparator* user_key_comparator,$/;"	f	namespace:leveldb
NewEmptyIterator	table/iterator.cc	/^Iterator* NewEmptyIterator() { return new EmptyIterator(Status::OK()); }$/;"	f	namespace:leveldb
NewErrorIterator	table/iterator.cc	/^Iterator* NewErrorIterator(const Status& status) {$/;"	f	namespace:leveldb
NewFileNumber	db/version_set.h	/^  uint64_t NewFileNumber() { return next_file_number_++; }$/;"	f	class:leveldb::VersionSet
NewInternalIterator	db/db_impl.cc	/^Iterator* DBImpl::NewInternalIterator(const ReadOptions& options,$/;"	f	class:leveldb::DBImpl
NewIterator	db/db_impl.cc	/^Iterator* DBImpl::NewIterator(const ReadOptions& options) {$/;"	f	class:leveldb::DBImpl
NewIterator	db/memtable.cc	/^Iterator* MemTable::NewIterator() { return new MemTableIterator(&table_); }$/;"	f	class:leveldb::MemTable
NewIterator	db/table_cache.cc	/^Iterator* TableCache::NewIterator(const ReadOptions& options,$/;"	f	class:leveldb::TableCache
NewIterator	table/block.cc	/^Iterator* Block::NewIterator(const Comparator* comparator) {$/;"	f	class:leveldb::Block
NewIterator	table/table.cc	/^Iterator* Table::NewIterator(const ReadOptions& options) const {$/;"	f	class:leveldb::Table
NewLRUCache	util/cache.cc	/^Cache* NewLRUCache(size_t capacity) { return new ShardedLRUCache(capacity); }$/;"	f	namespace:leveldb
NewLogger	util/zns/env_zone_temp.cc	/^		virtual Status NewLogger(const std::string& fname, Logger** result)$/;"	f	class:leveldb::__anon7::ZoneEnv
NewMemEnv	helpers/memenv/memenv.cc	/^Env* NewMemEnv(Env* base_env) { return new InMemoryEnv(base_env); }$/;"	f	namespace:leveldb
NewMergingIterator	table/merger.cc	/^Iterator* NewMergingIterator(const Comparator* comparator, Iterator** children,$/;"	f	namespace:leveldb
NewNode	db/skiplist.h	/^typename SkipList<Key, Comparator>::Node* SkipList<Key, Comparator>::NewNode($/;"	f	class:leveldb::SkipList
NewRandomAccessFile	db/db_test.cc	/^  Status NewRandomAccessFile(const std::string& f, RandomAccessFile** r) {$/;"	f	class:leveldb::SpecialEnv
NewRandomAccessFile	util/zns/env_zone_temp.cc	/^		virtual Status NewRandomAccessFile(const std::string& fname, RandomAccessFile** result)$/;"	f	class:leveldb::__anon7::ZoneEnv
NewSequentialFile	util/zns/env_zone_temp.cc	/^		virtual Status NewSequentialFile(const std::string& fname, SequentialFile** result)$/;"	f	class:leveldb::__anon7::ZoneEnv
NewTableIterator	db/repair.cc	/^  Iterator* NewTableIterator(const FileMetaData& meta) {$/;"	f	class:leveldb::__anon37::Repairer	file:
NewTwoLevelIterator	table/two_level_iterator.cc	/^Iterator* NewTwoLevelIterator(Iterator* index_iter,$/;"	f	namespace:leveldb
NewWritableFile	db/db_test.cc	/^  Status NewWritableFile(const std::string& f, WritableFile** r) {$/;"	f	class:leveldb::SpecialEnv
NewWritableFile	db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::FaultInjectionTestEnv
NewWritableFile	util/zns/env_zone_temp.cc	/^		virtual Status NewWritableFile(const std::string& fname, WritableFile** result)$/;"	f	class:leveldb::__anon7::ZoneEnv
NewestFirst	db/version_set.cc	/^static bool NewestFirst(FileMetaData* a, FileMetaData* b) {$/;"	f	namespace:leveldb
Next	db/db_iter.cc	/^void DBIter::Next() {$/;"	f	class:leveldb::__anon38::DBIter
Next	db/skiplist.h	/^  Node* Next(int n) {$/;"	f	struct:leveldb::SkipList::Node
Next	db/skiplist.h	/^inline void SkipList<Key, Comparator>::Iterator::Next() {$/;"	f	class:leveldb::SkipList::Iterator
Next	table/iterator_wrapper.h	/^  void Next() {$/;"	f	class:leveldb::IteratorWrapper
Next	table/two_level_iterator.cc	/^void TwoLevelIterator::Next() {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
Next	util/random.h	/^  uint32_t Next() {$/;"	f	class:leveldb::Random
NextEntryOffset	table/block.cc	/^  inline uint32_t NextEntryOffset() const {$/;"	f	class:leveldb::Block::Iter	file:
NextLength	util/bloom_test.cc	/^static int NextLength(int length) {$/;"	f	namespace:leveldb
NoBarrier_Next	db/skiplist.h	/^  Node* NoBarrier_Next(int n) {$/;"	f	struct:leveldb::SkipList::Node
NoBarrier_SetNext	db/skiplist.h	/^  void NoBarrier_SetNext(int n, Node* x) {$/;"	f	struct:leveldb::SkipList::Node
NoDestructor	util/no_destructor.h	/^  explicit NoDestructor(ConstructorArgTypes&&... constructor_args) {$/;"	f	class:leveldb::NoDestructor
NoDestructor	util/no_destructor.h	/^class NoDestructor {$/;"	c	namespace:leveldb
NoDestructorTest	util/no_destructor_test.cc	/^class NoDestructorTest {};$/;"	c	namespace:leveldb	file:
NoOpLogger	helpers/memenv/memenv.cc	/^class NoOpLogger : public Logger {$/;"	c	namespace:leveldb::__anon5	file:
NoOpLogger	util/zns/env_zone_temp.cc	/^class NoOpLogger : public Logger$/;"	c	namespace:leveldb::__anon7	file:
NoWriteTestPreFault	db/fault_injection_test.cc	/^  void NoWriteTestPreFault() {}$/;"	f	class:leveldb::FaultInjectionTest
NoWriteTestReopenWithFault	db/fault_injection_test.cc	/^  void NoWriteTestReopenWithFault(ResetMethod reset_method) {$/;"	f	class:leveldb::FaultInjectionTest
Node	db/skiplist.h	/^  explicit Node(const Key& k) : key(k) {}$/;"	f	struct:leveldb::SkipList::Node
Node	db/skiplist.h	/^struct SkipList<Key, Comparator>::Node {$/;"	s	class:leveldb::SkipList
NotFound	include/leveldb/status.h	/^  static Status NotFound(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
NotSupported	include/leveldb/status.h	/^  static Status NotSupported(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
NowMicros	util/zns/env_zone_temp.cc	/^		virtual uint64_t NowMicros()$/;"	f	class:leveldb::__anon7::ZoneEnv
NumEntries	table/table_builder.cc	/^uint64_t TableBuilder::NumEntries() const { return rep_->num_entries; }$/;"	f	class:leveldb::TableBuilder
NumFiles	db/version_set.h	/^  int NumFiles(int level) const { return files_[level].size(); }$/;"	f	class:leveldb::Version
NumLevelBytes	db/version_set.cc	/^int64_t VersionSet::NumLevelBytes(int level) const {$/;"	f	class:leveldb::VersionSet
NumLevelFiles	db/version_set.cc	/^int VersionSet::NumLevelFiles(int level) const {$/;"	f	class:leveldb::VersionSet
NumLogs	db/recovery_test.cc	/^  int NumLogs() { return GetFiles(kLogFile).size(); }$/;"	f	class:leveldb::RecoveryTest
NumRestarts	table/block.cc	/^inline uint32_t Block::NumRestarts() const {$/;"	f	class:leveldb::Block
NumTableFilesAtLevel	db/db_test.cc	/^  int NumTableFilesAtLevel(int level) {$/;"	f	class:leveldb::DBTest
NumTables	db/recovery_test.cc	/^  int NumTables() { return GetFiles(kTableFile).size(); }$/;"	f	class:leveldb::RecoveryTest
NumberString	db/log_test.cc	/^static std::string NumberString(int n) {$/;"	f	namespace:leveldb::log
NumberToString	util/logging.cc	/^std::string NumberToString(uint64_t num) {$/;"	f	namespace:leveldb
OBJS	zns_ctl/Makefile	/^OBJS=main.o controller.o$/;"	m
OK	include/leveldb/status.h	/^  static Status OK() { return Status(); }$/;"	f	class:leveldb::Status
OldInfoLogFileName	db/filename.cc	/^std::string OldInfoLogFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
OneIn	util/random.h	/^  bool OneIn(int n) { return (Next() % n) == 0; }$/;"	f	class:leveldb::Random
Open	benchmarks/db_bench.cc	/^  void Open() {$/;"	f	class:leveldb::Benchmark	file:
Open	benchmarks/db_bench_sqlite3.cc	/^  void Open() {$/;"	f	class:leveldb::Benchmark
Open	benchmarks/db_bench_tree_db.cc	/^  void Open(bool sync) {$/;"	f	class:leveldb::Benchmark	file:
Open	db/db_impl.cc	/^Status DB::Open(const Options& options, const std::string& dbname, DB** dbptr) {$/;"	f	class:leveldb::DB
Open	db/recovery_test.cc	/^  void Open(Options* options = nullptr) {$/;"	f	class:leveldb::RecoveryTest
Open	table/table.cc	/^Status Table::Open(const Options& options, RandomAccessFile* file,$/;"	f	class:leveldb::Table
OpenBench	benchmarks/db_bench.cc	/^  void OpenBench(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
OpenCompactionOutputFile	db/db_impl.cc	/^Status DBImpl::OpenCompactionOutputFile(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
OpenDB	db/fault_injection_test.cc	/^  Status OpenDB() {$/;"	f	class:leveldb::FaultInjectionTest
OpenWithStatus	db/recovery_test.cc	/^  Status OpenWithStatus(Options* options = nullptr) {$/;"	f	class:leveldb::RecoveryTest
Open_zone	util/env_zone.cc	/^		bool Open_zone(unsigned int zone_number)$/;"	f	class:leveldb::__anon21::Zone_Coordinator	file:
Open_zone	util/zns/env_zone_cp.cc	/^		bool Open_zone(unsigned int zone_number)$/;"	f	class:leveldb::__anon8::Zone_Coordinator	file:
Open_zone	util/zns/env_zone_temp.cc	/^		bool Open_zone(unsigned int zone_number)$/;"	f	class:leveldb::__anon7::Z_interface	file:
OptionConfig	db/db_test.cc	/^  enum OptionConfig { kDefault, kReuse, kFilter, kUncompressed, kEnd };$/;"	g	class:leveldb::DBTest	file:
Options	include/leveldb/options.h	/^struct LEVELDB_EXPORT Options {$/;"	s	namespace:leveldb
Options	util/options.cc	/^Options::Options() : comparator(BytewiseComparator()), env(Env::Default()) {}$/;"	f	class:leveldb::Options
Order	benchmarks/db_bench_sqlite3.cc	/^  enum Order { SEQUENTIAL, RANDOM };$/;"	g	class:leveldb::Benchmark	file:
Order	benchmarks/db_bench_tree_db.cc	/^  enum Order { SEQUENTIAL, RANDOM };$/;"	g	class:leveldb::Benchmark	file:
Output	db/db_impl.cc	/^  struct Output {$/;"	s	struct:leveldb::DBImpl::CompactionState	file:
OverlapInLevel	db/version_set.cc	/^bool Version::OverlapInLevel(int level, const Slice* smallest_user_key,$/;"	f	class:leveldb::Version
Overlaps	db/version_set_test.cc	/^  bool Overlaps(const char* smallest, const char* largest) {$/;"	f	class:leveldb::FindFileTest
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	339;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	342;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	345;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	348;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	351;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	354;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	357;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	360;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	363;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	366;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	369;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	372;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	375;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	378;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	381;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	384;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	387;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	390;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	393;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	396;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	399;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	402;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	405;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	408;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	412;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	415;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	418;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	421;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	424;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	429;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	432;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	436;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	324;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	327;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	330;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	333;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	336;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	339;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	342;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	345;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	348;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	351;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	354;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	357;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	360;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	363;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	366;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	369;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	372;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	375;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	378;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	381;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	384;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	387;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	390;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	393;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	397;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	400;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	403;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	406;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	409;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	414;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	417;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	421;"	d	file:
PT_GUARDED_BY	port/thread_annotations.h	28;"	d
PackSequenceAndType	db/dbformat.cc	/^static uint64_t PackSequenceAndType(uint64_t seq, ValueType t) {$/;"	f	namespace:leveldb
ParseFileName	db/filename.cc	/^bool ParseFileName(const std::string& filename, uint64_t* number,$/;"	f	namespace:leveldb
ParseInternalKey	db/dbformat.h	/^inline bool ParseInternalKey(const Slice& internal_key,$/;"	f	namespace:leveldb
ParseKey	db/db_iter.cc	/^inline bool DBIter::ParseKey(ParsedInternalKey* ikey) {$/;"	f	class:leveldb::__anon38::DBIter
ParseNextKey	table/block.cc	/^  bool ParseNextKey() {$/;"	f	class:leveldb::Block::Iter	file:
ParsedInternalKey	db/dbformat.h	/^  ParsedInternalKey() {}  \/\/ Intentionally left uninitialized (for speed)$/;"	f	struct:leveldb::ParsedInternalKey
ParsedInternalKey	db/dbformat.h	/^  ParsedInternalKey(const Slice& u, const SequenceNumber& seq, ValueType t)$/;"	f	struct:leveldb::ParsedInternalKey
ParsedInternalKey	db/dbformat.h	/^struct ParsedInternalKey {$/;"	s	namespace:leveldb
PartialCompactTestPreFault	db/fault_injection_test.cc	/^  void PartialCompactTestPreFault(int num_pre_sync, int num_post_sync) {$/;"	f	class:leveldb::FaultInjectionTest
PartialCompactTestReopenWithFault	db/fault_injection_test.cc	/^  void PartialCompactTestReopenWithFault(ResetMethod reset_method,$/;"	f	class:leveldb::FaultInjectionTest
Percentile	util/histogram.cc	/^double Histogram::Percentile(double p) const {$/;"	f	class:leveldb::Histogram
PickCompaction	db/version_set.cc	/^Compaction* VersionSet::PickCompaction() {$/;"	f	class:leveldb::VersionSet
PickLevelForMemTableOutput	db/version_set.cc	/^int Version::PickLevelForMemTableOutput(const Slice& smallest_user_key,$/;"	f	class:leveldb::Version
PickRandomKey	table/table_test.cc	/^  std::string PickRandomKey(Random* rnd, const std::vector<std::string>& keys) {$/;"	f	class:leveldb::Harness
PosixEnv	util/env_posix.cc	/^PosixEnv::PosixEnv()$/;"	f	class:leveldb::PosixEnv
PosixEnv	util/env_posix.cc	/^class PosixEnv : public Env {$/;"	c	namespace:leveldb::__anon19	file:
PosixError	util/env_posix.cc	/^Status PosixError(const std::string& context, int error_number) {$/;"	f	namespace:leveldb::__anon19
PosixFileLock	util/env_posix.cc	/^  PosixFileLock(int fd, std::string filename)$/;"	f	class:leveldb::__anon19::PosixFileLock
PosixFileLock	util/env_posix.cc	/^class PosixFileLock : public FileLock {$/;"	c	namespace:leveldb::__anon19	file:
PosixLockTable	util/env_posix.cc	/^class PosixLockTable {$/;"	c	namespace:leveldb::__anon19	file:
PosixLogger	util/posix_logger.h	/^  explicit PosixLogger(std::FILE* fp) : fp_(fp) { assert(fp != nullptr); }$/;"	f	class:leveldb::final
PosixMmapReadableFile	util/env_posix.cc	/^  PosixMmapReadableFile(std::string filename, char* mmap_base, size_t length,$/;"	f	class:leveldb::__anon19::final
PosixRandomAccessFile	util/env_posix.cc	/^  PosixRandomAccessFile(std::string filename, int fd, Limiter* fd_limiter)$/;"	f	class:leveldb::__anon19::final
PosixSequentialFile	util/env_posix.cc	/^  PosixSequentialFile(std::string filename, int fd)$/;"	f	class:leveldb::__anon19::final
PosixWritableFile	util/env_posix.cc	/^  PosixWritableFile(std::string filename, int fd)$/;"	f	class:leveldb::__anon19::final
Prev	db/db_iter.cc	/^void DBIter::Prev() {$/;"	f	class:leveldb::__anon38::DBIter
Prev	db/skiplist.h	/^inline void SkipList<Key, Comparator>::Iterator::Prev() {$/;"	f	class:leveldb::SkipList::Iterator
Prev	table/iterator_wrapper.h	/^  void Prev() {$/;"	f	class:leveldb::IteratorWrapper
Prev	table/two_level_iterator.cc	/^void TwoLevelIterator::Prev() {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
PrevLogNumber	db/version_set.h	/^  uint64_t PrevLogNumber() const { return prev_log_number_; }$/;"	f	class:leveldb::VersionSet
PrintContents	db/write_batch_test.cc	/^static std::string PrintContents(WriteBatch* b) {$/;"	f	namespace:leveldb
PrintEnvironment	benchmarks/db_bench.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintEnvironment	benchmarks/db_bench_sqlite3.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintEnvironment	benchmarks/db_bench_tree_db.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintHeader	benchmarks/db_bench.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintHeader	benchmarks/db_bench_sqlite3.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintHeader	benchmarks/db_bench_tree_db.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintLogContents	db/dumpfile.cc	/^Status PrintLogContents(Env* env, const std::string& fname,$/;"	f	namespace:leveldb::__anon35
PrintStats	benchmarks/db_bench.cc	/^  void PrintStats(const char* key) {$/;"	f	class:leveldb::Benchmark	file:
PrintWarnings	benchmarks/db_bench.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
PrintWarnings	benchmarks/db_bench_sqlite3.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
PrintWarnings	benchmarks/db_bench_tree_db.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
Property	db/corruption_test.cc	/^  int Property(const std::string& name) {$/;"	f	class:leveldb::CorruptionTest
Prune	include/leveldb/cache.h	/^  virtual void Prune() {}$/;"	f	class:leveldb::Cache
Prune	util/cache.cc	/^void LRUCache::Prune() {$/;"	f	class:leveldb::__anon16::LRUCache
Put	db/db_impl.cc	/^Status DB::Put(const WriteOptions& opt, const Slice& key, const Slice& value) {$/;"	f	class:leveldb::DB
Put	db/db_impl.cc	/^Status DBImpl::Put(const WriteOptions& o, const Slice& key, const Slice& val) {$/;"	f	class:leveldb::DBImpl
Put	db/db_test.cc	/^  Status Put(const std::string& k, const std::string& v) {$/;"	f	class:leveldb::DBTest
Put	db/recovery_test.cc	/^  Status Put(const std::string& k, const std::string& v) {$/;"	f	class:leveldb::RecoveryTest
Put	db/write_batch.cc	/^void WriteBatch::Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::WriteBatch
PutFixed32	util/coding.cc	/^void PutFixed32(std::string* dst, uint32_t value) {$/;"	f	namespace:leveldb
PutFixed64	util/coding.cc	/^void PutFixed64(std::string* dst, uint64_t value) {$/;"	f	namespace:leveldb
PutLengthPrefixedSlice	util/coding.cc	/^void PutLengthPrefixedSlice(std::string* dst, const Slice& value) {$/;"	f	namespace:leveldb
PutVarint32	util/coding.cc	/^void PutVarint32(std::string* dst, uint32_t v) {$/;"	f	namespace:leveldb
PutVarint64	util/coding.cc	/^void PutVarint64(std::string* dst, uint64_t v) {$/;"	f	namespace:leveldb
RANDOM	benchmarks/db_bench_sqlite3.cc	/^  enum Order { SEQUENTIAL, RANDOM };$/;"	e	enum:leveldb::Benchmark::Order	file:
RANDOM	benchmarks/db_bench_tree_db.cc	/^  enum Order { SEQUENTIAL, RANDOM };$/;"	e	enum:leveldb::Benchmark::Order	file:
RESET_DELETE_UNSYNCED_FILES	db/fault_injection_test.cc	/^  enum ResetMethod { RESET_DROP_UNSYNCED_DATA, RESET_DELETE_UNSYNCED_FILES };$/;"	e	enum:leveldb::FaultInjectionTest::ResetMethod	file:
RESET_DROP_UNSYNCED_DATA	db/fault_injection_test.cc	/^  enum ResetMethod { RESET_DROP_UNSYNCED_DATA, RESET_DELETE_UNSYNCED_FILES };$/;"	e	enum:leveldb::FaultInjectionTest::ResetMethod	file:
RM	build/Makefile	/^RM = \/usr\/local\/bin\/cmake -E remove -f$/;"	m
RUNNING	db/skiplist_test.cc	/^  enum ReaderState { STARTING, RUNNING, DONE };$/;"	e	enum:leveldb::TestState::ReaderState	file:
Random	util/random.h	/^  explicit Random(uint32_t s) : seed_(s & 0x7fffffffu) {$/;"	f	class:leveldb::Random
Random	util/random.h	/^class Random {$/;"	c	namespace:leveldb
RandomAccessFile	include/leveldb/env.h	/^class LEVELDB_EXPORT RandomAccessFile {$/;"	c	namespace:leveldb
RandomAccessFileImpl	helpers/memenv/memenv.cc	/^  explicit RandomAccessFileImpl(FileState* file) : file_(file) { file_->Ref(); }$/;"	f	class:leveldb::__anon5::RandomAccessFileImpl
RandomAccessFileImpl	helpers/memenv/memenv.cc	/^class RandomAccessFileImpl : public RandomAccessFile {$/;"	c	namespace:leveldb::__anon5	file:
RandomCompactionPeriod	db/db_iter.cc	/^  size_t RandomCompactionPeriod() {$/;"	f	class:leveldb::__anon38::DBIter	file:
RandomGenerator	benchmarks/db_bench.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon4::RandomGenerator
RandomGenerator	benchmarks/db_bench.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon4	file:
RandomGenerator	benchmarks/db_bench_sqlite3.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon3::RandomGenerator
RandomGenerator	benchmarks/db_bench_sqlite3.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon3	file:
RandomGenerator	benchmarks/db_bench_tree_db.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon2::RandomGenerator
RandomGenerator	benchmarks/db_bench_tree_db.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon2	file:
RandomHeight	db/skiplist.h	/^int SkipList<Key, Comparator>::RandomHeight() {$/;"	f	class:leveldb::SkipList
RandomKey	db/db_test.cc	/^static std::string RandomKey(Random* rnd) {$/;"	f	namespace:leveldb
RandomKey	util/testutil.cc	/^std::string RandomKey(Random* rnd, int len) {$/;"	f	namespace:leveldb::test
RandomSeed	util/testharness.cc	/^int RandomSeed() {$/;"	f	namespace:leveldb::test
RandomSkewedString	db/log_test.cc	/^static std::string RandomSkewedString(int i, Random* rnd) {$/;"	f	namespace:leveldb::log
RandomString	db/db_test.cc	/^static std::string RandomString(Random* rnd, int len) {$/;"	f	namespace:leveldb
RandomString	util/testutil.cc	/^Slice RandomString(Random* rnd, int len, std::string* dst) {$/;"	f	namespace:leveldb::test
RandomTarget	db/skiplist_test.cc	/^  static Key RandomTarget(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest	file:
Range	include/leveldb/db.h	/^  Range(const Slice& s, const Slice& l) : start(s), limit(l) {}$/;"	f	struct:leveldb::Range
Range	include/leveldb/db.h	/^struct LEVELDB_EXPORT Range {$/;"	s	namespace:leveldb
Read	benchmarks/db_bench_sqlite3.cc	/^  void Read(Order order, int entries_per_batch) {$/;"	f	class:leveldb::Benchmark
Read	db/log_test.cc	/^  std::string Read() {$/;"	f	class:leveldb::log::LogTest
Read	helpers/memenv/memenv.cc	/^  Status Read(uint64_t offset, size_t n, Slice* result, char* scratch) const {$/;"	f	class:leveldb::__anon5::FileState
Read	util/env_zone.cc	/^        ssize_t Read(File_Info* finfo, char* scratch, size_t size)$/;"	f	class:leveldb::__anon21::Zone_Coordinator
Read	util/zns/env_zone_cp.cc	/^		size_t Read(unsigned int zone_number, char* buf, unsigned int start_offset, unsigned int size)$/;"	f	class:leveldb::__anon8::Zone_Coordinator
Read	util/zns/env_zone_temp.cc	/^		Status Read(uint64_t offset, size_t n, Slice* result, char* scratch)$/;"	f	class:leveldb::__anon7::ZoneFile
Read	util/zns/env_zone_temp.cc	/^		size_t Read(struct zns_share_info *zone_info, char* buf, unsigned int offset, unsigned int size)$/;"	f	class:leveldb::__anon7::Zone
Read	util/zns/env_zone_temp.cc	/^		size_t Read(unsigned int zone_number, char* buf, unsigned int start_offset, unsigned int size)$/;"	f	class:leveldb::__anon7::Z_interface
Read	util/zns/env_zone_temp.cc	/^		virtual Status Read(size_t n, Slice* result, char* scratch)$/;"	f	class:leveldb::__anon7::ZoneSequentialFile
Read	util/zns/env_zone_temp.cc	/^		virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon7::ZoneRandomAccessFile
ReadBlock	table/format.cc	/^Status ReadBlock(RandomAccessFile* file, const ReadOptions& options,$/;"	f	namespace:leveldb
ReadFileToString	util/env.cc	/^Status ReadFileToString(Env* env, const std::string& fname, std::string* data) {$/;"	f	namespace:leveldb
ReadFilter	table/table.cc	/^void Table::ReadFilter(const Slice& filter_handle_value) {$/;"	f	class:leveldb::Table
ReadHot	benchmarks/db_bench.cc	/^  void ReadHot(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadMeta	table/table.cc	/^void Table::ReadMeta(const Footer& footer) {$/;"	f	class:leveldb::Table
ReadMissing	benchmarks/db_bench.cc	/^  void ReadMissing(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadOptions	include/leveldb/options.h	/^struct LEVELDB_EXPORT ReadOptions {$/;"	s	namespace:leveldb
ReadPhysicalRecord	db/log_reader.cc	/^unsigned int Reader::ReadPhysicalRecord(Slice* result) {$/;"	f	class:leveldb::log::Reader
ReadRandom	benchmarks/db_bench.cc	/^  void ReadRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadRandom	benchmarks/db_bench_tree_db.cc	/^  void ReadRandom() {$/;"	f	class:leveldb::Benchmark	file:
ReadRecord	db/log_reader.cc	/^bool Reader::ReadRecord(Slice* record, std::string* scratch) {$/;"	f	class:leveldb::log::Reader
ReadReverse	benchmarks/db_bench.cc	/^  void ReadReverse(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadSequential	benchmarks/db_bench.cc	/^  void ReadSequential(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadSequential	benchmarks/db_bench_sqlite3.cc	/^  void ReadSequential() {$/;"	f	class:leveldb::Benchmark
ReadSequential	benchmarks/db_bench_tree_db.cc	/^  void ReadSequential() {$/;"	f	class:leveldb::Benchmark	file:
ReadStep	db/skiplist_test.cc	/^  void ReadStep(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest
ReadUint32LE	util/crc32c.cc	/^inline uint32_t ReadUint32LE(const uint8_t* buffer) {$/;"	f	namespace:leveldb::crc32c::__anon15
ReadValue	db/fault_injection_test.cc	/^  Status ReadValue(int i, std::string* val) const {$/;"	f	class:leveldb::FaultInjectionTest
ReadWhileWriting	benchmarks/db_bench.cc	/^  void ReadWhileWriting(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Reader	db/log_reader.cc	/^Reader::Reader(SequentialFile* file, Reporter* reporter, bool checksum,$/;"	f	class:leveldb::log::Reader
Reader	db/log_reader.h	/^class Reader {$/;"	c	namespace:leveldb::log
ReaderState	db/skiplist_test.cc	/^  enum ReaderState { STARTING, RUNNING, DONE };$/;"	g	class:leveldb::TestState	file:
RecordBackgroundError	db/db_impl.cc	/^void DBImpl::RecordBackgroundError(const Status& s) {$/;"	f	class:leveldb::DBImpl
RecordReadSample	db/db_impl.cc	/^void DBImpl::RecordReadSample(Slice key) {$/;"	f	class:leveldb::DBImpl
RecordReadSample	db/version_set.cc	/^bool Version::RecordReadSample(Slice internal_key) {$/;"	f	class:leveldb::Version
RecordType	db/log_format.h	/^enum RecordType {$/;"	g	namespace:leveldb::log
Recover	db/db_impl.cc	/^Status DBImpl::Recover(VersionEdit* edit, bool* save_manifest) {$/;"	f	class:leveldb::DBImpl
Recover	db/version_set.cc	/^Status VersionSet::Recover(bool* save_manifest) {$/;"	f	class:leveldb::VersionSet
RecoverLogFile	db/db_impl.cc	/^Status DBImpl::RecoverLogFile(uint64_t log_number, bool last_log,$/;"	f	class:leveldb::DBImpl
RecoveryTest	db/recovery_test.cc	/^  RecoveryTest() : env_(Env::Default()), db_(nullptr) {$/;"	f	class:leveldb::RecoveryTest
RecoveryTest	db/recovery_test.cc	/^class RecoveryTest {$/;"	c	namespace:leveldb	file:
Ref	db/memtable.h	/^  void Ref() { ++refs_; }$/;"	f	class:leveldb::MemTable
Ref	db/version_set.cc	/^void Version::Ref() { ++refs_; }$/;"	f	class:leveldb::Version
Ref	helpers/memenv/memenv.cc	/^  void Ref() {$/;"	f	class:leveldb::__anon5::FileState
Ref	util/cache.cc	/^void LRUCache::Ref(LRUHandle* e) {$/;"	f	class:leveldb::__anon16::LRUCache
Ref	util/zns/env_zone_temp.cc	/^		void Ref()$/;"	f	class:leveldb::__anon7::ZoneFile
RegisterCleanup	table/iterator.cc	/^void Iterator::RegisterCleanup(CleanupFunction func, void* arg1, void* arg2) {$/;"	f	class:leveldb::Iterator
RegisterTest	util/testharness.cc	/^bool RegisterTest(const char* base, const char* name, void (*func)()) {$/;"	f	namespace:leveldb::test
Release	util/cache.cc	/^void LRUCache::Release(Cache::Handle* handle) {$/;"	f	class:leveldb::__anon16::LRUCache
Release	util/env_posix.cc	/^  void Release() { acquires_allowed_.fetch_add(1, std::memory_order_relaxed); }$/;"	f	class:leveldb::__anon19::Limiter
Release	util/env_windows.cc	/^  HANDLE Release() {$/;"	f	class:leveldb::__anon11::ScopedHandle
Release	util/env_windows.cc	/^  void Release() { acquires_allowed_.fetch_add(1, std::memory_order_relaxed); }$/;"	f	class:leveldb::__anon11::Limiter
ReleaseBlock	table/table.cc	/^static void ReleaseBlock(void* arg, void* h) {$/;"	f	namespace:leveldb
ReleaseInputs	db/version_set.cc	/^void Compaction::ReleaseInputs() {$/;"	f	class:leveldb::Compaction
ReleaseSnapshot	db/db_impl.cc	/^void DBImpl::ReleaseSnapshot(const Snapshot* snapshot) {$/;"	f	class:leveldb::DBImpl
Remove	util/cache.cc	/^  LRUHandle* Remove(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon16::HandleTable
RenameFile	db/fault_injection_test.cc	/^Status FaultInjectionTestEnv::RenameFile(const std::string& s,$/;"	f	class:leveldb::FaultInjectionTestEnv
RenameFile	util/zns/env_zone_temp.cc	/^		virtual Status RenameFile(const std::string& src, const std::string& target)$/;"	f	class:leveldb::__anon7::ZoneEnv
RenameLDBToSST	db/db_test.cc	/^  int RenameLDBToSST() {$/;"	f	class:leveldb::DBTest
Reopen	db/corruption_test.cc	/^  void Reopen() { ASSERT_OK(TryReopen()); }$/;"	f	class:leveldb::CorruptionTest
Reopen	db/db_test.cc	/^  void Reopen(Options* options = nullptr) { ASSERT_OK(TryReopen(options)); }$/;"	f	class:leveldb::DBTest
ReopenForAppend	db/log_test.cc	/^  void ReopenForAppend() {$/;"	f	class:leveldb::log::LogTest
Rep	table/table.cc	/^struct Table::Rep {$/;"	s	class:leveldb::Table	file:
Rep	table/table_builder.cc	/^  Rep(const Options& opt, WritableFile* f)$/;"	f	struct:leveldb::TableBuilder::Rep
Rep	table/table_builder.cc	/^struct TableBuilder::Rep {$/;"	s	class:leveldb::TableBuilder	file:
RepairDB	db/corruption_test.cc	/^  void RepairDB() {$/;"	f	class:leveldb::CorruptionTest
RepairDB	db/repair.cc	/^Status RepairDB(const std::string& dbname, const Options& options) {$/;"	f	namespace:leveldb
RepairTable	db/repair.cc	/^  void RepairTable(const std::string& src, TableInfo t) {$/;"	f	class:leveldb::__anon37::Repairer	file:
Repairer	db/repair.cc	/^  Repairer(const std::string& dbname, const Options& options)$/;"	f	class:leveldb::__anon37::Repairer
Repairer	db/repair.cc	/^class Repairer {$/;"	c	namespace:leveldb::__anon37	file:
Report	benchmarks/db_bench.cc	/^  void Report(const Slice& name) {$/;"	f	class:leveldb::__anon4::Stats
ReportCollector	db/log_test.cc	/^    ReportCollector() : dropped_bytes_(0) {}$/;"	f	class:leveldb::log::LogTest::ReportCollector
ReportCollector	db/log_test.cc	/^  class ReportCollector : public Reader::Reporter {$/;"	c	class:leveldb::log::LogTest	file:
ReportCorruption	db/log_reader.cc	/^void Reader::ReportCorruption(uint64_t bytes, const char* reason) {$/;"	f	class:leveldb::log::Reader
ReportDrop	db/log_reader.cc	/^void Reader::ReportDrop(uint64_t bytes, const Status& reason) {$/;"	f	class:leveldb::log::Reader
ReportMessage	db/log_test.cc	/^  std::string ReportMessage() const { return report_.message_; }$/;"	f	class:leveldb::log::LogTest
Reporter	db/log_reader.h	/^  class Reporter {$/;"	c	class:leveldb::log::Reader
Reset	table/block_builder.cc	/^void BlockBuilder::Reset() {$/;"	f	class:leveldb::BlockBuilder
Reset	table/table_test.cc	/^  void Reset() {$/;"	f	class:leveldb::TableConstructor	file:
Reset	util/bloom_test.cc	/^  void Reset() {$/;"	f	class:leveldb::BloomTest
ResetDBState	db/fault_injection_test.cc	/^  void ResetDBState(ResetMethod reset_method) {$/;"	f	class:leveldb::FaultInjectionTest
ResetMethod	db/fault_injection_test.cc	/^  enum ResetMethod { RESET_DROP_UNSYNCED_DATA, RESET_DELETE_UNSYNCED_FILES };$/;"	g	class:leveldb::FaultInjectionTest	file:
ResetState	db/fault_injection_test.cc	/^void FaultInjectionTestEnv::ResetState() {$/;"	f	class:leveldb::FaultInjectionTestEnv
Resize	util/cache.cc	/^  void Resize() {$/;"	f	class:leveldb::__anon16::HandleTable	file:
ReuseFileNumber	db/version_set.h	/^  void ReuseFileNumber(uint64_t file_number) {$/;"	f	class:leveldb::VersionSet
ReuseLogs	db/fault_injection_test.cc	/^  void ReuseLogs(bool reuse) { options_.reuse_logs = reuse; }$/;"	f	class:leveldb::FaultInjectionTest
ReuseManifest	db/version_set.cc	/^bool VersionSet::ReuseManifest(const std::string& dscname,$/;"	f	class:leveldb::VersionSet
Reverse	table/table_test.cc	/^static std::string Reverse(const Slice& key) {$/;"	f	namespace:leveldb
ReverseKeyComparator	table/table_test.cc	/^class ReverseKeyComparator : public Comparator {$/;"	c	namespace:leveldb::__anon28	file:
RoundUp	util/crc32c.cc	/^constexpr inline const uint8_t* RoundUp(const uint8_t* pointer) {$/;"	f	namespace:leveldb::crc32c::__anon15
Run	benchmarks/db_bench.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
Run	benchmarks/db_bench_sqlite3.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
Run	benchmarks/db_bench_tree_db.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
Run	db/repair.cc	/^  Status Run() {$/;"	f	class:leveldb::__anon37::Repairer
Run	include/leveldb/iterator.h	/^    void Run() {$/;"	f	struct:leveldb::Iterator::CleanupNode
RunAllTests	util/testharness.cc	/^int RunAllTests() {$/;"	f	namespace:leveldb::test
RunBenchmark	benchmarks/db_bench.cc	/^  void RunBenchmark(int n, Slice name,$/;"	f	class:leveldb::Benchmark	file:
RunConcurrent	db/skiplist_test.cc	/^static void RunConcurrent(int run) {$/;"	f	namespace:leveldb
SCOPED_LOCKABLE	port/thread_annotations.h	65;"	d
SECTOR_SIZE	zns_ctl/controller.h	26;"	d
SEGMENT_ID_INTERVAL	util/zns/env_zone_temp.cc	12;"	d	file:
SEQUENTIAL	benchmarks/db_bench_sqlite3.cc	/^  enum Order { SEQUENTIAL, RANDOM };$/;"	e	enum:leveldb::Benchmark::Order	file:
SEQUENTIAL	benchmarks/db_bench_tree_db.cc	/^  enum Order { SEQUENTIAL, RANDOM };$/;"	e	enum:leveldb::Benchmark::Order	file:
SHARED_LOCKS_REQUIRED	port/thread_annotations.h	47;"	d
SHARED_LOCK_FUNCTION	port/thread_annotations.h	74;"	d
SHARED_TRYLOCK_FUNCTION	port/thread_annotations.h	84;"	d
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMULATE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	209;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	21;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	231;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	24;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	203;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	225;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	216;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	238;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	40;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	44;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	210;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	40;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	217;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	239;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	41;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	49;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	211;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	233;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	41;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	49;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	52;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	52;"	d	file:
SIZE	build/CMakeFiles/CheckTypeSize/CMAKE_SIZEOF_UNSIGNED_SHORT.c	23;"	d	file:
SSTTableFileName	db/filename.cc	/^std::string SSTTableFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
STARTING	db/skiplist_test.cc	/^  enum ReaderState { STARTING, RUNNING, DONE };$/;"	e	enum:leveldb::TestState::ReaderState	file:
STEP1	util/crc32c.cc	287;"	d	file:
STEP1	util/crc32c.cc	375;"	d	file:
STEP16	util/crc32c.cc	303;"	d	file:
STEP16	util/crc32c.cc	373;"	d	file:
STEP4	util/crc32c.cc	294;"	d	file:
STEP4	util/crc32c.cc	374;"	d	file:
STEP4W	util/crc32c.cc	313;"	d	file:
STEP4W	util/crc32c.cc	372;"	d	file:
STLLessThan	table/table_test.cc	/^  STLLessThan() : cmp(BytewiseComparator()) {}$/;"	f	struct:leveldb::__anon29::STLLessThan
STLLessThan	table/table_test.cc	/^  STLLessThan(const Comparator* c) : cmp(c) {}$/;"	f	struct:leveldb::__anon29::STLLessThan
STLLessThan	table/table_test.cc	/^struct STLLessThan {$/;"	s	namespace:leveldb::__anon29	file:
STORAGE_LEVELDB_DB_BUILDER_H_	db/builder.h	6;"	d
STORAGE_LEVELDB_DB_DBFORMAT_H_	db/dbformat.h	6;"	d
STORAGE_LEVELDB_DB_DB_IMPL_H_	db/db_impl.h	6;"	d
STORAGE_LEVELDB_DB_DB_ITER_H_	db/db_iter.h	6;"	d
STORAGE_LEVELDB_DB_FILENAME_H_	db/filename.h	8;"	d
STORAGE_LEVELDB_DB_LOG_FORMAT_H_	db/log_format.h	9;"	d
STORAGE_LEVELDB_DB_LOG_READER_H_	db/log_reader.h	6;"	d
STORAGE_LEVELDB_DB_LOG_WRITER_H_	db/log_writer.h	6;"	d
STORAGE_LEVELDB_DB_MEMTABLE_H_	db/memtable.h	6;"	d
STORAGE_LEVELDB_DB_SKIPLIST_H_	db/skiplist.h	6;"	d
STORAGE_LEVELDB_DB_SNAPSHOT_H_	db/snapshot.h	6;"	d
STORAGE_LEVELDB_DB_TABLE_CACHE_H_	db/table_cache.h	8;"	d
STORAGE_LEVELDB_DB_VERSION_EDIT_H_	db/version_edit.h	6;"	d
STORAGE_LEVELDB_DB_VERSION_SET_H_	db/version_set.h	16;"	d
STORAGE_LEVELDB_DB_WRITE_BATCH_INTERNAL_H_	db/write_batch_internal.h	6;"	d
STORAGE_LEVELDB_HELPERS_MEMENV_MEMENV_H_	helpers/memenv/memenv.h	6;"	d
STORAGE_LEVELDB_INCLUDE_CACHE_H_	include/leveldb/cache.h	19;"	d
STORAGE_LEVELDB_INCLUDE_COMPARATOR_H_	include/leveldb/comparator.h	6;"	d
STORAGE_LEVELDB_INCLUDE_C_H_	include/leveldb/c.h	41;"	d
STORAGE_LEVELDB_INCLUDE_DB_H_	include/leveldb/db.h	6;"	d
STORAGE_LEVELDB_INCLUDE_DUMPFILE_H_	include/leveldb/dumpfile.h	6;"	d
STORAGE_LEVELDB_INCLUDE_ENV_H_	include/leveldb/env.h	14;"	d
STORAGE_LEVELDB_INCLUDE_EXPORT_H_	include/leveldb/export.h	6;"	d
STORAGE_LEVELDB_INCLUDE_FILTER_POLICY_H_	include/leveldb/filter_policy.h	17;"	d
STORAGE_LEVELDB_INCLUDE_ITERATOR_H_	include/leveldb/iterator.h	16;"	d
STORAGE_LEVELDB_INCLUDE_OPTIONS_H_	include/leveldb/options.h	6;"	d
STORAGE_LEVELDB_INCLUDE_SLICE_H_	include/leveldb/slice.h	16;"	d
STORAGE_LEVELDB_INCLUDE_STATUS_H_	include/leveldb/status.h	14;"	d
STORAGE_LEVELDB_INCLUDE_TABLE_BUILDER_H_	include/leveldb/table_builder.h	14;"	d
STORAGE_LEVELDB_INCLUDE_TABLE_H_	include/leveldb/table.h	6;"	d
STORAGE_LEVELDB_INCLUDE_WRITE_BATCH_H_	include/leveldb/write_batch.h	22;"	d
STORAGE_LEVELDB_PORT_PORT_CONFIG_H_	build/include/port/port_config.h	6;"	d
STORAGE_LEVELDB_PORT_PORT_EXAMPLE_H_	port/port_example.h	11;"	d
STORAGE_LEVELDB_PORT_PORT_H_	port/port.h	6;"	d
STORAGE_LEVELDB_PORT_PORT_STDCXX_H_	port/port_stdcxx.h	6;"	d
STORAGE_LEVELDB_PORT_THREAD_ANNOTATIONS_H_	port/thread_annotations.h	6;"	d
STORAGE_LEVELDB_TABLE_BLOCK_BUILDER_H_	table/block_builder.h	6;"	d
STORAGE_LEVELDB_TABLE_BLOCK_H_	table/block.h	6;"	d
STORAGE_LEVELDB_TABLE_FILTER_BLOCK_H_	table/filter_block.h	10;"	d
STORAGE_LEVELDB_TABLE_FORMAT_H_	table/format.h	6;"	d
STORAGE_LEVELDB_TABLE_ITERATOR_WRAPPER_H_	table/iterator_wrapper.h	6;"	d
STORAGE_LEVELDB_TABLE_MERGER_H_	table/merger.h	6;"	d
STORAGE_LEVELDB_TABLE_TWO_LEVEL_ITERATOR_H_	table/two_level_iterator.h	6;"	d
STORAGE_LEVELDB_UTIL_ARENA_H_	util/arena.h	6;"	d
STORAGE_LEVELDB_UTIL_CODING_H_	util/coding.h	11;"	d
STORAGE_LEVELDB_UTIL_CRC32C_H_	util/crc32c.h	6;"	d
STORAGE_LEVELDB_UTIL_ENV_POSIX_TEST_HELPER_H_	util/env_posix_test_helper.h	6;"	d
STORAGE_LEVELDB_UTIL_ENV_WINDOWS_TEST_HELPER_H_	util/env_windows_test_helper.h	6;"	d
STORAGE_LEVELDB_UTIL_HASH_H_	util/hash.h	8;"	d
STORAGE_LEVELDB_UTIL_HISTOGRAM_H_	util/histogram.h	6;"	d
STORAGE_LEVELDB_UTIL_LOGGING_H_	util/logging.h	9;"	d
STORAGE_LEVELDB_UTIL_MUTEXLOCK_H_	util/mutexlock.h	6;"	d
STORAGE_LEVELDB_UTIL_NO_DESTRUCTOR_H_	util/no_destructor.h	6;"	d
STORAGE_LEVELDB_UTIL_POSIX_LOGGER_H_	util/posix_logger.h	9;"	d
STORAGE_LEVELDB_UTIL_RANDOM_H_	util/random.h	6;"	d
STORAGE_LEVELDB_UTIL_TESTHARNESS_H_	util/testharness.h	6;"	d
STORAGE_LEVELDB_UTIL_TESTUTIL_H_	util/testutil.h	6;"	d
STORAGE_LEVELDB_UTIL_WINDOWS_LOGGER_H_	util/windows_logger.h	8;"	d
STRINGIFY	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	335;"	d	file:
STRINGIFY	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	320;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	334;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	319;"	d	file:
SUFFIXES	build/Makefile	/^SUFFIXES =$/;"	m
SanitizeOptions	db/db_impl.cc	/^Options SanitizeOptions(const std::string& dbname,$/;"	f	namespace:leveldb
SaveError	db/c.cc	/^static bool SaveError(char** errptr, const Status& s) {$/;"	f	file:
SaveError	table/two_level_iterator.cc	/^  void SaveError(const Status& s) {$/;"	f	class:leveldb::__anon30::TwoLevelIterator	file:
SaveKey	db/db_iter.cc	/^  inline void SaveKey(const Slice& k, std::string* dst) {$/;"	f	class:leveldb::__anon38::DBIter	file:
SaveTo	db/version_set.cc	/^  void SaveTo(Version* v) {$/;"	f	class:leveldb::VersionSet::Builder
SaveValue	db/version_set.cc	/^static void SaveValue(void* arg, const Slice& ikey, const Slice& v) {$/;"	f	namespace:leveldb
Saver	db/version_set.cc	/^struct Saver {$/;"	s	namespace:leveldb::__anon32	file:
SaverState	db/version_set.cc	/^enum SaverState {$/;"	g	namespace:leveldb::__anon32	file:
ScanTable	db/repair.cc	/^  void ScanTable(uint64_t number) {$/;"	f	class:leveldb::__anon37::Repairer	file:
Schedule	util/env_posix.cc	/^void PosixEnv::Schedule($/;"	f	class:leveldb::PosixEnv
Schedule	util/env_windows.cc	/^void WindowsEnv::Schedule($/;"	f	class:leveldb::__anon11::WindowsEnv
Schedule	util/zns/env_zone_temp.cc	/^		virtual void Schedule(void (*background_work_function)(void* background_work_arg), void* background_work_arg)$/;"	f	class:leveldb::__anon7::ZoneEnv
ScopedHandle	util/env_windows.cc	/^  ScopedHandle(HANDLE handle) : handle_(handle) {}$/;"	f	class:leveldb::__anon11::ScopedHandle
ScopedHandle	util/env_windows.cc	/^class ScopedHandle {$/;"	c	namespace:leveldb::__anon11	file:
Seek	db/db_iter.cc	/^void DBIter::Seek(const Slice& target) {$/;"	f	class:leveldb::__anon38::DBIter
Seek	db/skiplist.h	/^inline void SkipList<Key, Comparator>::Iterator::Seek(const Key& target) {$/;"	f	class:leveldb::SkipList::Iterator
Seek	table/iterator_wrapper.h	/^  void Seek(const Slice& k) {$/;"	f	class:leveldb::IteratorWrapper
Seek	table/two_level_iterator.cc	/^void TwoLevelIterator::Seek(const Slice& target) {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
SeekRandom	benchmarks/db_bench.cc	/^  void SeekRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
SeekToFirst	db/db_iter.cc	/^void DBIter::SeekToFirst() {$/;"	f	class:leveldb::__anon38::DBIter
SeekToFirst	db/skiplist.h	/^inline void SkipList<Key, Comparator>::Iterator::SeekToFirst() {$/;"	f	class:leveldb::SkipList::Iterator
SeekToFirst	table/iterator_wrapper.h	/^  void SeekToFirst() {$/;"	f	class:leveldb::IteratorWrapper
SeekToFirst	table/two_level_iterator.cc	/^void TwoLevelIterator::SeekToFirst() {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
SeekToLast	db/db_iter.cc	/^void DBIter::SeekToLast() {$/;"	f	class:leveldb::__anon38::DBIter
SeekToLast	db/skiplist.h	/^inline void SkipList<Key, Comparator>::Iterator::SeekToLast() {$/;"	f	class:leveldb::SkipList::Iterator
SeekToLast	table/iterator_wrapper.h	/^  void SeekToLast() {$/;"	f	class:leveldb::IteratorWrapper
SeekToLast	table/two_level_iterator.cc	/^void TwoLevelIterator::SeekToLast() {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
SeekToRestartPoint	table/block.cc	/^  void SeekToRestartPoint(uint32_t index) {$/;"	f	class:leveldb::Block::Iter	file:
Sequence	db/write_batch.cc	/^SequenceNumber WriteBatchInternal::Sequence(const WriteBatch* b) {$/;"	f	class:leveldb::WriteBatchInternal
SequenceNumber	db/dbformat.h	/^typedef uint64_t SequenceNumber;$/;"	t	namespace:leveldb
SequentialFile	include/leveldb/env.h	/^class LEVELDB_EXPORT SequentialFile {$/;"	c	namespace:leveldb
SequentialFileImpl	helpers/memenv/memenv.cc	/^  explicit SequentialFileImpl(FileState* file) : file_(file), pos_(0) {$/;"	f	class:leveldb::__anon5::SequentialFileImpl
SequentialFileImpl	helpers/memenv/memenv.cc	/^class SequentialFileImpl : public SequentialFile {$/;"	c	namespace:leveldb::__anon5	file:
Set	db/skiplist_test.cc	/^    void Set(int k, int v) {$/;"	f	struct:leveldb::ConcurrentTest::State
Set	table/iterator_wrapper.h	/^  void Set(Iterator* iter) {$/;"	f	class:leveldb::IteratorWrapper
SetAtomicBool	util/env_test.cc	/^static void SetAtomicBool(void* atomic_bool_ptr) {$/;"	f	namespace:leveldb::__anon10
SetByte	db/log_test.cc	/^  void SetByte(int offset, char new_byte) {$/;"	f	class:leveldb::log::LogTest
SetCapacity	util/cache.cc	/^  void SetCapacity(size_t capacity) { capacity_ = capacity; }$/;"	f	class:leveldb::__anon16::LRUCache
SetCompactPointer	db/version_edit.h	/^  void SetCompactPointer(int level, const InternalKey& key) {$/;"	f	class:leveldb::VersionEdit
SetComparatorName	db/version_edit.h	/^  void SetComparatorName(const Slice& name) {$/;"	f	class:leveldb::VersionEdit
SetContents	db/write_batch.cc	/^void WriteBatchInternal::SetContents(WriteBatch* b, const Slice& contents) {$/;"	f	class:leveldb::WriteBatchInternal
SetCount	db/write_batch.cc	/^void WriteBatchInternal::SetCount(WriteBatch* b, int n) {$/;"	f	class:leveldb::WriteBatchInternal
SetCurrentFile	db/filename.cc	/^Status SetCurrentFile(Env* env, const std::string& dbname,$/;"	f	namespace:leveldb
SetDataIterator	table/two_level_iterator.cc	/^void TwoLevelIterator::SetDataIterator(Iterator* data_iter) {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
SetFileLimits	util/env_posix_test.cc	/^  static void SetFileLimits(int read_only_file_limit, int mmap_limit) {$/;"	f	class:leveldb::EnvPosixTest
SetFileLimits	util/env_windows_test.cc	/^  static void SetFileLimits(int mmap_limit) {$/;"	f	class:leveldb::EnvWindowsTest
SetFrom	db/dbformat.h	/^  void SetFrom(const ParsedInternalKey& p) {$/;"	f	class:leveldb::InternalKey
SetIgnoreDotFiles	db/db_test.cc	/^  void SetIgnoreDotFiles(bool ignored) { ignore_dot_files_ = ignored; }$/;"	f	class:leveldb::TestEnv
SetLastSequence	db/version_edit.h	/^  void SetLastSequence(SequenceNumber seq) {$/;"	f	class:leveldb::VersionEdit
SetLastSequence	db/version_set.h	/^  void SetLastSequence(uint64_t s) {$/;"	f	class:leveldb::VersionSet
SetLogNumber	db/version_edit.h	/^  void SetLogNumber(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetNext	db/skiplist.h	/^  void SetNext(int n, Node* x) {$/;"	f	struct:leveldb::SkipList::Node
SetNextFile	db/version_edit.h	/^  void SetNextFile(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetPrevLogNumber	db/version_edit.h	/^  void SetPrevLogNumber(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetReadOnlyFDLimit	util/env_posix.cc	/^void EnvPosixTestHelper::SetReadOnlyFDLimit(int limit) {$/;"	f	class:leveldb::EnvPosixTestHelper
SetReadOnlyMMapLimit	util/env_posix.cc	/^void EnvPosixTestHelper::SetReadOnlyMMapLimit(int limit) {$/;"	f	class:leveldb::EnvPosixTestHelper
SetReadOnlyMMapLimit	util/env_windows.cc	/^void EnvWindowsTestHelper::SetReadOnlyMMapLimit(int limit) {$/;"	f	class:leveldb::EnvWindowsTestHelper
SetSequence	db/write_batch.cc	/^void WriteBatchInternal::SetSequence(WriteBatch* b, SequenceNumber seq) {$/;"	f	class:leveldb::WriteBatchInternal
SetupOtherInputs	db/version_set.cc	/^void VersionSet::SetupOtherInputs(Compaction* c) {$/;"	f	class:leveldb::VersionSet
Shard	util/cache.cc	/^  static uint32_t Shard(uint32_t hash) { return hash >> (32 - kNumShardBits); }$/;"	f	class:leveldb::__anon16::ShardedLRUCache	file:
ShardedLRUCache	util/cache.cc	/^  explicit ShardedLRUCache(size_t capacity) : last_id_(0) {$/;"	f	class:leveldb::__anon16::ShardedLRUCache
ShardedLRUCache	util/cache.cc	/^class ShardedLRUCache : public Cache {$/;"	c	namespace:leveldb::__anon16	file:
SharedState	benchmarks/db_bench.cc	/^  SharedState(int total)$/;"	f	struct:leveldb::__anon4::SharedState
SharedState	benchmarks/db_bench.cc	/^struct SharedState {$/;"	s	namespace:leveldb::__anon4	file:
ShortSuccessor	db/dbformat_test.cc	/^static std::string ShortSuccessor(const std::string& s) {$/;"	f	namespace:leveldb
Shorten	db/dbformat_test.cc	/^static std::string Shorten(const std::string& s, const std::string& l) {$/;"	f	namespace:leveldb
ShouldStopBefore	db/version_set.cc	/^bool Compaction::ShouldStopBefore(const Slice& internal_key) {$/;"	f	class:leveldb::Compaction
ShrinkSize	db/log_test.cc	/^  void ShrinkSize(int bytes) {$/;"	f	class:leveldb::log::LogTest
Signal	port/port_stdcxx.h	/^  void Signal() { cv_.notify_one(); }$/;"	f	class:leveldb::port::CondVar
SignalAll	port/port_stdcxx.h	/^  void SignalAll() { cv_.notify_all(); }$/;"	f	class:leveldb::port::CondVar
SingletonEnv	util/env_posix.cc	/^  SingletonEnv() {$/;"	f	class:leveldb::__anon20::SingletonEnv
SingletonEnv	util/env_posix.cc	/^class SingletonEnv {$/;"	c	namespace:leveldb::__anon20	file:
SingletonEnv	util/env_windows.cc	/^  SingletonEnv() {$/;"	f	class:leveldb::__anon11::SingletonEnv
SingletonEnv	util/env_windows.cc	/^class SingletonEnv {$/;"	c	namespace:leveldb::__anon11	file:
SingletonEnv	util/env_zone.cc	/^		SingletonEnv() {$/;"	f	class:leveldb::__anon21::SingletonEnv
SingletonEnv	util/env_zone.cc	/^	class SingletonEnv$/;"	c	namespace:leveldb::__anon21	file:
SingletonEnv	util/zns/env_zone_cp.cc	/^		SingletonEnv() {$/;"	f	class:leveldb::__anon8::SingletonEnv
SingletonEnv	util/zns/env_zone_cp.cc	/^	class SingletonEnv$/;"	c	namespace:leveldb::__anon8	file:
SingletonEnv	util/zns/env_zone_temp.cc	/^		SingletonEnv() {$/;"	f	class:leveldb::__anon7::SingletonEnv
SingletonEnv	util/zns/env_zone_temp.cc	/^	class SingletonEnv$/;"	c	namespace:leveldb::__anon7	file:
Size	db/autocompact_test.cc	/^  uint64_t Size(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::AutoCompactTest
Size	db/db_test.cc	/^  uint64_t Size(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::DBTest
Size	helpers/memenv/memenv.cc	/^  uint64_t Size() const {$/;"	f	class:leveldb::__anon5::FileState
Size	table/table_test.cc	/^  uint64_t Size() const { return contents_.size(); }$/;"	f	class:leveldb::StringSource
Size	util/zns/env_zone_cp.cc	/^        uint64_t Size() { return size; }$/;"	f	class:leveldb::__anon8::ZoneFile
Size	util/zns/env_zone_temp.cc	/^		uint64_t Size()$/;"	f	class:leveldb::__anon7::ZoneFile
Skewed	util/random.h	/^  uint32_t Skewed(int max_log) { return Uniform(1 << Uniform(max_log + 1)); }$/;"	f	class:leveldb::Random
Skip	util/zns/env_zone_temp.cc	/^		virtual Status Skip(uint64_t n)$/;"	f	class:leveldb::__anon7::ZoneSequentialFile
SkipEmptyDataBlocksBackward	table/two_level_iterator.cc	/^void TwoLevelIterator::SkipEmptyDataBlocksBackward() {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
SkipEmptyDataBlocksForward	table/two_level_iterator.cc	/^void TwoLevelIterator::SkipEmptyDataBlocksForward() {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
SkipList	db/skiplist.h	/^SkipList<Key, Comparator>::SkipList(Comparator cmp, Arena* arena)$/;"	f	class:leveldb::SkipList
SkipList	db/skiplist.h	/^class SkipList {$/;"	c	namespace:leveldb
SkipTest	db/skiplist_test.cc	/^class SkipTest {};$/;"	c	namespace:leveldb	file:
SkipToInitialBlock	db/log_reader.cc	/^bool Reader::SkipToInitialBlock() {$/;"	f	class:leveldb::log::Reader
SleepForMicroseconds	util/zns/env_zone_temp.cc	/^		virtual void SleepForMicroseconds(int micros)$/;"	f	class:leveldb::__anon7::ZoneEnv
Slice	include/leveldb/slice.h	/^  Slice() : data_(""), size_(0) {}$/;"	f	class:leveldb::Slice
Slice	include/leveldb/slice.h	/^  Slice(const char* d, size_t n) : data_(d), size_(n) {}$/;"	f	class:leveldb::Slice
Slice	include/leveldb/slice.h	/^  Slice(const char* s) : data_(s), size_(strlen(s)) {}$/;"	f	class:leveldb::Slice
Slice	include/leveldb/slice.h	/^  Slice(const std::string& s) : data_(s.data()), size_(s.size()) {}$/;"	f	class:leveldb::Slice
Slice	include/leveldb/slice.h	/^class LEVELDB_EXPORT Slice {$/;"	c	namespace:leveldb
SnappyCompress	benchmarks/db_bench.cc	/^  void SnappyCompress(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
SnappyCompressionSupported	table/table_test.cc	/^static bool SnappyCompressionSupported() {$/;"	f	namespace:leveldb
SnappyUncompress	benchmarks/db_bench.cc	/^  void SnappyUncompress(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Snappy_Compress	port/port_stdcxx.h	/^inline bool Snappy_Compress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_GetUncompressedLength	port/port_stdcxx.h	/^inline bool Snappy_GetUncompressedLength(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_Uncompress	port/port_stdcxx.h	/^inline bool Snappy_Uncompress(const char* input, size_t length, char* output) {$/;"	f	namespace:leveldb::port
Snapshot	include/leveldb/db.h	/^class LEVELDB_EXPORT Snapshot {$/;"	c	namespace:leveldb
SnapshotImpl	db/snapshot.h	/^  SnapshotImpl(SequenceNumber sequence_number)$/;"	f	class:leveldb::SnapshotImpl
SnapshotImpl	db/snapshot.h	/^class SnapshotImpl : public Snapshot {$/;"	c	namespace:leveldb
SnapshotList	db/snapshot.h	/^  SnapshotList() : head_(0) {$/;"	f	class:leveldb::SnapshotList
SnapshotList	db/snapshot.h	/^class SnapshotList {$/;"	c	namespace:leveldb
SomeFileOverlapsRange	db/version_set.cc	/^bool SomeFileOverlapsRange(const InternalKeyComparator& icmp,$/;"	f	namespace:leveldb
SpecialEnv	db/db_test.cc	/^  explicit SpecialEnv(Env* base)$/;"	f	class:leveldb::SpecialEnv
SpecialEnv	db/db_test.cc	/^class SpecialEnv : public EnvWrapper {$/;"	c	namespace:leveldb	file:
StandardDeviation	util/histogram.cc	/^double Histogram::StandardDeviation() const {$/;"	f	class:leveldb::Histogram
Start	benchmarks/db_bench.cc	/^  void Start() {$/;"	f	class:leveldb::__anon4::Stats
Start	benchmarks/db_bench_sqlite3.cc	/^  void Start() {$/;"	f	class:leveldb::Benchmark	file:
Start	benchmarks/db_bench_tree_db.cc	/^  void Start() {$/;"	f	class:leveldb::Benchmark	file:
StartBlock	table/filter_block.cc	/^void FilterBlockBuilder::StartBlock(uint64_t block_offset) {$/;"	f	class:leveldb::FilterBlockBuilder
StartPhase	db/c_test.c	/^static void StartPhase(const char* name) {$/;"	f	file:
StartReadingAt	db/log_test.cc	/^  void StartReadingAt(uint64_t initial_offset) {$/;"	f	class:leveldb::log::LogTest
StartThread	util/zns/env_zone_temp.cc	/^		virtual void StartThread(void (*thread_main)(void* thread_main_arg), void* thread_main_arg)$/;"	f	class:leveldb::__anon7::ZoneEnv
State	db/skiplist_test.cc	/^    State() {$/;"	f	struct:leveldb::ConcurrentTest::State
State	db/skiplist_test.cc	/^  struct State {$/;"	s	class:leveldb::ConcurrentTest	file:
Stats	benchmarks/db_bench.cc	/^  Stats() { Start(); }$/;"	f	class:leveldb::__anon4::Stats
Stats	benchmarks/db_bench.cc	/^class Stats {$/;"	c	namespace:leveldb::__anon4	file:
Status	include/leveldb/status.h	/^class LEVELDB_EXPORT Status {$/;"	c	namespace:leveldb
Status	include/leveldb/status.h	/^inline Status::Status(const Status& rhs) {$/;"	f	class:leveldb::Status
Status	util/status.cc	/^Status::Status(Code code, const Slice& msg, const Slice& msg2) {$/;"	f	class:leveldb::Status
StdoutPrinter	db/leveldbutil.cc	/^class StdoutPrinter : public WritableFile {$/;"	c	namespace:leveldb::__anon39	file:
StepErrorCheck	benchmarks/db_bench_sqlite3.cc	/^inline static void StepErrorCheck(int status) {$/;"	f	file:
Stop	benchmarks/db_bench.cc	/^  void Stop() {$/;"	f	class:leveldb::__anon4::Stats
Stop	benchmarks/db_bench_sqlite3.cc	/^  void Stop(const Slice& name) {$/;"	f	class:leveldb::Benchmark	file:
Stop	benchmarks/db_bench_tree_db.cc	/^  void Stop(const Slice& name) {$/;"	f	class:leveldb::Benchmark	file:
StringDest	db/log_test.cc	/^  class StringDest : public WritableFile {$/;"	c	class:leveldb::log::LogTest	file:
StringSink	table/table_test.cc	/^class StringSink : public WritableFile {$/;"	c	namespace:leveldb	file:
StringSource	db/log_test.cc	/^    StringSource() : force_error_(false), returned_partial_(false) {}$/;"	f	class:leveldb::log::LogTest::StringSource
StringSource	db/log_test.cc	/^  class StringSource : public SequentialFile {$/;"	c	class:leveldb::log::LogTest	file:
StringSource	table/table_test.cc	/^  StringSource(const Slice& contents)$/;"	f	class:leveldb::StringSource
StringSource	table/table_test.cc	/^class StringSource : public RandomAccessFile {$/;"	c	namespace:leveldb	file:
Sync	db/fault_injection_test.cc	/^Status TestWritableFile::Sync() {$/;"	f	class:leveldb::TestWritableFile
Sync	util/env_zone.cc	/^		bool Sync()$/;"	f	class:leveldb::__anon21::Zone_Coordinator
Sync	util/zns/env_zone_cp.cc	/^		Status Sync()$/;"	f	class:leveldb::__anon8::ZoneFile
Sync	util/zns/env_zone_cp.cc	/^		bool Sync()$/;"	f	class:leveldb::__anon8::Zone_Coordinator
Sync	util/zns/env_zone_temp.cc	/^		Status Sync()$/;"	f	class:leveldb::__anon7::ZoneFile
Sync	util/zns/env_zone_temp.cc	/^		bool Sync()$/;"	f	class:leveldb::__anon7::Z_interface
Sync	util/zns/env_zone_temp.cc	/^		virtual Status Sync()$/;"	f	class:leveldb::__anon7::ZoneWritableFile
SyncDir	db/fault_injection_test.cc	/^Status SyncDir(const std::string& dir) {$/;"	f	namespace:leveldb::__anon40
SyncDirIfManifest	util/env_posix.cc	/^  Status SyncDirIfManifest() {$/;"	f	class:leveldb::__anon19::final	file:
SyncDirIfManifest	util/zns/env_zone_cp.cc	/^		Status SyncDirIfManifest()$/;"	f	class:leveldb::__anon8::ZoneFile	file:
SyncDirIfManifest	util/zns/env_zone_temp.cc	/^		Status SyncDirIfManifest() {$/;"	f	class:leveldb::__anon7::ZoneFile	file:
SyncFd	util/env_posix.cc	/^  static Status SyncFd(int fd, const std::string& fd_path) {$/;"	f	class:leveldb::__anon19::final	file:
SyncParent	db/fault_injection_test.cc	/^Status TestWritableFile::SyncParent() {$/;"	f	class:leveldb::TestWritableFile
TABLE_TEST	table/table_test.cc	/^enum TestType { TABLE_TEST, BLOCK_TEST, MEMTABLE_TEST, DB_TEST };$/;"	e	enum:leveldb::TestType	file:
TARGET	zns_ctl/Makefile	/^TARGET=example$/;"	m
TCONCAT	util/testharness.h	118;"	d
TCONCAT1	util/testharness.h	119;"	d
TEST	db/autocompact_test.cc	/^TEST(AutoCompactTest, ReadAll) { DoReads(kCount); }$/;"	f	namespace:leveldb
TEST	db/autocompact_test.cc	/^TEST(AutoCompactTest, ReadHalf) { DoReads(kCount \/ 2); }$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, CompactionInputError) {$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, CompactionInputErrorParanoid) {$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, CorruptedDescriptor) {$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, MissingDescriptor) {$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, NewFileErrorDuringWrite) {$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, RecoverWriteError) {$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, Recovery) {$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, SequenceNumberRecovery) {$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, TableFile) {$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, TableFileIndexData) {$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, TableFileRepair) {$/;"	f	namespace:leveldb
TEST	db/corruption_test.cc	/^TEST(CorruptionTest, UnrelatedKeys) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, ApproximateSizes) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, ApproximateSizes_MixOfSmallAndLarge) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, BloomFilter) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, CompactionsGenerateMultipleFiles) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, ComparatorCheck) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, CustomComparator) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, DBOpen_Options) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, DeletionMarkers1) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, DeletionMarkers2) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, DestroyEmptyDir) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, DestroyOpenDB) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, Empty) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, EmptyKey) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, EmptyValue) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, Fflush_Issue474) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, FilesDeletedAfterCompaction) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, GetEncountersEmptyLevel) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, GetFromImmutableLayer) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, GetFromVersions) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, GetIdenticalSnapshots) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, GetLevel0Ordering) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, GetMemUsage) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, GetOrderedByLevels) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, GetPicksCorrectFile) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, GetSnapshot) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, HiddenValuesAreRemoved) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, IterEmpty) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, IterMulti) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, IterMultiWithDelete) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, IterSingle) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, IterSmallAndLargeMix) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, IterateOverEmptySnapshot) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, IteratorPinsRef) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, L0_CompactionBug_Issue44_a) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, L0_CompactionBug_Issue44_b) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, Locking) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, ManifestWriteError) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, ManualCompaction) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, MinorCompactionsHappen) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, MissingSSTFile) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, MultiThreaded) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, NoSpace) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, NonWritableFileSystem) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, OverlapInLevel0) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, PutDeleteGet) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, Randomized) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, ReadWrite) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, Recover) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, RecoverDuringMemtableCompaction) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, RecoverWithLargeLog) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, RecoveryWithEmptyLog) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, RepeatedWritesToSameKey) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, Snapshot) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, SparseMerge) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, StillReadSST) {$/;"	f	namespace:leveldb
TEST	db/db_test.cc	/^TEST(DBTest, WriteSyncError) {$/;"	f	namespace:leveldb
TEST	db/dbformat_test.cc	/^TEST(FormatTest, InternalKeyDebugString) {$/;"	f	namespace:leveldb
TEST	db/dbformat_test.cc	/^TEST(FormatTest, InternalKeyShortSeparator) {$/;"	f	namespace:leveldb
TEST	db/dbformat_test.cc	/^TEST(FormatTest, InternalKeyShortestSuccessor) {$/;"	f	namespace:leveldb
TEST	db/dbformat_test.cc	/^TEST(FormatTest, InternalKey_DecodeFromEmpty) {$/;"	f	namespace:leveldb
TEST	db/dbformat_test.cc	/^TEST(FormatTest, InternalKey_EncodeDecode) {$/;"	f	namespace:leveldb
TEST	db/dbformat_test.cc	/^TEST(FormatTest, ParsedInternalKeyDebugString) {$/;"	f	namespace:leveldb
TEST	db/fault_injection_test.cc	/^TEST(FaultInjectionTest, FaultTestNoLogReuse) {$/;"	f	namespace:leveldb
TEST	db/fault_injection_test.cc	/^TEST(FaultInjectionTest, FaultTestWithLogReuse) {$/;"	f	namespace:leveldb
TEST	db/filename_test.cc	/^TEST(FileNameTest, Construction) {$/;"	f	namespace:leveldb
TEST	db/filename_test.cc	/^TEST(FileNameTest, Parse) {$/;"	f	namespace:leveldb
TEST	db/log_test.cc	/^TEST(LogTest, AlignedEof) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, BadLength) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, BadLengthAtEndIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, BadRecordType) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ChecksumMismatch) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, Empty) { ASSERT_EQ("EOF", Read()); }$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ErrorJoinsRecords) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, Fragmentation) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ManyBlocks) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, MarginalTrailer) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, MarginalTrailer2) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, MissingLastIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, OpenForAppend) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, PartialLastIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, RandomRead) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadEnd) { CheckOffsetPastEndReturnsNoRecords(0); }$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadError) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadFourthFirstBlockTrailer) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadFourthLastBlock) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadFourthMiddleBlock) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadFourthOneOff) { CheckInitialOffsetRecord(20015, 3); }$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadFourthStart) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadInitialOffsetIntoBlockPadding) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadPastEnd) { CheckOffsetPastEndReturnsNoRecords(5); }$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadSecondOneOff) { CheckInitialOffsetRecord(1, 1); }$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadSecondStart) { CheckInitialOffsetRecord(10007, 1); }$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadSecondTenThousand) { CheckInitialOffsetRecord(10000, 1); }$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadStart) { CheckInitialOffsetRecord(0, 0); }$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadThirdOneOff) { CheckInitialOffsetRecord(10008, 2); }$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadThirdStart) { CheckInitialOffsetRecord(20014, 2); }$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ReadWrite) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, ShortTrailer) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, SkipIntoMultiRecord) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, TruncatedTrailingRecordIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, UnexpectedFirstType) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, UnexpectedFullType) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, UnexpectedLastType) {$/;"	f	namespace:leveldb::log
TEST	db/log_test.cc	/^TEST(LogTest, UnexpectedMiddleType) {$/;"	f	namespace:leveldb::log
TEST	db/recovery_test.cc	/^TEST(RecoveryTest, LargeManifestCompacted) {$/;"	f	namespace:leveldb
TEST	db/recovery_test.cc	/^TEST(RecoveryTest, LogFileReuse) {$/;"	f	namespace:leveldb
TEST	db/recovery_test.cc	/^TEST(RecoveryTest, ManifestMissing) {$/;"	f	namespace:leveldb
TEST	db/recovery_test.cc	/^TEST(RecoveryTest, ManifestReused) {$/;"	f	namespace:leveldb
TEST	db/recovery_test.cc	/^TEST(RecoveryTest, MultipleLogFiles) {$/;"	f	namespace:leveldb
TEST	db/recovery_test.cc	/^TEST(RecoveryTest, MultipleMemTables) {$/;"	f	namespace:leveldb
TEST	db/recovery_test.cc	/^TEST(RecoveryTest, NoLogFiles) {$/;"	f	namespace:leveldb
TEST	db/skiplist_test.cc	/^TEST(SkipTest, Concurrent1) { RunConcurrent(1); }$/;"	f	namespace:leveldb
TEST	db/skiplist_test.cc	/^TEST(SkipTest, Concurrent2) { RunConcurrent(2); }$/;"	f	namespace:leveldb
TEST	db/skiplist_test.cc	/^TEST(SkipTest, Concurrent3) { RunConcurrent(3); }$/;"	f	namespace:leveldb
TEST	db/skiplist_test.cc	/^TEST(SkipTest, Concurrent4) { RunConcurrent(4); }$/;"	f	namespace:leveldb
TEST	db/skiplist_test.cc	/^TEST(SkipTest, Concurrent5) { RunConcurrent(5); }$/;"	f	namespace:leveldb
TEST	db/skiplist_test.cc	/^TEST(SkipTest, ConcurrentWithoutThreads) {$/;"	f	namespace:leveldb
TEST	db/skiplist_test.cc	/^TEST(SkipTest, Empty) {$/;"	f	namespace:leveldb
TEST	db/skiplist_test.cc	/^TEST(SkipTest, InsertAndLookup) {$/;"	f	namespace:leveldb
TEST	db/version_edit_test.cc	/^TEST(VersionEditTest, EncodeDecode) {$/;"	f	namespace:leveldb
TEST	db/version_set_test.cc	/^TEST(AddBoundaryInputsTest, TestDisjoinFilePointers) {$/;"	f	namespace:leveldb
TEST	db/version_set_test.cc	/^TEST(AddBoundaryInputsTest, TestEmptyCompactionFiles) {$/;"	f	namespace:leveldb
TEST	db/version_set_test.cc	/^TEST(AddBoundaryInputsTest, TestEmptyFileSets) {$/;"	f	namespace:leveldb
TEST	db/version_set_test.cc	/^TEST(AddBoundaryInputsTest, TestEmptyLevelFiles) {$/;"	f	namespace:leveldb
TEST	db/version_set_test.cc	/^TEST(AddBoundaryInputsTest, TestNoBoundaryFiles) {$/;"	f	namespace:leveldb
TEST	db/version_set_test.cc	/^TEST(AddBoundaryInputsTest, TestOneBoundaryFiles) {$/;"	f	namespace:leveldb
TEST	db/version_set_test.cc	/^TEST(AddBoundaryInputsTest, TestTwoBoundaryFiles) {$/;"	f	namespace:leveldb
TEST	db/version_set_test.cc	/^TEST(FindFileTest, Empty) {$/;"	f	namespace:leveldb
TEST	db/version_set_test.cc	/^TEST(FindFileTest, Multiple) {$/;"	f	namespace:leveldb
TEST	db/version_set_test.cc	/^TEST(FindFileTest, MultipleNullBoundaries) {$/;"	f	namespace:leveldb
TEST	db/version_set_test.cc	/^TEST(FindFileTest, OverlapSequenceChecks) {$/;"	f	namespace:leveldb
TEST	db/version_set_test.cc	/^TEST(FindFileTest, OverlappingFiles) {$/;"	f	namespace:leveldb
TEST	db/version_set_test.cc	/^TEST(FindFileTest, Single) {$/;"	f	namespace:leveldb
TEST	db/write_batch_test.cc	/^TEST(WriteBatchTest, Append) {$/;"	f	namespace:leveldb
TEST	db/write_batch_test.cc	/^TEST(WriteBatchTest, ApproximateSize) {$/;"	f	namespace:leveldb
TEST	db/write_batch_test.cc	/^TEST(WriteBatchTest, Corruption) {$/;"	f	namespace:leveldb
TEST	db/write_batch_test.cc	/^TEST(WriteBatchTest, Empty) {$/;"	f	namespace:leveldb
TEST	db/write_batch_test.cc	/^TEST(WriteBatchTest, Multiple) {$/;"	f	namespace:leveldb
TEST	helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Basics) {$/;"	f	namespace:leveldb
TEST	helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, DBTest) {$/;"	f	namespace:leveldb
TEST	helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, LargeWrite) {$/;"	f	namespace:leveldb
TEST	helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Locks) {$/;"	f	namespace:leveldb
TEST	helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Misc) {$/;"	f	namespace:leveldb
TEST	helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, OverwriteOpenFile) {$/;"	f	namespace:leveldb
TEST	helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, ReadWrite) {$/;"	f	namespace:leveldb
TEST	issues/issue178_test.cc	/^TEST(Issue178, Test) {$/;"	f	namespace:__anon22
TEST	issues/issue200_test.cc	/^TEST(Issue200, Test) {$/;"	f	namespace:leveldb
TEST	issues/issue320_test.cc	/^TEST(Issue320, Test) {$/;"	f	namespace:leveldb
TEST	table/filter_block_test.cc	/^TEST(FilterBlockTest, EmptyBuilder) {$/;"	f	namespace:leveldb
TEST	table/filter_block_test.cc	/^TEST(FilterBlockTest, MultiChunk) {$/;"	f	namespace:leveldb
TEST	table/filter_block_test.cc	/^TEST(FilterBlockTest, SingleChunk) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(Harness, Empty) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(Harness, Randomized) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(Harness, RandomizedLongDB) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(Harness, SimpleEmptyKey) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(Harness, SimpleMulti) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(Harness, SimpleSingle) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(Harness, SimpleSpecialKey) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(Harness, ZeroRestartPointsInBlock) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(MemTableTest, Simple) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(TableTest, ApproximateOffsetOfCompressed) {$/;"	f	namespace:leveldb
TEST	table/table_test.cc	/^TEST(TableTest, ApproximateOffsetOfPlain) {$/;"	f	namespace:leveldb
TEST	util/arena_test.cc	/^TEST(ArenaTest, Empty) { Arena arena; }$/;"	f	namespace:leveldb
TEST	util/arena_test.cc	/^TEST(ArenaTest, Simple) {$/;"	f	namespace:leveldb
TEST	util/bloom_test.cc	/^TEST(BloomTest, EmptyFilter) {$/;"	f	namespace:leveldb
TEST	util/bloom_test.cc	/^TEST(BloomTest, Small) {$/;"	f	namespace:leveldb
TEST	util/bloom_test.cc	/^TEST(BloomTest, VaryingLengths) {$/;"	f	namespace:leveldb
TEST	util/cache_test.cc	/^TEST(CacheTest, EntriesArePinned) {$/;"	f	namespace:leveldb
TEST	util/cache_test.cc	/^TEST(CacheTest, Erase) {$/;"	f	namespace:leveldb
TEST	util/cache_test.cc	/^TEST(CacheTest, EvictionPolicy) {$/;"	f	namespace:leveldb
TEST	util/cache_test.cc	/^TEST(CacheTest, HeavyEntries) {$/;"	f	namespace:leveldb
TEST	util/cache_test.cc	/^TEST(CacheTest, HitAndMiss) {$/;"	f	namespace:leveldb
TEST	util/cache_test.cc	/^TEST(CacheTest, NewId) {$/;"	f	namespace:leveldb
TEST	util/cache_test.cc	/^TEST(CacheTest, Prune) {$/;"	f	namespace:leveldb
TEST	util/cache_test.cc	/^TEST(CacheTest, UseExceedsCacheSize) {$/;"	f	namespace:leveldb
TEST	util/cache_test.cc	/^TEST(CacheTest, ZeroSizeCache) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, EncodingOutput) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Fixed32) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Fixed64) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Strings) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Varint32) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Varint32Overflow) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Varint32Truncation) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Varint64) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Varint64Overflow) {$/;"	f	namespace:leveldb
TEST	util/coding_test.cc	/^TEST(Coding, Varint64Truncation) {$/;"	f	namespace:leveldb
TEST	util/crc32c_test.cc	/^TEST(CRC, Extend) {$/;"	f	namespace:leveldb::crc32c
TEST	util/crc32c_test.cc	/^TEST(CRC, Mask) {$/;"	f	namespace:leveldb::crc32c
TEST	util/crc32c_test.cc	/^TEST(CRC, StandardResults) {$/;"	f	namespace:leveldb::crc32c
TEST	util/crc32c_test.cc	/^TEST(CRC, Values) { ASSERT_NE(Value("a", 1), Value("foo", 3)); }$/;"	f	namespace:leveldb::crc32c
TEST	util/env_posix_test.cc	/^TEST(EnvPosixTest, TestCloseOnExecAppendableFile) {$/;"	f	namespace:leveldb
TEST	util/env_posix_test.cc	/^TEST(EnvPosixTest, TestCloseOnExecLockFile) {$/;"	f	namespace:leveldb
TEST	util/env_posix_test.cc	/^TEST(EnvPosixTest, TestCloseOnExecLogger) {$/;"	f	namespace:leveldb
TEST	util/env_posix_test.cc	/^TEST(EnvPosixTest, TestCloseOnExecRandomAccessFile) {$/;"	f	namespace:leveldb
TEST	util/env_posix_test.cc	/^TEST(EnvPosixTest, TestCloseOnExecSequentialFile) {$/;"	f	namespace:leveldb
TEST	util/env_posix_test.cc	/^TEST(EnvPosixTest, TestCloseOnExecWritableFile) {$/;"	f	namespace:leveldb
TEST	util/env_posix_test.cc	/^TEST(EnvPosixTest, TestOpenOnRead) {$/;"	f	namespace:leveldb
TEST	util/env_test.cc	/^TEST(EnvTest, ReadWrite) {$/;"	f	namespace:leveldb
TEST	util/env_windows_test.cc	/^TEST(EnvWindowsTest, TestOpenOnRead) {$/;"	f	namespace:leveldb
TEST	util/env_zone_test.cc	/^TEST(ZoneEnvTest, WriteRead) {$/;"	f	namespace:leveldb
TEST	util/hash_test.cc	/^TEST(HASH, SignedUnsignedIssue) {$/;"	f	namespace:leveldb
TEST	util/logging_test.cc	/^TEST(Logging, ConsumeDecimalNumberNoDigits) {$/;"	f	namespace:leveldb
TEST	util/logging_test.cc	/^TEST(Logging, ConsumeDecimalNumberOverflow) {$/;"	f	namespace:leveldb
TEST	util/logging_test.cc	/^TEST(Logging, ConsumeDecimalNumberRoundtrip) {$/;"	f	namespace:leveldb
TEST	util/logging_test.cc	/^TEST(Logging, ConsumeDecimalNumberRoundtripWithPadding) {$/;"	f	namespace:leveldb
TEST	util/logging_test.cc	/^TEST(Logging, NumberToString) {$/;"	f	namespace:leveldb
TEST	util/no_destructor_test.cc	/^TEST(NoDestructorTest, StackInstance) {$/;"	f	namespace:leveldb
TEST	util/no_destructor_test.cc	/^TEST(NoDestructorTest, StaticInstance) {$/;"	f	namespace:leveldb
TEST	util/status_test.cc	/^TEST(Status, MoveConstructor) {$/;"	f	namespace:leveldb
TEST	util/testharness.h	121;"	d
TEST_CompactMemTable	db/db_impl.cc	/^Status DBImpl::TEST_CompactMemTable() {$/;"	f	class:leveldb::DBImpl
TEST_CompactRange	db/db_impl.cc	/^void DBImpl::TEST_CompactRange(int level, const Slice* begin,$/;"	f	class:leveldb::DBImpl
TEST_MaxNextLevelOverlappingBytes	db/db_impl.cc	/^int64_t DBImpl::TEST_MaxNextLevelOverlappingBytes() {$/;"	f	class:leveldb::DBImpl
TEST_NewInternalIterator	db/db_impl.cc	/^Iterator* DBImpl::TEST_NewInternalIterator() {$/;"	f	class:leveldb::DBImpl
THREAD_ANNOTATION_ATTRIBUTE__	port/thread_annotations.h	16;"	d
THREAD_ANNOTATION_ATTRIBUTE__	port/thread_annotations.h	18;"	d
Table	db/memtable.h	/^  typedef SkipList<const char*, KeyComparator> Table;$/;"	t	class:leveldb::MemTable
Table	include/leveldb/table.h	/^  explicit Table(Rep* rep) : rep_(rep) {}$/;"	f	class:leveldb::Table
Table	include/leveldb/table.h	/^class LEVELDB_EXPORT Table {$/;"	c	namespace:leveldb
TableAndFile	db/table_cache.cc	/^struct TableAndFile {$/;"	s	namespace:leveldb	file:
TableBuilder	include/leveldb/table_builder.h	/^class LEVELDB_EXPORT TableBuilder {$/;"	c	namespace:leveldb
TableBuilder	table/table_builder.cc	/^TableBuilder::TableBuilder(const Options& options, WritableFile* file)$/;"	f	class:leveldb::TableBuilder
TableCache	db/table_cache.cc	/^TableCache::TableCache(const std::string& dbname, const Options& options,$/;"	f	class:leveldb::TableCache
TableCache	db/table_cache.h	/^class TableCache {$/;"	c	namespace:leveldb
TableCacheSize	db/db_impl.cc	/^static int TableCacheSize(const Options& sanitized_options) {$/;"	f	namespace:leveldb
TableConstructor	table/table_test.cc	/^  TableConstructor(const Comparator* cmp)$/;"	f	class:leveldb::TableConstructor
TableConstructor	table/table_test.cc	/^class TableConstructor : public Constructor {$/;"	c	namespace:leveldb	file:
TableFileName	db/filename.cc	/^std::string TableFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
TableInfo	db/repair.cc	/^  struct TableInfo {$/;"	s	class:leveldb::__anon37::Repairer	file:
TableTest	table/table_test.cc	/^class TableTest {};$/;"	c	namespace:leveldb	file:
Tag	db/version_edit.cc	/^enum Tag {$/;"	g	namespace:leveldb	file:
TargetFileSize	db/version_set.cc	/^static size_t TargetFileSize(const Options* options) {$/;"	f	namespace:leveldb
TempFileName	db/filename.cc	/^std::string TempFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
Test	table/table_test.cc	/^  void Test(Random* rnd) {$/;"	f	class:leveldb::Harness
Test	util/testharness.cc	/^struct Test {$/;"	s	namespace:leveldb::test::__anon14	file:
TestArgs	table/table_test.cc	/^struct TestArgs {$/;"	s	namespace:leveldb	file:
TestBackwardScan	table/table_test.cc	/^  void TestBackwardScan(const std::vector<std::string>& keys,$/;"	f	class:leveldb::Harness
TestCloseOnExecHelperMain	util/env_posix_test.cc	/^int TestCloseOnExecHelperMain(char* pid_arg) {$/;"	f	namespace:__anon13
TestEncodeDecode	db/version_edit_test.cc	/^static void TestEncodeDecode(const VersionEdit& edit) {$/;"	f	namespace:leveldb
TestEnv	db/db_test.cc	/^  explicit TestEnv(Env* base) : EnvWrapper(base), ignore_dot_files_(false) {}$/;"	f	class:leveldb::TestEnv
TestEnv	db/db_test.cc	/^class TestEnv : public EnvWrapper {$/;"	c	namespace:leveldb	file:
TestForwardScan	table/table_test.cc	/^  void TestForwardScan(const std::vector<std::string>& keys,$/;"	f	class:leveldb::Harness
TestHashFilter	table/filter_block_test.cc	/^class TestHashFilter : public FilterPolicy {$/;"	c	namespace:leveldb	file:
TestKey	db/dbformat_test.cc	/^static void TestKey(const std::string& key, uint64_t seq, ValueType vt) {$/;"	f	namespace:leveldb
TestRandomAccess	table/table_test.cc	/^  void TestRandomAccess(Random* rnd, const std::vector<std::string>& keys,$/;"	f	class:leveldb::Harness
TestState	db/skiplist_test.cc	/^  explicit TestState(int s)$/;"	f	class:leveldb::TestState
TestState	db/skiplist_test.cc	/^class TestState {$/;"	c	namespace:leveldb	file:
TestType	table/table_test.cc	/^enum TestType { TABLE_TEST, BLOCK_TEST, MEMTABLE_TEST, DB_TEST };$/;"	g	namespace:leveldb	file:
TestWritableFile	db/fault_injection_test.cc	/^TestWritableFile::TestWritableFile(const FileState& state, WritableFile* f,$/;"	f	class:leveldb::TestWritableFile
TestWritableFile	db/fault_injection_test.cc	/^class TestWritableFile : public WritableFile {$/;"	c	namespace:leveldb	file:
Tester	util/testharness.h	/^  Tester(const char* f, int l) : ok_(true), fname_(f), line_(l) {}$/;"	f	class:leveldb::test::Tester
Tester	util/testharness.h	/^class Tester {$/;"	c	namespace:leveldb::test
ThreadArg	benchmarks/db_bench.cc	/^  struct ThreadArg {$/;"	s	class:leveldb::Benchmark	file:
ThreadBody	benchmarks/db_bench.cc	/^  static void ThreadBody(void* v) {$/;"	f	class:leveldb::Benchmark	file:
ThreadState	benchmarks/db_bench.cc	/^  ThreadState(int index) : tid(index), rand(1000 + index), shared(nullptr) {}$/;"	f	struct:leveldb::__anon4::ThreadState
ThreadState	benchmarks/db_bench.cc	/^struct ThreadState {$/;"	s	namespace:leveldb::__anon4	file:
TmpDir	util/testharness.cc	/^std::string TmpDir() {$/;"	f	namespace:leveldb::test
ToString	include/leveldb/slice.h	/^  std::string ToString() const { return std::string(data_, size_); }$/;"	f	class:leveldb::Slice
ToString	table/table_test.cc	/^  std::string ToString(const Iterator* it) {$/;"	f	class:leveldb::Harness
ToString	table/table_test.cc	/^  std::string ToString(const KVMap& data, const KVMap::const_iterator& it) {$/;"	f	class:leveldb::Harness
ToString	table/table_test.cc	/^  std::string ToString(const KVMap& data,$/;"	f	class:leveldb::Harness
ToString	util/histogram.cc	/^std::string Histogram::ToString() const {$/;"	f	class:leveldb::Histogram
ToString	util/status.cc	/^std::string Status::ToString() const {$/;"	f	class:leveldb::Status
TotalCharge	util/cache.cc	/^  size_t TotalCharge() const {$/;"	f	class:leveldb::__anon16::LRUCache
TotalFileSize	db/version_set.cc	/^static int64_t TotalFileSize(const std::vector<FileMetaData*>& files) {$/;"	f	namespace:leveldb
TotalTableFiles	db/db_test.cc	/^  int TotalTableFiles() {$/;"	f	class:leveldb::DBTest
TrimSpace	benchmarks/db_bench.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon4
TrimSpace	benchmarks/db_bench_sqlite3.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon3
TrimSpace	benchmarks/db_bench_tree_db.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon2
Truncate	db/fault_injection_test.cc	/^Status Truncate(const std::string& filename, uint64_t length) {$/;"	f	namespace:leveldb::__anon40
Truncate	helpers/memenv/memenv.cc	/^  void Truncate() {$/;"	f	class:leveldb::__anon5::FileState
TryReopen	db/corruption_test.cc	/^  Status TryReopen() {$/;"	f	class:leveldb::CorruptionTest
TryReopen	db/db_test.cc	/^  Status TryReopen(Options* options) {$/;"	f	class:leveldb::DBTest
TwoLevelIterator	table/two_level_iterator.cc	/^TwoLevelIterator::TwoLevelIterator(Iterator* index_iter,$/;"	f	class:leveldb::__anon30::TwoLevelIterator
TwoLevelIterator	table/two_level_iterator.cc	/^class TwoLevelIterator : public Iterator {$/;"	c	namespace:leveldb::__anon30	file:
UNLOCK_FUNCTION	port/port_stdcxx.h	/^  void Unlock() UNLOCK_FUNCTION() { mu_.unlock(); }$/;"	f	class:leveldb::port::Mutex
UNLOCK_FUNCTION	port/thread_annotations.h	89;"	d
UNLOCK_FUNCTION	util/mutexlock.h	/^  ~MutexLock() UNLOCK_FUNCTION() { this->mu_->Unlock(); }$/;"	f	class:leveldb::MutexLock
Uniform	util/random.h	/^  uint32_t Uniform(int n) { return Next() % n; }$/;"	f	class:leveldb::Random
UnlockFile	util/zns/env_zone_temp.cc	/^		virtual Status UnlockFile(FileLock* lock)$/;"	f	class:leveldb::__anon7::ZoneEnv
Unmask	util/crc32c.h	/^inline uint32_t Unmask(uint32_t masked_crc) {$/;"	f	namespace:leveldb::crc32c
Unref	db/memtable.h	/^  void Unref() {$/;"	f	class:leveldb::MemTable
Unref	db/version_set.cc	/^void Version::Unref() {$/;"	f	class:leveldb::Version
Unref	helpers/memenv/memenv.cc	/^  void Unref() {$/;"	f	class:leveldb::__anon5::FileState
Unref	util/cache.cc	/^void LRUCache::Unref(LRUHandle* e) {$/;"	f	class:leveldb::__anon16::LRUCache
Unref	util/zns/env_zone_temp.cc	/^		void Unref()$/;"	f	class:leveldb::__anon7::ZoneFile
UnrefEntry	db/table_cache.cc	/^static void UnrefEntry(void* arg1, void* arg2) {$/;"	f	namespace:leveldb
UntrackFile	db/fault_injection_test.cc	/^void FaultInjectionTestEnv::UntrackFile(const std::string& f) {$/;"	f	class:leveldb::FaultInjectionTestEnv
Update	table/iterator_wrapper.h	/^  void Update() {$/;"	f	class:leveldb::IteratorWrapper
UpdateStats	db/version_set.cc	/^bool Version::UpdateStats(const GetStats& stats) {$/;"	f	class:leveldb::Version
Usage	db/leveldbutil.cc	/^static void Usage() {$/;"	f	file:
VAL_EXPECT_ERROR	db/fault_injection_test.cc	/^  enum ExpectedVerifResult { VAL_EXPECT_NO_ERROR, VAL_EXPECT_ERROR };$/;"	e	enum:leveldb::FaultInjectionTest::ExpectedVerifResult	file:
VAL_EXPECT_NO_ERROR	db/fault_injection_test.cc	/^  enum ExpectedVerifResult { VAL_EXPECT_NO_ERROR, VAL_EXPECT_ERROR };$/;"	e	enum:leveldb::FaultInjectionTest::ExpectedVerifResult	file:
Valid	db/skiplist.h	/^inline bool SkipList<Key, Comparator>::Iterator::Valid() const {$/;"	f	class:leveldb::SkipList::Iterator
Valid	table/iterator_wrapper.h	/^  bool Valid() const { return valid_; }$/;"	f	class:leveldb::IteratorWrapper
Value	db/corruption_test.cc	/^  Slice Value(int k, std::string* storage) {$/;"	f	class:leveldb::CorruptionTest
Value	db/fault_injection_test.cc	/^  Slice Value(int k, std::string* storage) const {$/;"	f	class:leveldb::FaultInjectionTest
Value	util/crc32c.h	/^inline uint32_t Value(const char* data, size_t n) { return Extend(0, data, n); }$/;"	f	namespace:leveldb::crc32c
ValueType	db/dbformat.h	/^enum ValueType { kTypeDeletion = 0x0, kTypeValue = 0x1 };$/;"	g	namespace:leveldb
VarintLength	util/coding.cc	/^int VarintLength(uint64_t v) {$/;"	f	namespace:leveldb
Verify	db/fault_injection_test.cc	/^  Status Verify(int start_idx, int num_vals,$/;"	f	class:leveldb::FaultInjectionTest
Version	db/version_set.h	/^  explicit Version(VersionSet* vset)$/;"	f	class:leveldb::Version
Version	db/version_set.h	/^class Version {$/;"	c	namespace:leveldb
VersionEdit	db/version_edit.h	/^  VersionEdit() { Clear(); }$/;"	f	class:leveldb::VersionEdit
VersionEdit	db/version_edit.h	/^class VersionEdit {$/;"	c	namespace:leveldb
VersionEditPrinter	db/dumpfile.cc	/^static void VersionEditPrinter(uint64_t pos, Slice record, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon35
VersionEditTest	db/version_edit_test.cc	/^class VersionEditTest {};$/;"	c	namespace:leveldb	file:
VersionSet	db/version_set.cc	/^VersionSet::VersionSet(const std::string& dbname, const Options* options,$/;"	f	class:leveldb::VersionSet
VersionSet	db/version_set.h	/^class VersionSet {$/;"	c	namespace:leveldb
Wait	port/port_stdcxx.h	/^  void Wait() {$/;"	f	class:leveldb::port::CondVar
WalCheckpoint	benchmarks/db_bench_sqlite3.cc	/^inline static void WalCheckpoint(sqlite3* db_) {$/;"	f	file:
WindowsEnv	util/env_windows.cc	/^WindowsEnv::WindowsEnv()$/;"	f	class:leveldb::__anon11::WindowsEnv
WindowsEnv	util/env_windows.cc	/^class WindowsEnv : public Env {$/;"	c	namespace:leveldb::__anon11	file:
WindowsError	util/env_windows.cc	/^Status WindowsError(const std::string& context, DWORD error_code) {$/;"	f	namespace:leveldb::__anon11
WindowsFileLock	util/env_windows.cc	/^  WindowsFileLock(ScopedHandle handle, std::string filename)$/;"	f	class:leveldb::__anon11::WindowsFileLock
WindowsFileLock	util/env_windows.cc	/^class WindowsFileLock : public FileLock {$/;"	c	namespace:leveldb::__anon11	file:
WindowsLogger	util/windows_logger.h	/^  explicit WindowsLogger(std::FILE* fp) : fp_(fp) { assert(fp != nullptr); }$/;"	f	class:leveldb::final
WindowsMmapReadableFile	util/env_windows.cc	/^  WindowsMmapReadableFile(std::string filename, char* mmap_base, size_t length,$/;"	f	class:leveldb::__anon11::WindowsMmapReadableFile
WindowsMmapReadableFile	util/env_windows.cc	/^class WindowsMmapReadableFile : public RandomAccessFile {$/;"	c	namespace:leveldb::__anon11	file:
WindowsRandomAccessFile	util/env_windows.cc	/^  WindowsRandomAccessFile(std::string filename, ScopedHandle handle)$/;"	f	class:leveldb::__anon11::WindowsRandomAccessFile
WindowsRandomAccessFile	util/env_windows.cc	/^class WindowsRandomAccessFile : public RandomAccessFile {$/;"	c	namespace:leveldb::__anon11	file:
WindowsSequentialFile	util/env_windows.cc	/^  WindowsSequentialFile(std::string filename, ScopedHandle handle)$/;"	f	class:leveldb::__anon11::WindowsSequentialFile
WindowsSequentialFile	util/env_windows.cc	/^class WindowsSequentialFile : public SequentialFile {$/;"	c	namespace:leveldb::__anon11	file:
WindowsWritableFile	util/env_windows.cc	/^  WindowsWritableFile(std::string filename, ScopedHandle handle)$/;"	f	class:leveldb::__anon11::WindowsWritableFile
WindowsWritableFile	util/env_windows.cc	/^class WindowsWritableFile : public WritableFile {$/;"	c	namespace:leveldb::__anon11	file:
WritableFile	include/leveldb/env.h	/^class LEVELDB_EXPORT WritableFile {$/;"	c	namespace:leveldb
WritableFileClosed	db/fault_injection_test.cc	/^void FaultInjectionTestEnv::WritableFileClosed(const FileState& state) {$/;"	f	class:leveldb::FaultInjectionTestEnv
WritableFileImpl	helpers/memenv/memenv.cc	/^  WritableFileImpl(FileState* file) : file_(file) { file_->Ref(); }$/;"	f	class:leveldb::__anon5::WritableFileImpl
WritableFileImpl	helpers/memenv/memenv.cc	/^class WritableFileImpl : public WritableFile {$/;"	c	namespace:leveldb::__anon5	file:
WritableFileImpl	util/zns/env_zone_temp.cc	/^		WritableFileImpl(ZoneFile* file) : file_(file)$/;"	f	class:leveldb::__anon7::ZoneWritableFile
Write	benchmarks/db_bench_sqlite3.cc	/^  void Write(bool write_sync, Order order, DBState state, int num_entries,$/;"	f	class:leveldb::Benchmark
Write	benchmarks/db_bench_tree_db.cc	/^  void Write(bool sync, Order order, DBState state, int num_entries,$/;"	f	class:leveldb::Benchmark	file:
Write	db/db_impl.cc	/^Status DBImpl::Write(const WriteOptions& options, WriteBatch* updates) {$/;"	f	class:leveldb::DBImpl
Write	db/log_test.cc	/^  void Write(const std::string& msg) {$/;"	f	class:leveldb::log::LogTest
Write	util/env_zone.cc	/^        ssize_t Write(string fname, const char* data, size_t size)$/;"	f	class:leveldb::__anon21::Zone_Coordinator
Write	util/zns/env_zone_cp.cc	/^		size_t Write(unsigned int level, const char* data, size_t size)$/;"	f	class:leveldb::__anon8::Zone_Coordinator
Write	util/zns/env_zone_temp.cc	/^		size_t Write(unsigned int level, const char* data, size_t size)$/;"	f	class:leveldb::__anon7::Z_interface
Write	util/zns/env_zone_temp.cc	/^		unsigned int Write(struct zns_share_info *zone_info, const char* data, size_t size)$/;"	f	class:leveldb::__anon7::Zone
WriteBatch	db/write_batch.cc	/^WriteBatch::WriteBatch() { Clear(); }$/;"	f	class:leveldb::WriteBatch
WriteBatch	include/leveldb/write_batch.h	/^class LEVELDB_EXPORT WriteBatch {$/;"	c	namespace:leveldb
WriteBatchInternal	db/write_batch_internal.h	/^class WriteBatchInternal {$/;"	c	namespace:leveldb
WriteBatchItemPrinter	db/dumpfile.cc	/^class WriteBatchItemPrinter : public WriteBatch::Handler {$/;"	c	namespace:leveldb::__anon35	file:
WriteBatchPrinter	db/dumpfile.cc	/^static void WriteBatchPrinter(uint64_t pos, Slice record, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon35
WriteBatchTest	db/write_batch_test.cc	/^class WriteBatchTest {};$/;"	c	namespace:leveldb	file:
WriteBlock	table/table_builder.cc	/^void TableBuilder::WriteBlock(BlockBuilder* block, BlockHandle* handle) {$/;"	f	class:leveldb::TableBuilder
WriteBuffer	util/env_zone.cc	/^        WriteBuffer() {$/;"	f	class:leveldb::__anon21::WriteBuffer
WriteBuffer	util/env_zone.cc	/^class WriteBuffer {$/;"	c	namespace:leveldb::__anon21	file:
WriteBufferSize	util/env_zone.cc	/^		constexpr const size_t WriteBufferSize = 512;$/;"	m	namespace:leveldb::__anon21	file:
WriteDescriptor	db/repair.cc	/^  Status WriteDescriptor() {$/;"	f	class:leveldb::__anon37::Repairer	file:
WriteInitialOffsetLog	db/log_test.cc	/^  void WriteInitialOffsetLog() {$/;"	f	class:leveldb::log::LogTest
WriteLevel0Table	db/db_impl.cc	/^Status DBImpl::WriteLevel0Table(MemTable* mem, VersionEdit* edit,$/;"	f	class:leveldb::DBImpl
WriteOptions	include/leveldb/options.h	/^struct LEVELDB_EXPORT WriteOptions {$/;"	s	namespace:leveldb
WriteRandom	benchmarks/db_bench.cc	/^  void WriteRandom(ThreadState* thread) { DoWrite(thread, false); }$/;"	f	class:leveldb::Benchmark	file:
WriteRawBlock	table/table_builder.cc	/^void TableBuilder::WriteRawBlock(const Slice& block_contents,$/;"	f	class:leveldb::TableBuilder
WriteSeq	benchmarks/db_bench.cc	/^  void WriteSeq(ThreadState* thread) { DoWrite(thread, true); }$/;"	f	class:leveldb::Benchmark	file:
WriteSnapshot	db/version_set.cc	/^Status VersionSet::WriteSnapshot(log::Writer* log) {$/;"	f	class:leveldb::VersionSet
WriteStep	db/skiplist_test.cc	/^  void WriteStep(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest
WriteStringToFile	util/env.cc	/^Status WriteStringToFile(Env* env, const Slice& data,$/;"	f	namespace:leveldb
WriteStringToFileSync	util/env.cc	/^Status WriteStringToFileSync(Env* env, const Slice& data,$/;"	f	namespace:leveldb
WriteToFile	benchmarks/db_bench.cc	/^  static void WriteToFile(void* arg, const char* buf, int n) {$/;"	f	class:leveldb::Benchmark	file:
WriteUnbuffered	util/env_posix.cc	/^  Status WriteUnbuffered(const char* data, size_t size) {$/;"	f	class:leveldb::__anon19::final	file:
WriteUnbuffered	util/env_windows.cc	/^  Status WriteUnbuffered(const char* data, size_t size) {$/;"	f	class:leveldb::__anon11::WindowsWritableFile	file:
WriteUnbuffered	util/env_zone.cc	/^        Status WriteUnbuffered(const char* data, size_t size)$/;"	f	class:leveldb::__anon21::final	file:
WriteUnbuffered	util/zns/env_zone_cp.cc	/^		Status WriteUnbuffered(const char* data, size_t size)$/;"	f	class:leveldb::__anon8::ZoneFile	file:
WriteUnbuffered	util/zns/env_zone_temp.cc	/^		Status WriteUnbuffered(const char* data, size_t wsize)$/;"	f	class:leveldb::__anon7::ZoneFile	file:
Writer	db/db_impl.cc	/^  explicit Writer(port::Mutex* mu)$/;"	f	struct:leveldb::DBImpl::Writer
Writer	db/db_impl.cc	/^struct DBImpl::Writer {$/;"	s	class:leveldb::DBImpl	file:
Writer	db/log_writer.cc	/^Writer::Writer(WritableFile* dest) : dest_(dest), block_offset_(0) {$/;"	f	class:leveldb::log::Writer
Writer	db/log_writer.cc	/^Writer::Writer(WritableFile* dest, uint64_t dest_length)$/;"	f	class:leveldb::log::Writer
Writer	db/log_writer.h	/^class Writer {$/;"	c	namespace:leveldb::log
WrittenBytes	db/log_test.cc	/^  size_t WrittenBytes() const { return dest_.contents_.size(); }$/;"	f	class:leveldb::log::LogTest
ZNS_BLOCK_SIZE	util/env_zone.cc	43;"	d	file:
ZNS_BLOCK_SIZE	util/zns/env_zone_cp.cc	45;"	d	file:
ZNS_BLOCK_SIZE	util/zns/env_zone_temp.cc	11;"	d	file:
ZONEDEV	util/zns/env_zone_temp.cc	10;"	d	file:
ZONE_DEV	util/env_zone.cc	42;"	d	file:
ZONE_DEV	util/zns/env_zone_cp.cc	44;"	d	file:
Z_interface	util/zns/env_zone_temp.cc	/^		Z_interface()$/;"	f	class:leveldb::__anon7::Z_interface
Z_interface	util/zns/env_zone_temp.cc	/^class Z_interface {$/;"	c	namespace:leveldb::__anon7	file:
Zone	util/zns/env_zone_cp.cc	/^        Zone(unsigned int zone_number, unsigned long long int write_point, unsigned int size)$/;"	f	class:leveldb::__anon8::Zone
Zone	util/zns/env_zone_cp.cc	/^class Zone$/;"	c	namespace:leveldb::__anon8	file:
Zone	util/zns/env_zone_temp.cc	/^		Zone(unsigned int zone_number, unsigned long long init_wp) : number(zone_number), wp(init_wp)$/;"	f	class:leveldb::__anon7::Zone
Zone	util/zns/env_zone_temp.cc	/^class Zone$/;"	c	namespace:leveldb::__anon7	file:
ZoneEnv	util/env_zone.cc	/^ZoneEnv::ZoneEnv()$/;"	f	class:leveldb::__anon21::ZoneEnv
ZoneEnv	util/env_zone.cc	/^class ZoneEnv : public Env$/;"	c	namespace:leveldb::__anon21	file:
ZoneEnv	util/zns/env_zone_cp.cc	/^ZoneEnv::ZoneEnv()$/;"	f	class:leveldb::__anon8::ZoneEnv
ZoneEnv	util/zns/env_zone_cp.cc	/^class ZoneEnv : public Env$/;"	c	namespace:leveldb::__anon8	file:
ZoneEnv	util/zns/env_zone_temp.cc	/^ZoneEnv::ZoneEnv()$/;"	f	class:leveldb::__anon7::ZoneEnv
ZoneEnv	util/zns/env_zone_temp.cc	/^class ZoneEnv : public Env$/;"	c	namespace:leveldb::__anon7	file:
ZoneEnvTest	util/env_zone_test.cc	/^  ZoneEnvTest()$/;"	f	class:leveldb::ZoneEnvTest
ZoneEnvTest	util/env_zone_test.cc	/^class ZoneEnvTest {$/;"	c	namespace:leveldb	file:
ZoneError	util/env_zone.cc	/^		static Status ZoneError(const std::string& context, int err_number) {$/;"	f	namespace:leveldb::__anon21
ZoneError	util/zns/env_zone_cp.cc	/^		static Status ZoneError(const std::string& context, int err_number) {$/;"	f	namespace:leveldb::__anon8
ZoneError	util/zns/env_zone_temp.cc	/^		static Status ZoneError(const std::string& context, int err_number) {$/;"	f	namespace:leveldb::__anon7
ZoneFile	util/zns/env_zone_cp.cc	/^		ZoneFile(Zone_Coordinator *coordinator, uint64_t level, string filename)$/;"	f	class:leveldb::__anon8::ZoneFile
ZoneFile	util/zns/env_zone_cp.cc	/^class ZoneFile$/;"	c	namespace:leveldb::__anon8	file:
ZoneFile	util/zns/env_zone_temp.cc	/^		ZoneFile(Z_interface *zone_interface, uint64_t level, string filename)$/;"	f	class:leveldb::__anon7::ZoneFile
ZoneFile	util/zns/env_zone_temp.cc	/^class ZoneFile$/;"	c	namespace:leveldb::__anon7	file:
ZoneFileLock	util/env_zone.cc	/^class ZoneFileLock : public FileLock$/;"	c	namespace:leveldb::__anon21	file:
ZoneFileLock	util/zns/env_zone_temp.cc	/^class ZoneFileLock : public FileLock$/;"	c	namespace:leveldb::__anon7	file:
ZoneFileMap	util/zns/env_zone_temp.cc	/^        typedef map<std::string, ZoneFile*> ZoneFileMap;$/;"	t	class:leveldb::__anon7::ZoneEnv	file:
ZoneLockTable	util/env_zone.cc	/^class ZoneLockTable$/;"	c	namespace:leveldb::__anon21	file:
ZoneLockTable	util/zns/env_zone_temp.cc	/^class ZoneLockTable$/;"	c	namespace:leveldb::__anon7	file:
ZoneRandomAccessFile	util/env_zone.cc	/^	    ZoneRandomAccessFile(Zone_Coordinator* coordinator, vector<File_Info*>& finfo)$/;"	f	class:leveldb::__anon21::final
ZoneRandomAccessFile	util/zns/env_zone_temp.cc	/^		explicit ZoneRandomAccessFile(ZoneFile* file) : file_(file)$/;"	f	class:leveldb::__anon7::ZoneRandomAccessFile
ZoneRandomAccessFile	util/zns/env_zone_temp.cc	/^class ZoneRandomAccessFile : public RandomAccessFile$/;"	c	namespace:leveldb::__anon7	file:
ZoneSequentialFile	util/env_zone.cc	/^	    ZoneSequentialFile(Zone_Coordinator *coordinator, vector<File_Info*>& finfo)$/;"	f	class:leveldb::__anon21::final
ZoneSequentialFile	util/zns/env_zone_cp.cc	/^		explicit ZoneSequentialFile(ZoneFile* file) : file_(file), pos_(0) {$/;"	f	class:leveldb::__anon8::final
ZoneSequentialFile	util/zns/env_zone_temp.cc	/^		explicit ZoneSequentialFile(ZoneFile* file) : file_(file), pos_(0)$/;"	f	class:leveldb::__anon7::ZoneSequentialFile
ZoneSequentialFile	util/zns/env_zone_temp.cc	/^class ZoneSequentialFile : public SequentialFile$/;"	c	namespace:leveldb::__anon7	file:
ZoneWritableFile	util/env_zone.cc	/^		ZoneWritableFile(Zone_Coordinator *coordinator, string fname)$/;"	f	class:leveldb::__anon21::final
ZoneWritableFile	util/zns/env_zone_cp.cc	/^		ZoneWritableFile(Zone_Coordinator *coordinator, Zone* zone) : coordinator_(coordinator), zone_(zone) {$/;"	f	class:leveldb::__anon8::final
ZoneWritableFile	util/zns/env_zone_temp.cc	/^class ZoneWritableFile : public WritableFile$/;"	c	namespace:leveldb::__anon7	file:
Zone_Coordinator	util/env_zone.cc	/^        Zone_Coordinator(map<string, vector<File_Info*>>& f2z_map)$/;"	f	class:leveldb::__anon21::Zone_Coordinator
Zone_Coordinator	util/env_zone.cc	/^class Zone_Coordinator {$/;"	c	namespace:leveldb::__anon21	file:
Zone_Coordinator	util/zns/env_zone_cp.cc	/^        Zone_Coordinator(map<string, Zone*>& f2z_map, multimap<unsigned int, unsigned int>& l2z_map)$/;"	f	class:leveldb::__anon8::Zone_Coordinator
Zone_Coordinator	util/zns/env_zone_cp.cc	/^class Zone_Coordinator {$/;"	c	namespace:leveldb::__anon8	file:
Zone_alloc	util/env_zone.cc	/^        ssize_t Zone_alloc()$/;"	f	class:leveldb::__anon21::Zone_Coordinator	file:
Zone_alloc	util/zns/env_zone_cp.cc	/^		unsigned int Zone_alloc()$/;"	f	class:leveldb::__anon8::Zone_Coordinator	file:
Zone_alloc	util/zns/env_zone_temp.cc	/^		unsigned int Zone_alloc()$/;"	f	class:leveldb::__anon7::Z_interface	file:
Zone_device_init	util/env_zone.cc	/^		void Zone_device_init()$/;"	f	class:leveldb::__anon21::Zone_Coordinator	file:
Zone_init	util/zns/env_zone_temp.cc	/^		void Zone_init()$/;"	f	class:leveldb::__anon7::Z_interface	file:
_ASM_GENERIC_INT_LL64_H	zns_ctl/controller.h	59;"	d
__aligned_be64	zns_ctl/controller.h	55;"	d
__aligned_le64	zns_ctl/controller.h	56;"	d
__aligned_u64	zns_ctl/controller.h	54;"	d
__be16	zns_ctl/controller.h	/^typedef __u16 __bitwise __be16;$/;"	t
__be32	zns_ctl/controller.h	/^typedef __u32 __bitwise __be32;$/;"	t
__be64	zns_ctl/controller.h	/^typedef __u64 __bitwise __be64;$/;"	t
__bitwise	zns_ctl/controller.h	36;"	d
__bitwise__	zns_ctl/controller.h	32;"	d
__bitwise__	zns_ctl/controller.h	34;"	d
__force	zns_ctl/controller.h	39;"	d
__force	zns_ctl/controller.h	41;"	d
__le16	zns_ctl/controller.h	/^typedef __u16 __bitwise __le16;$/;"	t
__le32	zns_ctl/controller.h	/^typedef __u32 __bitwise __le32;$/;"	t
__le64	zns_ctl/controller.h	/^typedef __u64 __bitwise __le64;$/;"	t
__s16	zns_ctl/controller.h	/^typedef __signed__ short __s16;$/;"	t
__s32	zns_ctl/controller.h	/^typedef __signed__ int __s32;$/;"	t
__s64	zns_ctl/controller.h	/^__extension__ typedef __signed__ long long __s64;$/;"	t
__s64	zns_ctl/controller.h	/^typedef __signed__ long long __s64;$/;"	t
__s8	zns_ctl/controller.h	/^typedef __signed__ char __s8;$/;"	t
__sum16	zns_ctl/controller.h	/^typedef __u16 __bitwise __sum16;$/;"	t
__u16	zns_ctl/controller.h	/^typedef unsigned short __u16;$/;"	t
__u32	zns_ctl/controller.h	/^typedef unsigned int __u32;$/;"	t
__u64	zns_ctl/controller.h	/^__extension__ typedef unsigned long long __u64;$/;"	t
__u64	zns_ctl/controller.h	/^typedef unsigned long long __u64;$/;"	t
__u8	zns_ctl/controller.h	/^typedef unsigned char __u8;$/;"	t
__wsum	zns_ctl/controller.h	/^typedef __u32 __bitwise __wsum;$/;"	t
a	util/no_destructor_test.cc	/^  uint32_t a;$/;"	m	struct:leveldb::__anon9::DoNotDestruct	file:
acl	zns_ctl/controller.h	/^	__u8			acl;$/;"	m	struct:nvme_id_ctrl
acquires_allowed_	util/env_posix.cc	/^  std::atomic<int> acquires_allowed_;$/;"	m	class:leveldb::__anon19::Limiter	file:
acquires_allowed_	util/env_windows.cc	/^  std::atomic<int> acquires_allowed_;$/;"	m	class:leveldb::__anon11::Limiter	file:
active_power	zns_ctl/controller.h	/^	__le16			active_power;$/;"	m	struct:nvme_id_power_state
active_work_scale	zns_ctl/controller.h	/^	__u8			active_work_scale;$/;"	m	struct:nvme_id_power_state
activezones	zns_ctl/controller.h	/^	__u32			activezones;$/;"	m	struct:nvme_id_ns
activezones	zns_ctl/controller.h	/^	__u32 activezones;$/;"	m	struct:zns_share_info
acwu	zns_ctl/controller.h	/^	__le16			acwu;$/;"	m	struct:nvme_id_ctrl
added_files	db/version_set.cc	/^    FileSet* added_files;$/;"	m	struct:leveldb::VersionSet::Builder::LevelState	file:
addr	zns_ctl/controller.h	/^	__u64	addr;$/;"	m	struct:nvme_passthru_cmd
addr	zns_ctl/controller.h	/^	__u64	addr;$/;"	m	struct:nvme_user_io
aerl	zns_ctl/controller.h	/^	__u8			aerl;$/;"	m	struct:nvme_id_ctrl
all_files_	db/version_set_test.cc	/^  std::vector<FileMetaData*> all_files_;$/;"	m	class:leveldb::AddBoundaryInputsTest	file:
alloc	util/zns/env_zone_temp.cc	/^		bool alloc;$/;"	m	class:leveldb::__anon7::Zone	file:
alloc_bytes_remaining_	util/arena.h	/^  size_t alloc_bytes_remaining_;$/;"	m	class:leveldb::Arena
alloc_ptr_	util/arena.h	/^  char* alloc_ptr_;$/;"	m	class:leveldb::Arena
allowed_seeks	db/version_edit.h	/^  int allowed_seeks;  \/\/ Seeks allowed until compaction$/;"	m	struct:leveldb::FileMetaData
anacap	zns_ctl/controller.h	/^	__u8			anacap;$/;"	m	struct:nvme_id_ctrl
anagrpid	zns_ctl/controller.h	/^	__le32			anagrpid;$/;"	m	struct:nvme_id_ns
anagrpmax	zns_ctl/controller.h	/^	__le32			anagrpmax;$/;"	m	struct:nvme_id_ctrl
anatt	zns_ctl/controller.h	/^	__u8			anatt;$/;"	m	struct:nvme_id_ctrl
append_lock	util/env_zone.cc	/^        port::Mutex append_lock;$/;"	m	class:leveldb::__anon21::final	file:
appmask	zns_ctl/controller.h	/^	__u16	appmask;$/;"	m	struct:nvme_user_io
apptag	zns_ctl/controller.h	/^	__u16	apptag;$/;"	m	struct:nvme_user_io
apsta	zns_ctl/controller.h	/^	__u8			apsta;$/;"	m	struct:nvme_id_ctrl
arena_	db/memtable.h	/^  Arena arena_;$/;"	m	class:leveldb::MemTable
arena_	db/skiplist.h	/^  Arena* const arena_;  \/\/ Arena used for allocations of nodes$/;"	m	class:leveldb::SkipList
arena_	db/skiplist_test.cc	/^  Arena arena_;$/;"	m	class:leveldb::ConcurrentTest	file:
arg	util/env_posix.cc	/^    void* const arg;$/;"	m	struct:leveldb::__anon19::PosixEnv::BackgroundWorkItem	file:
arg	util/env_windows.cc	/^    void* const arg;$/;"	m	struct:leveldb::__anon11::WindowsEnv::BackgroundWorkItem	file:
arg	util/env_zone.cc	/^			void* const arg;$/;"	m	struct:leveldb::__anon21::ZoneEnv::BackgroundWorkItem	file:
arg	util/zns/env_zone_cp.cc	/^			void* const arg;$/;"	m	struct:leveldb::__anon8::ZoneEnv::BackgroundWorkItem	file:
arg	util/zns/env_zone_temp.cc	/^			void* const arg;$/;"	m	struct:leveldb::__anon7::ZoneEnv::BackgroundWorkItem	file:
arg1	include/leveldb/iterator.h	/^    void* arg1;$/;"	m	struct:leveldb::Iterator::CleanupNode
arg2	include/leveldb/iterator.h	/^    void* arg2;$/;"	m	struct:leveldb::Iterator::CleanupNode
arg_	table/two_level_iterator.cc	/^  void* arg_;$/;"	m	class:leveldb::__anon30::TwoLevelIterator	file:
avscc	zns_ctl/controller.h	/^	__u8			avscc;$/;"	m	struct:nvme_id_ctrl
awun	zns_ctl/controller.h	/^	__le16			awun;$/;"	m	struct:nvme_id_ctrl
awupf	zns_ctl/controller.h	/^	__le16			awupf;$/;"	m	struct:nvme_id_ctrl
b	util/no_destructor_test.cc	/^  uint64_t b;$/;"	m	struct:leveldb::__anon9::DoNotDestruct	file:
background_work_mutex_	util/env_posix.cc	/^  port::Mutex background_work_mutex_;$/;"	m	class:leveldb::__anon19::PosixEnv	file:
background_work_mutex_	util/env_windows.cc	/^  port::Mutex background_work_mutex_;$/;"	m	class:leveldb::__anon11::WindowsEnv	file:
background_work_mutex_	util/env_zone.cc	/^        port::Mutex background_work_mutex_;$/;"	m	class:leveldb::__anon21::ZoneEnv	file:
background_work_mutex_	util/zns/env_zone_cp.cc	/^        port::Mutex background_work_mutex_;$/;"	m	class:leveldb::__anon8::ZoneEnv	file:
background_work_mutex_	util/zns/env_zone_temp.cc	/^        port::Mutex background_work_mutex_;$/;"	m	class:leveldb::__anon7::ZoneEnv	file:
backing_store_	db/log_reader.h	/^  char* const backing_store_;$/;"	m	class:leveldb::log::Reader
base	util/testharness.cc	/^  const char* base;$/;"	m	struct:leveldb::test::__anon14::Test	file:
base_	db/version_set.cc	/^  Version* base_;$/;"	m	class:leveldb::VersionSet::Builder	file:
base_lg_	table/filter_block.h	/^  size_t base_lg_;      \/\/ Encoding parameter (see kFilterBaseLg in .cc file)$/;"	m	class:leveldb::FilterBlockReader
batch	db/db_impl.cc	/^  WriteBatch* batch;$/;"	m	struct:leveldb::DBImpl::Writer	file:
begin	db/db_impl.h	/^    const InternalKey* begin;  \/\/ null means beginning of key range$/;"	m	struct:leveldb::DBImpl::ManualCompaction
bits_per_key_	util/bloom.cc	/^  size_t bits_per_key_;$/;"	m	class:leveldb::__anon18::BloomFilterPolicy	file:
block_	table/table_test.cc	/^  Block* block_;$/;"	m	class:leveldb::BlockConstructor	file:
block_cache	include/leveldb/options.h	/^  Cache* block_cache = nullptr;$/;"	m	struct:leveldb::Options
block_function_	table/two_level_iterator.cc	/^  BlockFunction block_function_;$/;"	m	class:leveldb::__anon30::TwoLevelIterator	file:
block_offset_	db/log_writer.h	/^  int block_offset_;  \/\/ Current offset in block$/;"	m	class:leveldb::log::Writer
block_restart_interval	include/leveldb/options.h	/^  int block_restart_interval = 16;$/;"	m	struct:leveldb::Options
block_size	include/leveldb/options.h	/^  size_t block_size = 4 * 1024;$/;"	m	struct:leveldb::Options
blocks_	util/arena.h	/^  std::vector<char*> blocks_;$/;"	m	class:leveldb::Arena
blocks_mutex_	helpers/memenv/memenv.cc	/^  mutable port::Mutex blocks_mutex_;$/;"	m	class:leveldb::__anon5::FileState	file:
bm	benchmarks/db_bench.cc	/^    Benchmark* bm;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
buckets_	util/histogram.h	/^  double buckets_[kNumBuckets];$/;"	m	class:leveldb::Histogram
buf	util/env_zone.cc	/^        string buf; $/;"	m	class:leveldb::__anon21::WriteBuffer	file:
buf_	util/env_posix.cc	/^  char buf_[kWritableFileBufferSize];$/;"	m	class:leveldb::__anon19::final	file:
buf_	util/env_windows.cc	/^  char buf_[kWritableFileBufferSize];$/;"	m	class:leveldb::__anon11::WindowsWritableFile	file:
buf_	util/zns/env_zone_cp.cc	/^		char buf_[kWritableFileBufferSize];$/;"	m	class:leveldb::__anon8::ZoneFile	file:
buf_	util/zns/env_zone_temp.cc	/^		char buf_[kWritableFileBufferSize];$/;"	m	class:leveldb::__anon7::ZoneFile	file:
buf_pos_	util/zns/env_zone_cp.cc	/^		size_t buf_pos_;$/;"	m	class:leveldb::__anon8::ZoneFile	file:
buf_pos_	util/zns/env_zone_temp.cc	/^		size_t buf_pos_;$/;"	m	class:leveldb::__anon7::ZoneFile	file:
buffer	db/version_set.h	/^    char buffer[100];$/;"	m	struct:leveldb::VersionSet::LevelSummaryStorage
buffer_	db/log_reader.h	/^  Slice buffer_;$/;"	m	class:leveldb::log::Reader
buffer_	table/block_builder.h	/^  std::string buffer_;              \/\/ Destination buffer$/;"	m	class:leveldb::BlockBuilder
builder	db/db_impl.cc	/^  TableBuilder* builder;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
bytes_	benchmarks/db_bench.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::__anon4::Stats	file:
bytes_	benchmarks/db_bench_sqlite3.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::Benchmark	file:
bytes_	benchmarks/db_bench_tree_db.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::Benchmark	file:
bytes_read	db/db_impl.h	/^    int64_t bytes_read;$/;"	m	struct:leveldb::DBImpl::CompactionStats
bytes_until_read_sampling_	db/db_iter.cc	/^  size_t bytes_until_read_sampling_;$/;"	m	class:leveldb::__anon38::DBIter	file:
bytes_written	db/db_impl.h	/^    int64_t bytes_written;$/;"	m	struct:leveldb::DBImpl::CompactionStats
cachable	table/format.h	/^  bool cachable;        \/\/ True iff data can be cached$/;"	m	struct:leveldb::BlockContents
cache_	benchmarks/db_bench.cc	/^  Cache* cache_;$/;"	m	class:leveldb::Benchmark	file:
cache_	db/table_cache.h	/^  Cache* cache_;$/;"	m	class:leveldb::TableCache
cache_	util/cache_test.cc	/^  Cache* cache_;$/;"	m	class:leveldb::CacheTest	file:
cache_id	table/table.cc	/^  uint64_t cache_id;$/;"	m	struct:leveldb::Table::Rep	file:
capacity_	util/cache.cc	/^  size_t capacity_;$/;"	m	class:leveldb::__anon16::LRUCache	file:
cctemp	zns_ctl/controller.h	/^	__le16			cctemp;$/;"	m	struct:nvme_id_ctrl
cdw10	zns_ctl/controller.h	/^	__u32	cdw10;$/;"	m	struct:nvme_passthru_cmd
cdw11	zns_ctl/controller.h	/^	__u32	cdw11;$/;"	m	struct:nvme_passthru_cmd
cdw12	zns_ctl/controller.h	/^	__u32	cdw12;$/;"	m	struct:nvme_passthru_cmd
cdw13	zns_ctl/controller.h	/^	__u32	cdw13;$/;"	m	struct:nvme_passthru_cmd
cdw14	zns_ctl/controller.h	/^	__u32	cdw14;$/;"	m	struct:nvme_passthru_cmd
cdw15	zns_ctl/controller.h	/^	__u32	cdw15;$/;"	m	struct:nvme_passthru_cmd
cdw2	zns_ctl/controller.h	/^	__u32	cdw2;$/;"	m	struct:nvme_passthru_cmd
cdw3	zns_ctl/controller.h	/^	__u32	cdw3;$/;"	m	struct:nvme_passthru_cmd
charge	util/cache.cc	/^  size_t charge;  \/\/ TODO(opt): Only allow uint32_t?$/;"	m	struct:leveldb::__anon16::LRUHandle	file:
checksum_	db/log_reader.h	/^  bool const checksum_;$/;"	m	class:leveldb::log::Reader
children_	table/merger.cc	/^  IteratorWrapper* children_;$/;"	m	class:leveldb::__anon27::MergingIterator	file:
cleanup_head_	include/leveldb/iterator.h	/^  CleanupNode cleanup_head_;$/;"	m	class:leveldb::Iterator
clear	include/leveldb/slice.h	/^  void clear() {$/;"	f	class:leveldb::Slice
closed	table/table_builder.cc	/^  bool closed;  \/\/ Either Finish() or Abandon() has been called.$/;"	m	struct:leveldb::TableBuilder::Rep	file:
cmic	zns_ctl/controller.h	/^	__u8			cmic;$/;"	m	struct:nvme_id_ctrl
cmp	table/table_test.cc	/^  const Comparator* cmp;$/;"	m	struct:leveldb::__anon29::STLLessThan	file:
cnt_read	zns_ctl/controller.h	/^	__u64		cnt_read;$/;"	m	struct:nvme_zone_info_entry
cnt_reset	zns_ctl/controller.h	/^	__u32		cnt_reset;$/;"	m	struct:nvme_zone_info_entry
cnt_write	zns_ctl/controller.h	/^	__u64		cnt_write;$/;"	m	struct:nvme_zone_info_entry
cntlid	zns_ctl/controller.h	/^	__le16			cntlid;$/;"	m	struct:nvme_id_ctrl
code	include/leveldb/status.h	/^  Code code() const {$/;"	f	class:leveldb::Status
comp_	benchmarks/db_bench_tree_db.cc	/^  kyotocabinet::LZOCompressor<kyotocabinet::LZO::RAW> comp_;$/;"	m	class:leveldb::Benchmark	file:
compact_pointer_	db/version_set.h	/^  std::string compact_pointer_[config::kNumLevels];$/;"	m	class:leveldb::VersionSet
compact_pointers_	db/version_edit.h	/^  std::vector<std::pair<int, InternalKey>> compact_pointers_;$/;"	m	class:leveldb::VersionEdit
compaction	db/db_impl.cc	/^  Compaction* const compaction;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
compaction_files_	db/version_set_test.cc	/^  std::vector<FileMetaData*> compaction_files_;$/;"	m	class:leveldb::AddBoundaryInputsTest	file:
compaction_level_	db/version_set.h	/^  int compaction_level_;$/;"	m	class:leveldb::Version
compaction_score_	db/version_set.h	/^  double compaction_score_;$/;"	m	class:leveldb::Version
comparator	db/memtable.h	/^    const InternalKeyComparator comparator;$/;"	m	struct:leveldb::MemTable::KeyComparator
comparator	include/leveldb/options.h	/^  const Comparator* comparator;$/;"	m	struct:leveldb::Options
comparator_	db/memtable.h	/^  KeyComparator comparator_;$/;"	m	class:leveldb::MemTable
comparator_	db/version_edit.h	/^  std::string comparator_;$/;"	m	class:leveldb::VersionEdit
comparator_	table/block.cc	/^  const Comparator* const comparator_;$/;"	m	class:leveldb::Block::Iter	file:
comparator_	table/merger.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::__anon27::MergingIterator	file:
comparator_	table/table_test.cc	/^  const Comparator* const comparator_;$/;"	m	class:leveldb::BlockConstructor	file:
comparator_	table/table_test.cc	/^  const Comparator* const comparator_;$/;"	m	class:leveldb::DBConstructor	file:
compare	include/leveldb/slice.h	/^inline int Slice::compare(const Slice& b) const {$/;"	f	class:leveldb::Slice
compare_	db/c.cc	/^  int (*compare_)(void*, const char* a, size_t alen, const char* b,$/;"	m	struct:leveldb_comparator_t	file:
compare_	db/skiplist.h	/^  Comparator const compare_;$/;"	m	class:leveldb::SkipList
compressed_output	table/table_builder.cc	/^  std::string compressed_output;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
compression	include/leveldb/options.h	/^  CompressionType compression = kSnappyCompression;$/;"	m	struct:leveldb::Options
config	db/dbformat.h	/^namespace config {$/;"	n	namespace:leveldb
const	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	10;"	d	file:
constructor_	table/table_test.cc	/^  Constructor* constructor_;$/;"	m	class:leveldb::Harness	file:
contents	table/table_test.cc	/^  const std::string& contents() const { return contents_; }$/;"	f	class:leveldb::StringSink
contents_	db/log_test.cc	/^    Slice contents_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
contents_	db/log_test.cc	/^    std::string contents_;$/;"	m	class:leveldb::log::LogTest::StringDest	file:
contents_	table/table_test.cc	/^  std::string contents_;$/;"	m	class:leveldb::StringSink	file:
contents_	table/table_test.cc	/^  std::string contents_;$/;"	m	class:leveldb::StringSource	file:
control	zns_ctl/controller.h	/^	__u16	control;$/;"	m	struct:nvme_user_io
coordinator	util/env_zone.cc	/^        Zone_Coordinator *coordinator;$/;"	m	class:leveldb::__anon21::ZoneEnv	file:
coordinator	util/zns/env_zone_cp.cc	/^        Zone_Coordinator *coordinator;$/;"	m	class:leveldb::__anon8::ZoneEnv	file:
coordinator_	util/env_zone.cc	/^		Zone_Coordinator* coordinator_;$/;"	m	class:leveldb::__anon21::final	file:
coordinator_	util/env_zone.cc	/^        Zone_Coordinator* coordinator_;$/;"	m	class:leveldb::__anon21::final	file:
coordinator_	util/zns/env_zone_cp.cc	/^        Zone_Coordinator *coordinator_;$/;"	m	class:leveldb::__anon8::ZoneFile	file:
coordinator_	util/zns/env_zone_cp.cc	/^        Zone_Coordinator* coordinator_;$/;"	m	class:leveldb::__anon8::final	file:
count_random_reads_	db/db_test.cc	/^  bool count_random_reads_;$/;"	m	class:leveldb::SpecialEnv	file:
counter	db/db_test.cc	/^  std::atomic<int> counter[kNumThreads];$/;"	m	struct:leveldb::__anon42::MTState	file:
counter_	table/block_builder.h	/^  int counter_;                     \/\/ Number of entries emitted since restart$/;"	m	class:leveldb::BlockBuilder
cpt_cnt	db/db_impl.cc	/^int cpt_cnt;$/;"	v
cpu_to_le16	zns_ctl/controller.h	/^static inline __le16 cpu_to_le16(uint16_t x)$/;"	f
cpu_to_le32	zns_ctl/controller.h	/^static inline __le32 cpu_to_le32(uint32_t x)$/;"	f
cpu_to_le64	zns_ctl/controller.h	/^static inline __le64 cpu_to_le64(uint64_t x)$/;"	f
cqes	zns_ctl/controller.h	/^	__u8			cqes;$/;"	m	struct:nvme_id_ctrl
crc32c	util/crc32c.cc	/^namespace crc32c {$/;"	n	namespace:leveldb	file:
crc32c	util/crc32c.h	/^namespace crc32c {$/;"	n	namespace:leveldb
crc32c	util/crc32c_test.cc	/^namespace crc32c {$/;"	n	namespace:leveldb	file:
create_	db/c.cc	/^  char* (*create_)(void*, const char* const* key_array,$/;"	m	struct:leveldb_filterpolicy_t	file:
create_if_missing	include/leveldb/options.h	/^  bool create_if_missing = false;$/;"	m	struct:leveldb::Options
ctratt	zns_ctl/controller.h	/^	__le32			ctratt;$/;"	m	struct:nvme_id_ctrl
ctrattr	zns_ctl/controller.h	/^	__u8			ctrattr;$/;"	m	struct:nvme_id_ctrl
current	db/version_set.h	/^  Version* current() const { return current_; }$/;"	f	class:leveldb::VersionSet
current_	db/skiplist_test.cc	/^  State current_;$/;"	m	class:leveldb::ConcurrentTest	file:
current_	db/version_set.h	/^  Version* current_;        \/\/ == dummy_versions_.prev_$/;"	m	class:leveldb::VersionSet
current_	table/block.cc	/^  uint32_t current_;$/;"	m	class:leveldb::Block::Iter	file:
current_	table/merger.cc	/^  IteratorWrapper* current_;$/;"	m	class:leveldb::__anon27::MergingIterator	file:
current_	util/cache_test.cc	/^  static CacheTest* current_;$/;"	m	class:leveldb::CacheTest	file:
current_	util/cache_test.cc	/^CacheTest* CacheTest::current_;$/;"	m	class:leveldb::CacheTest	file:
current_output	db/db_impl.cc	/^  Output* current_output() { return &outputs[outputs.size() - 1]; }$/;"	f	struct:leveldb::DBImpl::CompactionState
cv	db/db_impl.cc	/^  port::CondVar cv;$/;"	m	struct:leveldb::DBImpl::Writer	file:
cv_	port/port_stdcxx.h	/^  std::condition_variable cv_;$/;"	m	class:leveldb::port::CondVar
data	include/leveldb/slice.h	/^  const char* data() const { return data_; }$/;"	f	class:leveldb::Slice
data	table/format.h	/^  Slice data;           \/\/ Actual contents of data$/;"	m	struct:leveldb::BlockContents
data	table/table_test.cc	/^  const KVMap& data() const { return data_; }$/;"	f	class:leveldb::Constructor
data	zns_ctl/controller.h	/^	__u8 data[BLOCK_SIZE];$/;"	m	struct:zns_block
data	zns_ctl/controller.h	/^	struct zns_block data[8];$/;"	m	struct:zns_sector	typeref:struct:zns_sector::zns_block
data_	benchmarks/db_bench.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon4::RandomGenerator	file:
data_	benchmarks/db_bench_sqlite3.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon3::RandomGenerator	file:
data_	benchmarks/db_bench_tree_db.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon2::RandomGenerator	file:
data_	include/leveldb/slice.h	/^  const char* data_;$/;"	m	class:leveldb::Slice
data_	table/block.cc	/^  const char* const data_;       \/\/ underlying block contents$/;"	m	class:leveldb::Block::Iter	file:
data_	table/block.h	/^  const char* data_;$/;"	m	class:leveldb::Block
data_	table/filter_block.h	/^  const char* data_;    \/\/ Pointer to filter data (at block-start)$/;"	m	class:leveldb::FilterBlockReader
data_	table/table_test.cc	/^  KVMap data_;$/;"	m	class:leveldb::Constructor	file:
data_	table/table_test.cc	/^  std::string data_;$/;"	m	class:leveldb::BlockConstructor	file:
data_block	table/table_builder.cc	/^  BlockBuilder data_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
data_block_handle_	table/two_level_iterator.cc	/^  std::string data_block_handle_;$/;"	m	class:leveldb::__anon30::TwoLevelIterator	file:
data_iter_	table/two_level_iterator.cc	/^  IteratorWrapper data_iter_;  \/\/ May be nullptr$/;"	m	class:leveldb::__anon30::TwoLevelIterator	file:
data_len	zns_ctl/controller.h	/^	__u32	data_len;$/;"	m	struct:nvme_passthru_cmd
data_sync_error_	db/db_test.cc	/^  std::atomic<bool> data_sync_error_;$/;"	m	class:leveldb::SpecialEnv	file:
db	table/table_test.cc	/^  DB* db() const { return constructor_->db(); }$/;"	f	class:leveldb::Harness
db	table/table_test.cc	/^  virtual DB* db() const { return nullptr; }  \/\/ Overridden in DBConstructor$/;"	f	class:leveldb::Constructor
db_	benchmarks/db_bench.cc	/^  DB* db_;$/;"	m	class:leveldb::Benchmark	file:
db_	benchmarks/db_bench_sqlite3.cc	/^  sqlite3* db_;$/;"	m	class:leveldb::Benchmark	file:
db_	benchmarks/db_bench_tree_db.cc	/^  kyotocabinet::TreeDB* db_;$/;"	m	class:leveldb::Benchmark	file:
db_	db/autocompact_test.cc	/^  DB* db_;$/;"	m	class:leveldb::AutoCompactTest	file:
db_	db/corruption_test.cc	/^  DB* db_;$/;"	m	class:leveldb::CorruptionTest	file:
db_	db/db_iter.cc	/^  DBImpl* db_;$/;"	m	class:leveldb::__anon38::DBIter	file:
db_	db/db_test.cc	/^  DB* db_;$/;"	m	class:leveldb::DBTest	file:
db_	db/fault_injection_test.cc	/^  DB* db_;$/;"	m	class:leveldb::FaultInjectionTest	file:
db_	db/recovery_test.cc	/^  DB* db_;$/;"	m	class:leveldb::RecoveryTest	file:
db_	table/table_test.cc	/^  DB* db_;$/;"	m	class:leveldb::DBConstructor	file:
db_lock_	db/db_impl.h	/^  FileLock* db_lock_;$/;"	m	class:leveldb::DBImpl
db_num_	benchmarks/db_bench_sqlite3.cc	/^  int db_num_;$/;"	m	class:leveldb::Benchmark	file:
db_num_	benchmarks/db_bench_tree_db.cc	/^  int db_num_;$/;"	m	class:leveldb::Benchmark	file:
dbfull	db/db_test.cc	/^  DBImpl* dbfull() { return reinterpret_cast<DBImpl*>(db_); }$/;"	f	class:leveldb::DBTest
dbfull	db/recovery_test.cc	/^  DBImpl* dbfull() const { return reinterpret_cast<DBImpl*>(db_); }$/;"	f	class:leveldb::RecoveryTest
dbname_	db/autocompact_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::AutoCompactTest	file:
dbname_	db/corruption_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::CorruptionTest	file:
dbname_	db/db_impl.h	/^  const std::string dbname_;$/;"	m	class:leveldb::DBImpl
dbname_	db/db_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::DBTest	file:
dbname_	db/fault_injection_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::FaultInjectionTest	file:
dbname_	db/recovery_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::RecoveryTest	file:
dbname_	db/repair.cc	/^  const std::string dbname_;$/;"	m	class:leveldb::__anon37::Repairer	file:
dbname_	db/table_cache.h	/^  const std::string dbname_;$/;"	m	class:leveldb::TableCache
dbname_	db/version_set.h	/^  const std::string dbname_;$/;"	m	class:leveldb::VersionSet
delay_data_sync_	db/db_test.cc	/^  std::atomic<bool> delay_data_sync_;$/;"	m	class:leveldb::SpecialEnv	file:
deleted_files	db/version_set.cc	/^    std::set<uint64_t> deleted_files;$/;"	m	struct:leveldb::VersionSet::Builder::LevelState	file:
deleted_files_	db/version_edit.h	/^  DeletedFileSet deleted_files_;$/;"	m	class:leveldb::VersionEdit
deleted_keys_	util/cache_test.cc	/^  std::vector<int> deleted_keys_;$/;"	m	class:leveldb::CacheTest	file:
deleted_values_	util/cache_test.cc	/^  std::vector<int> deleted_values_;$/;"	m	class:leveldb::CacheTest	file:
deleter	util/cache.cc	/^  void (*deleter)(const Slice&, void* value);$/;"	m	struct:leveldb::__anon16::LRUHandle	file:
descriptor_file_	db/version_set.h	/^  WritableFile* descriptor_file_;$/;"	m	class:leveldb::VersionSet
descriptor_log_	db/version_set.h	/^  log::Writer* descriptor_log_;$/;"	m	class:leveldb::VersionSet
dest_	db/log_test.cc	/^  StringDest dest_;$/;"	m	class:leveldb::log::LogTest	file:
dest_	db/log_writer.h	/^  WritableFile* dest_;$/;"	m	class:leveldb::log::Writer
destructor_	db/c.cc	/^  void (*destructor_)(void*);$/;"	m	struct:leveldb_comparator_t	file:
destructor_	db/c.cc	/^  void (*destructor_)(void*);$/;"	m	struct:leveldb_filterpolicy_t	file:
direction_	db/db_iter.cc	/^  Direction direction_;$/;"	m	class:leveldb::__anon38::DBIter	file:
direction_	table/merger.cc	/^  Direction direction_;$/;"	m	class:leveldb::__anon27::MergingIterator	file:
dirname_	util/env_posix.cc	/^  const std::string dirname_;  \/\/ The directory of filename_.$/;"	m	class:leveldb::__anon19::final	file:
disjoint_sorted_files_	db/version_set_test.cc	/^  bool disjoint_sorted_files_;$/;"	m	class:leveldb::FindFileTest	file:
dlfeat	zns_ctl/controller.h	/^	__u8			dlfeat;$/;"	m	struct:nvme_id_ns
done	db/db_impl.cc	/^  bool done;$/;"	m	struct:leveldb::DBImpl::Writer	file:
done	db/db_impl.h	/^    bool done;$/;"	m	struct:leveldb::DBImpl::ManualCompaction
done_	benchmarks/db_bench.cc	/^  int done_;$/;"	m	class:leveldb::__anon4::Stats	file:
done_	benchmarks/db_bench_sqlite3.cc	/^  int done_;$/;"	m	class:leveldb::Benchmark	file:
done_	benchmarks/db_bench_tree_db.cc	/^  int done_;$/;"	m	class:leveldb::Benchmark	file:
dpc	zns_ctl/controller.h	/^	__u8			dpc;$/;"	m	struct:nvme_id_ns
dps	zns_ctl/controller.h	/^	__u8			dps;$/;"	m	struct:nvme_id_ns
dropped_bytes_	db/log_test.cc	/^    size_t dropped_bytes_;$/;"	m	class:leveldb::log::LogTest::ReportCollector	file:
ds	zns_ctl/controller.h	/^	__u8			ds;$/;"	m	struct:nvme_lbaf
dsmgmt	zns_ctl/controller.h	/^	__u32	dsmgmt;$/;"	m	struct:nvme_user_io
dst_	db/dumpfile.cc	/^  WritableFile* dst_;$/;"	m	class:leveldb::__anon35::CorruptionReporter	file:
dst_	db/dumpfile.cc	/^  WritableFile* dst_;$/;"	m	class:leveldb::__anon35::WriteBatchItemPrinter	file:
dsto	zns_ctl/controller.h	/^	__u8			dsto;$/;"	m	struct:nvme_id_ctrl
dummy_versions_	db/version_set.h	/^  Version dummy_versions_;  \/\/ Head of circular doubly-linked list of versions.$/;"	m	class:leveldb::VersionSet
edit	db/version_set.h	/^  VersionEdit* edit() { return &edit_; }$/;"	f	class:leveldb::Compaction
edit_	db/repair.cc	/^  VersionEdit edit_;$/;"	m	class:leveldb::__anon37::Repairer	file:
edit_	db/version_set.h	/^  VersionEdit edit_;$/;"	m	class:leveldb::Compaction
edstt	zns_ctl/controller.h	/^	__le16			edstt;$/;"	m	struct:nvme_id_ctrl
elems_	util/cache.cc	/^  uint32_t elems_;$/;"	m	class:leveldb::__anon16::HandleTable	file:
elpe	zns_ctl/controller.h	/^	__u8			elpe;$/;"	m	struct:nvme_id_ctrl
empty	db/snapshot.h	/^  bool empty() const { return head_.next_ == &head_; }$/;"	f	class:leveldb::SnapshotList
empty	include/leveldb/slice.h	/^  bool empty() const { return size_ == 0; }$/;"	f	class:leveldb::Slice
empty	table/block_builder.h	/^  bool empty() const { return buffer_.empty(); }$/;"	f	class:leveldb::BlockBuilder
end	db/db_impl.h	/^    const InternalKey* end;    \/\/ null means end of key range$/;"	m	struct:leveldb::DBImpl::ManualCompaction
end_	db/dbformat.h	/^  const char* end_;$/;"	m	class:leveldb::LookupKey
end_of_buffer_offset_	db/log_reader.h	/^  uint64_t end_of_buffer_offset_;$/;"	m	class:leveldb::log::Reader
endgid	zns_ctl/controller.h	/^	__le16			endgid;$/;"	m	struct:nvme_id_ns
entries_per_batch_	benchmarks/db_bench.cc	/^  int entries_per_batch_;$/;"	m	class:leveldb::Benchmark	file:
entry_lat	zns_ctl/controller.h	/^	__le32			entry_lat;	\/* microseconds *\/$/;"	m	struct:nvme_id_power_state
env	db/recovery_test.cc	/^  Env* env() const { return env_; }$/;"	f	class:leveldb::RecoveryTest
env	include/leveldb/options.h	/^  Env* env;$/;"	m	struct:leveldb::Options
env	util/env_posix.cc	/^  Env* env() { return reinterpret_cast<Env*>(&env_storage_); }$/;"	f	class:leveldb::__anon20::SingletonEnv
env	util/env_windows.cc	/^  Env* env() { return reinterpret_cast<Env*>(&env_storage_); }$/;"	f	class:leveldb::__anon11::SingletonEnv
env	util/env_zone.cc	/^		Env* env() { return reinterpret_cast<Env*>(&env_storage_); }$/;"	f	class:leveldb::__anon21::SingletonEnv
env	util/zns/env_zone_cp.cc	/^		Env* env() { return reinterpret_cast<Env*>(&env_storage_); }$/;"	f	class:leveldb::__anon8::SingletonEnv
env	util/zns/env_zone_temp.cc	/^		Env* env() { return reinterpret_cast<Env*>(&env_storage_); }$/;"	f	class:leveldb::__anon7::SingletonEnv
env_	db/corruption_test.cc	/^  test::ErrorEnv env_;$/;"	m	class:leveldb::CorruptionTest	file:
env_	db/db_impl.h	/^  Env* const env_;$/;"	m	class:leveldb::DBImpl
env_	db/db_test.cc	/^  SpecialEnv* env_;$/;"	m	class:leveldb::DBTest	file:
env_	db/fault_injection_test.cc	/^  FaultInjectionTestEnv* env_;$/;"	m	class:leveldb::FaultInjectionTest	file:
env_	db/fault_injection_test.cc	/^  FaultInjectionTestEnv* env_;$/;"	m	class:leveldb::TestWritableFile	file:
env_	db/recovery_test.cc	/^  Env* env_;$/;"	m	class:leveldb::RecoveryTest	file:
env_	db/repair.cc	/^  Env* const env_;$/;"	m	class:leveldb::__anon37::Repairer	file:
env_	db/table_cache.h	/^  Env* const env_;$/;"	m	class:leveldb::TableCache
env_	db/version_set.h	/^  Env* const env_;$/;"	m	class:leveldb::VersionSet
env_	helpers/memenv/memenv_test.cc	/^  Env* env_;$/;"	m	class:leveldb::MemEnvTest	file:
env_	util/env_posix_test.cc	/^  Env* env_;$/;"	m	class:leveldb::EnvPosixTest	file:
env_	util/env_test.cc	/^  Env* env_;$/;"	m	class:leveldb::EnvTest	file:
env_	util/env_windows_test.cc	/^  Env* env_;$/;"	m	class:leveldb::EnvWindowsTest	file:
env_	util/env_zone_test.cc	/^  Env* env_;$/;"	m	class:leveldb::ZoneEnvTest	file:
env_initialized_	util/env_posix.cc	/^  static std::atomic<bool> env_initialized_;$/;"	m	class:leveldb::__anon20::SingletonEnv	file:
env_initialized_	util/env_posix.cc	/^std::atomic<bool> SingletonEnv<EnvType>::env_initialized_;$/;"	m	class:leveldb::__anon20::SingletonEnv	file:
env_initialized_	util/env_windows.cc	/^  static std::atomic<bool> env_initialized_;$/;"	m	class:leveldb::__anon11::SingletonEnv	file:
env_initialized_	util/env_windows.cc	/^std::atomic<bool> SingletonEnv<EnvType>::env_initialized_;$/;"	m	class:leveldb::__anon11::SingletonEnv	file:
env_initialized_	util/env_zone.cc	/^		static std::atomic<bool> env_initialized_;$/;"	m	class:leveldb::__anon21::SingletonEnv	file:
env_initialized_	util/env_zone.cc	/^std::atomic<bool> SingletonEnv<EnvType>::env_initialized_;$/;"	m	class:leveldb::__anon21::SingletonEnv	file:
env_initialized_	util/zns/env_zone_cp.cc	/^		static std::atomic<bool> env_initialized_;$/;"	m	class:leveldb::__anon8::SingletonEnv	file:
env_initialized_	util/zns/env_zone_cp.cc	/^std::atomic<bool> SingletonEnv<EnvType>::env_initialized_;$/;"	m	class:leveldb::__anon8::SingletonEnv	file:
env_initialized_	util/zns/env_zone_temp.cc	/^		static std::atomic<bool> env_initialized_;$/;"	m	class:leveldb::__anon7::SingletonEnv	file:
env_initialized_	util/zns/env_zone_temp.cc	/^std::atomic<bool> SingletonEnv<EnvType>::env_initialized_;$/;"	m	class:leveldb::__anon7::SingletonEnv	file:
env_storage_	util/env_posix.cc	/^      env_storage_;$/;"	m	class:leveldb::__anon20::SingletonEnv	file:
env_storage_	util/env_windows.cc	/^      env_storage_;$/;"	m	class:leveldb::__anon11::SingletonEnv	file:
env_storage_	util/env_zone.cc	/^			env_storage_;$/;"	m	class:leveldb::__anon21::SingletonEnv	file:
env_storage_	util/zns/env_zone_cp.cc	/^			env_storage_;$/;"	m	class:leveldb::__anon8::SingletonEnv	file:
env_storage_	util/zns/env_zone_temp.cc	/^			env_storage_;$/;"	m	class:leveldb::__anon7::SingletonEnv	file:
eof_	db/log_reader.h	/^  bool eof_;  \/\/ Last Read() indicated EOF by returning < kBlockSize$/;"	m	class:leveldb::log::Reader
error_if_exists	include/leveldb/options.h	/^  bool error_if_exists = false;$/;"	m	struct:leveldb::Options
eui64	zns_ctl/controller.h	/^	__u8			eui64[8];$/;"	m	struct:nvme_id_ns
exit_lat	zns_ctl/controller.h	/^	__le32			exit_lat;	\/* microseconds *\/$/;"	m	struct:nvme_id_power_state
f2z_map	util/zns/env_zone_cp.cc	/^        std::map<std::string, Zone*> f2z_map;$/;"	m	class:leveldb::__anon8::ZoneEnv	file:
f2z_map_	util/env_zone.cc	/^        map<string, vector<File_Info*>>& f2z_map_;$/;"	m	class:leveldb::__anon21::Zone_Coordinator	file:
fake_filter_result	db/c_test.c	/^static uint8_t fake_filter_result = 1;$/;"	v	file:
fd	util/env_posix.cc	/^  int fd() const { return fd_; }$/;"	f	class:leveldb::__anon19::PosixFileLock
fd	zns_ctl/controller.h	/^	int fd;$/;"	m	struct:zns_share_info
fd_	util/env_posix.cc	/^  const int fd_;                 \/\/ -1 if has_permanent_fd_ is false.$/;"	m	class:leveldb::__anon19::final	file:
fd_	util/env_posix.cc	/^  const int fd_;$/;"	m	class:leveldb::__anon19::PosixFileLock	file:
fd_	util/env_posix.cc	/^  const int fd_;$/;"	m	class:leveldb::__anon19::final	file:
fd_	util/env_posix.cc	/^  int fd_;$/;"	m	class:leveldb::__anon19::final	file:
fd_limiter_	util/env_posix.cc	/^  Limiter fd_limiter_;    \/\/ Thread-safe.$/;"	m	class:leveldb::__anon19::PosixEnv	file:
fd_limiter_	util/env_posix.cc	/^  Limiter* const fd_limiter_;$/;"	m	class:leveldb::__anon19::final	file:
file	db/table_cache.cc	/^  RandomAccessFile* file;$/;"	m	struct:leveldb::TableAndFile	file:
file	table/table.cc	/^  RandomAccessFile* file;$/;"	m	struct:leveldb::Table::Rep	file:
file	table/table_builder.cc	/^  WritableFile* file;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
file_	db/log_reader.h	/^  SequentialFile* const file_;$/;"	m	class:leveldb::log::Reader
file_	helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon5::RandomAccessFileImpl	file:
file_	helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon5::SequentialFileImpl	file:
file_	helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon5::WritableFileImpl	file:
file_	util/zns/env_zone_cp.cc	/^		ZoneFile* file_;$/;"	m	class:leveldb::__anon8::final	file:
file_	util/zns/env_zone_temp.cc	/^		ZoneFile* file_;$/;"	m	class:leveldb::__anon7::ZoneRandomAccessFile	file:
file_	util/zns/env_zone_temp.cc	/^		ZoneFile* file_;$/;"	m	class:leveldb::__anon7::ZoneSequentialFile	file:
file_	util/zns/env_zone_temp.cc	/^		ZoneFile* file_;$/;"	m	class:leveldb::__anon7::ZoneWritableFile	file:
file_size	db/db_impl.cc	/^    uint64_t file_size;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
file_size	db/version_edit.h	/^  uint64_t file_size;    \/\/ File size in bytes$/;"	m	struct:leveldb::FileMetaData
file_to_compact_	db/version_set.h	/^  FileMetaData* file_to_compact_;$/;"	m	class:leveldb::Version
file_to_compact_level_	db/version_set.h	/^  int file_to_compact_level_;$/;"	m	class:leveldb::Version
filename	util/env_posix.cc	/^  const std::string& filename() const { return filename_; }$/;"	f	class:leveldb::__anon19::PosixFileLock
filename	util/env_windows.cc	/^  const std::string& filename() const { return filename_; }$/;"	f	class:leveldb::__anon11::WindowsFileLock
filename_	db/fault_injection_test.cc	/^  std::string filename_;$/;"	m	struct:leveldb::__anon40::FileState	file:
filename_	util/env_posix.cc	/^  const std::string filename_;$/;"	m	class:leveldb::__anon19::PosixFileLock	file:
filename_	util/env_posix.cc	/^  const std::string filename_;$/;"	m	class:leveldb::__anon19::final	file:
filename_	util/env_windows.cc	/^  const std::string filename_;$/;"	m	class:leveldb::__anon11::WindowsFileLock	file:
filename_	util/env_windows.cc	/^  const std::string filename_;$/;"	m	class:leveldb::__anon11::WindowsMmapReadableFile	file:
filename_	util/env_windows.cc	/^  const std::string filename_;$/;"	m	class:leveldb::__anon11::WindowsRandomAccessFile	file:
filename_	util/env_windows.cc	/^  const std::string filename_;$/;"	m	class:leveldb::__anon11::WindowsSequentialFile	file:
filename_	util/env_windows.cc	/^  const std::string filename_;$/;"	m	class:leveldb::__anon11::WindowsWritableFile	file:
files_	db/version_set.h	/^  std::vector<FileMetaData*> files_[config::kNumLevels];$/;"	m	class:leveldb::Version
files_	db/version_set_test.cc	/^  std::vector<FileMetaData*> files_;$/;"	m	class:leveldb::FindFileTest	file:
fill_cache	include/leveldb/options.h	/^  bool fill_cache = true;$/;"	m	struct:leveldb::ReadOptions
filter	table/table.cc	/^  FilterBlockReader* filter;$/;"	m	struct:leveldb::Table::Rep	file:
filter_	util/bloom_test.cc	/^  std::string filter_;$/;"	m	class:leveldb::BloomTest	file:
filter_block	table/table_builder.cc	/^  FilterBlockBuilder* filter_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
filter_data	table/table.cc	/^  const char* filter_data;$/;"	m	struct:leveldb::Table::Rep	file:
filter_offsets_	table/filter_block.h	/^  std::vector<uint32_t> filter_offsets_;$/;"	m	class:leveldb::FilterBlockBuilder
filter_policy	include/leveldb/options.h	/^  const FilterPolicy* filter_policy = nullptr;$/;"	m	struct:leveldb::Options
filter_policy_	benchmarks/db_bench.cc	/^  const FilterPolicy* filter_policy_;$/;"	m	class:leveldb::Benchmark	file:
filter_policy_	db/db_test.cc	/^  const FilterPolicy* filter_policy_;$/;"	m	class:leveldb::DBTest	file:
final	util/env_posix.cc	/^class PosixMmapReadableFile final : public RandomAccessFile {$/;"	c	namespace:leveldb::__anon19	file:
final	util/env_posix.cc	/^class PosixRandomAccessFile final : public RandomAccessFile {$/;"	c	namespace:leveldb::__anon19	file:
final	util/env_posix.cc	/^class PosixSequentialFile final : public SequentialFile {$/;"	c	namespace:leveldb::__anon19	file:
final	util/env_posix.cc	/^class PosixWritableFile final : public WritableFile {$/;"	c	namespace:leveldb::__anon19	file:
final	util/env_zone.cc	/^class ZoneRandomAccessFile final : public RandomAccessFile$/;"	c	namespace:leveldb::__anon21	file:
final	util/env_zone.cc	/^class ZoneSequentialFile final : public SequentialFile$/;"	c	namespace:leveldb::__anon21	file:
final	util/env_zone.cc	/^class ZoneWritableFile final : public WritableFile$/;"	c	namespace:leveldb::__anon21	file:
final	util/posix_logger.h	/^class PosixLogger final : public Logger {$/;"	c	namespace:leveldb
final	util/windows_logger.h	/^class WindowsLogger final : public Logger {$/;"	c	namespace:leveldb
final	util/zns/env_zone_cp.cc	/^class ZoneRandomAccessFile final : public RandomAccessFile$/;"	c	namespace:leveldb::__anon8	file:
final	util/zns/env_zone_cp.cc	/^class ZoneSequentialFile final : public SequentialFile$/;"	c	namespace:leveldb::__anon8	file:
final	util/zns/env_zone_cp.cc	/^class ZoneWritableFile final : public WritableFile$/;"	c	namespace:leveldb::__anon8	file:
finfo_	util/env_zone.cc	/^        vector<File_Info*>& finfo_;$/;"	m	class:leveldb::__anon21::final	file:
finfo_lock	util/env_zone.cc	/^        port::Mutex finfo_lock;$/;"	m	class:leveldb::__anon21::Zone_Coordinator	file:
finish_	benchmarks/db_bench.cc	/^  double finish_;$/;"	m	class:leveldb::__anon4::Stats	file:
finished_	table/block_builder.h	/^  bool finished_;                   \/\/ Has Finish() been called?$/;"	m	class:leveldb::BlockBuilder
flags	zns_ctl/controller.h	/^	__u8			flags;$/;"	m	struct:nvme_id_power_state
flags	zns_ctl/controller.h	/^	__u8	flags;$/;"	m	struct:nvme_passthru_cmd
flags	zns_ctl/controller.h	/^	__u8	flags;$/;"	m	struct:nvme_user_io
flbas	zns_ctl/controller.h	/^	__u8			flbas;$/;"	m	struct:nvme_id_ns
flist_	db/version_set.cc	/^  const std::vector<FileMetaData*>* const flist_;$/;"	m	class:leveldb::Version::LevelFileNumIterator::std	file:
flush_lock	util/env_zone.cc	/^        port::Mutex flush_lock;$/;"	m	class:leveldb::__anon21::Zone_Coordinator	file:
flush_lock	util/env_zone.cc	/^        port::Mutex flush_lock;$/;"	m	class:leveldb::__anon21::final	file:
fna	zns_ctl/controller.h	/^	__u8			fna;$/;"	m	struct:nvme_id_ctrl
fname_	util/env_zone.cc	/^        string fname_;$/;"	m	class:leveldb::__anon21::final	file:
fname_	util/testharness.h	/^  const char* fname_;$/;"	m	class:leveldb::test::Tester
force_error_	db/log_test.cc	/^    bool force_error_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
fp_	util/posix_logger.h	/^  std::FILE* const fp_;$/;"	m	class:leveldb::final::std
fp_	util/windows_logger.h	/^  std::FILE* const fp_;$/;"	m	class:leveldb::final::std
fpi	zns_ctl/controller.h	/^	__u8			fpi;$/;"	m	struct:nvme_id_ns
fr	zns_ctl/controller.h	/^	char			fr[8];$/;"	m	struct:nvme_id_ctrl
frmw	zns_ctl/controller.h	/^	__u8			frmw;$/;"	m	struct:nvme_id_ctrl
func	util/testharness.cc	/^  void (*func)();$/;"	m	struct:leveldb::test::__anon14::Test	file:
function	include/leveldb/iterator.h	/^    CleanupFunction function;$/;"	m	struct:leveldb::Iterator::CleanupNode
function	util/env_posix.cc	/^    void (*const function)(void*);$/;"	m	struct:leveldb::__anon19::PosixEnv::BackgroundWorkItem	file:
function	util/env_windows.cc	/^    void (*const function)(void*);$/;"	m	struct:leveldb::__anon11::WindowsEnv::BackgroundWorkItem	file:
function	util/env_zone.cc	/^			void (* const function)(void*);$/;"	m	struct:leveldb::__anon21::ZoneEnv::BackgroundWorkItem	file:
function	util/zns/env_zone_cp.cc	/^			void (* const function)(void*);$/;"	m	struct:leveldb::__anon8::ZoneEnv::BackgroundWorkItem	file:
function	util/zns/env_zone_temp.cc	/^			void (* const function)(void*);$/;"	m	struct:leveldb::__anon7::ZoneEnv::BackgroundWorkItem	file:
fuses	zns_ctl/controller.h	/^	__le16			fuses;$/;"	m	struct:nvme_id_ctrl
fwug	zns_ctl/controller.h	/^	__u8			fwug;$/;"	m	struct:nvme_id_ctrl
g_env	benchmarks/db_bench.cc	/^leveldb::Env* g_env = nullptr;$/;"	m	namespace:leveldb::__anon4	file:
g_mmap_limit	util/env_posix.cc	/^int g_mmap_limit = kDefaultMmapLimit;$/;"	m	namespace:leveldb::__anon19	file:
g_mmap_limit	util/env_windows.cc	/^int g_mmap_limit = kDefaultMmapLimit;$/;"	m	namespace:leveldb::__anon11	file:
g_open_read_only_file_limit	util/env_posix.cc	/^int g_open_read_only_file_limit = -1;$/;"	m	namespace:leveldb::__anon19	file:
gen	db/skiplist_test.cc	/^  static uint64_t gen(Key key) { return (key >> 8) & 0xffffffffu; }$/;"	f	class:leveldb::ConcurrentTest	file:
gen_	benchmarks/db_bench_sqlite3.cc	/^  RandomGenerator gen_;$/;"	m	class:leveldb::Benchmark	file:
gen_	benchmarks/db_bench_tree_db.cc	/^  RandomGenerator gen_;$/;"	m	class:leveldb::Benchmark	file:
generation	db/skiplist_test.cc	/^    std::atomic<int> generation[K];$/;"	m	struct:leveldb::ConcurrentTest::State	file:
get	util/env_windows.cc	/^  HANDLE get() const { return handle_; }$/;"	f	class:leveldb::__anon11::ScopedHandle
get	util/no_destructor.h	/^  InstanceType* get() {$/;"	f	class:leveldb::NoDestructor
get_logical_wp	util/zns/env_zone_temp.cc	/^		unsigned long long get_logical_wp()$/;"	f	class:leveldb::__anon7::Zone
get_next_wp	util/env_zone.cc	/^        uint64_t get_next_wp() { return (write_point_ + wnblock_ + 1); }$/;"	f	class:leveldb::__anon21::File_Info
get_open	util/zns/env_zone_cp.cc	/^        bool get_open() { return open_; }$/;"	f	class:leveldb::__anon8::Zone
get_valid	util/env_zone.cc	/^        bool get_valid() { return valid_; }$/;"	f	class:leveldb::__anon21::File_Info
get_valid	util/zns/env_zone_cp.cc	/^        bool get_valid() { return valid_; }$/;"	f	class:leveldb::__anon8::Zone
get_zone_to_slba	zns_ctl/controller.cc	/^__u64 get_zone_to_slba(struct zns_share_info * zonelist, int zonenumber)$/;"	f
grandparent_index_	db/version_set.h	/^  size_t grandparent_index_;  \/\/ Index in grandparent_starts_$/;"	m	class:leveldb::Compaction
grandparents_	db/version_set.h	/^  std::vector<FileMetaData*> grandparents_;$/;"	m	class:leveldb::Compaction
handle	util/env_windows.cc	/^  const ScopedHandle& handle() const { return handle_; }$/;"	f	class:leveldb::__anon11::WindowsFileLock
handle_	util/env_windows.cc	/^  HANDLE handle_;$/;"	m	class:leveldb::__anon11::ScopedHandle	file:
handle_	util/env_windows.cc	/^  ScopedHandle handle_;$/;"	m	class:leveldb::__anon11::WindowsWritableFile	file:
handle_	util/env_windows.cc	/^  ScopedHandle(ScopedHandle&& other) noexcept : handle_(other.Release()) {}$/;"	f	class:leveldb::__anon11::ScopedHandle
handle_	util/env_windows.cc	/^  const ScopedHandle handle_;$/;"	m	class:leveldb::__anon11::WindowsFileLock	file:
handle_	util/env_windows.cc	/^  const ScopedHandle handle_;$/;"	m	class:leveldb::__anon11::WindowsRandomAccessFile	file:
handle_	util/env_windows.cc	/^  const ScopedHandle handle_;$/;"	m	class:leveldb::__anon11::WindowsSequentialFile	file:
has_comparator_	db/version_edit.h	/^  bool has_comparator_;$/;"	m	class:leveldb::VersionEdit
has_imm_	db/db_impl.h	/^  std::atomic<bool> has_imm_;         \/\/ So bg thread can detect non-null imm_$/;"	m	class:leveldb::DBImpl
has_last_sequence_	db/version_edit.h	/^  bool has_last_sequence_;$/;"	m	class:leveldb::VersionEdit
has_log_number_	db/version_edit.h	/^  bool has_log_number_;$/;"	m	class:leveldb::VersionEdit
has_next_file_number_	db/version_edit.h	/^  bool has_next_file_number_;$/;"	m	class:leveldb::VersionEdit
has_permanent_fd_	util/env_posix.cc	/^  const bool has_permanent_fd_;  \/\/ If false, the file is opened on every read.$/;"	m	class:leveldb::__anon19::final	file:
has_prev_log_number_	db/version_edit.h	/^  bool has_prev_log_number_;$/;"	m	class:leveldb::VersionEdit
hash	db/skiplist_test.cc	/^  static uint64_t hash(Key key) { return key & 0xff; }$/;"	f	class:leveldb::ConcurrentTest	file:
hash	util/cache.cc	/^  uint32_t hash;     \/\/ Hash of key(); used for fast sharding and comparisons$/;"	m	struct:leveldb::__anon16::LRUHandle	file:
hctma	zns_ctl/controller.h	/^	__le16			hctma;$/;"	m	struct:nvme_id_ctrl
head_	db/skiplist.h	/^  Node* const head_;$/;"	m	class:leveldb::SkipList
head_	db/snapshot.h	/^  SnapshotImpl head_;$/;"	m	class:leveldb::SnapshotList
heap_allocated	table/format.h	/^  bool heap_allocated;  \/\/ True iff caller should delete[] data.data()$/;"	m	struct:leveldb::BlockContents
heap_counter_	benchmarks/db_bench.cc	/^  int heap_counter_;$/;"	m	class:leveldb::Benchmark	file:
hist_	benchmarks/db_bench.cc	/^  Histogram hist_;$/;"	m	class:leveldb::__anon4::Stats	file:
hist_	benchmarks/db_bench_sqlite3.cc	/^  Histogram hist_;$/;"	m	class:leveldb::Benchmark	file:
hist_	benchmarks/db_bench_tree_db.cc	/^  Histogram hist_;$/;"	m	class:leveldb::Benchmark	file:
hmmaxd	zns_ctl/controller.h	/^	__le16			hmmaxd;$/;"	m	struct:nvme_id_ctrl
hmmin	zns_ctl/controller.h	/^	__le32			hmmin;$/;"	m	struct:nvme_id_ctrl
hmminds	zns_ctl/controller.h	/^	__le32			hmminds;$/;"	m	struct:nvme_id_ctrl
hmpre	zns_ctl/controller.h	/^	__le32			hmpre;$/;"	m	struct:nvme_id_ctrl
icdoff	zns_ctl/controller.h	/^	__le16			icdoff;$/;"	m	struct:nvme_id_ctrl
icmp_	db/repair.cc	/^  InternalKeyComparator const icmp_;$/;"	m	class:leveldb::__anon37::Repairer	file:
icmp_	db/version_set.cc	/^  const InternalKeyComparator icmp_;$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
icmp_	db/version_set.h	/^  const InternalKeyComparator icmp_;$/;"	m	class:leveldb::VersionSet
icmp_	db/version_set_test.cc	/^  InternalKeyComparator icmp_;$/;"	m	class:leveldb::AddBoundaryInputsTest	file:
id	db/db_test.cc	/^  int id;$/;"	m	struct:leveldb::__anon42::MTThread	file:
id_mutex_	util/cache.cc	/^  port::Mutex id_mutex_;$/;"	m	class:leveldb::__anon16::ShardedLRUCache	file:
idle_power	zns_ctl/controller.h	/^	__le16			idle_power;$/;"	m	struct:nvme_id_power_state
idle_scale	zns_ctl/controller.h	/^	__u8			idle_scale;$/;"	m	struct:nvme_id_power_state
ieee	zns_ctl/controller.h	/^	__u8			ieee[3];$/;"	m	struct:nvme_id_ctrl
ignore_dot_files_	db/db_test.cc	/^  bool ignore_dot_files_;$/;"	m	class:leveldb::TestEnv	file:
in_cache	util/cache.cc	/^  bool in_cache;     \/\/ Whether entry is in the cache.$/;"	m	struct:leveldb::__anon16::LRUHandle	file:
index_	db/version_set.cc	/^  uint32_t index_;$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
index_block	table/table.cc	/^  Block* index_block;$/;"	m	struct:leveldb::Table::Rep	file:
index_block	table/table_builder.cc	/^  BlockBuilder index_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
index_block_options	table/table_builder.cc	/^  Options index_block_options;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
index_handle	table/format.h	/^  const BlockHandle& index_handle() const { return index_handle_; }$/;"	f	class:leveldb::Footer
index_handle_	table/format.h	/^  BlockHandle index_handle_;$/;"	m	class:leveldb::Footer
index_iter_	table/two_level_iterator.cc	/^  IteratorWrapper index_iter_;$/;"	m	class:leveldb::__anon30::TwoLevelIterator	file:
info	util/env_zone.cc	/^        vector<pair<string, ssize_t>> info;$/;"	m	class:leveldb::__anon21::WriteBuffer	file:
info_arch	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default =$/;"	v
info_language_dialect_default	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_log	include/leveldb/options.h	/^  Logger* info_log = nullptr;$/;"	m	struct:leveldb::Options
info_platform	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_size	build/CMakeFiles/CheckTypeSize/CMAKE_SIZEOF_UNSIGNED_SHORT.c	/^static char info_size[] =  {'I', 'N', 'F', 'O', ':', 's','i','z','e','[',$/;"	v	file:
info_version	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version_internal	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v
info_version_internal	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v
initial_offset_	db/log_reader.h	/^  uint64_t const initial_offset_;$/;"	m	class:leveldb::log::Reader
initial_offset_last_record_offsets_	db/log_test.cc	/^  static uint64_t initial_offset_last_record_offsets_[];$/;"	m	class:leveldb::log::LogTest	file:
initial_offset_last_record_offsets_	db/log_test.cc	/^uint64_t LogTest::initial_offset_last_record_offsets_[] = {$/;"	m	class:leveldb::log::LogTest	file:
initial_offset_record_sizes_	db/log_test.cc	/^  static size_t initial_offset_record_sizes_[];$/;"	m	class:leveldb::log::LogTest	file:
initial_offset_record_sizes_	db/log_test.cc	/^size_t LogTest::initial_offset_record_sizes_[] = {$/;"	m	class:leveldb::log::LogTest	file:
input	db/version_set.h	/^  FileMetaData* input(int which, int i) const { return inputs_[which][i]; }$/;"	f	class:leveldb::Compaction
input_version_	db/version_set.h	/^  Version* input_version_;$/;"	m	class:leveldb::Compaction
inputs_	db/version_set.h	/^  std::vector<FileMetaData*> inputs_[2];  \/\/ The two sets of inputs$/;"	m	class:leveldb::Compaction
instance_storage_	util/no_destructor.h	/^                                alignof(InstanceType)>::type instance_storage_;$/;"	m	class:leveldb::NoDestructor
internal_comparator	db/version_set.cc	/^    const InternalKeyComparator* internal_comparator;$/;"	m	struct:leveldb::VersionSet::Builder::BySmallestKey	file:
internal_comparator_	db/db_impl.h	/^  const InternalKeyComparator internal_comparator_;$/;"	m	class:leveldb::DBImpl
internal_comparator_	table/table_test.cc	/^  const InternalKeyComparator internal_comparator_;$/;"	m	class:leveldb::MemTableConstructor	file:
internal_filter_policy_	db/db_impl.h	/^  const InternalFilterPolicy internal_filter_policy_;$/;"	m	class:leveldb::DBImpl
internal_key	db/dbformat.h	/^  Slice internal_key() const { return Slice(kstart_, end_ - kstart_); }$/;"	f	class:leveldb::LookupKey
ioccsz	zns_ctl/controller.h	/^	__le32			ioccsz;$/;"	m	struct:nvme_id_ctrl
iorcsz	zns_ctl/controller.h	/^	__le32			iorcsz;$/;"	m	struct:nvme_id_ctrl
ipolicy_	db/repair.cc	/^  InternalFilterPolicy const ipolicy_;$/;"	m	class:leveldb::__anon37::Repairer	file:
is_default	db/c.cc	/^  bool is_default;$/;"	m	struct:leveldb_env_t	file:
is_manifest_	util/env_posix.cc	/^  const bool is_manifest_;  \/\/ True if the file's name starts with MANIFEST.$/;"	m	class:leveldb::__anon19::final	file:
is_manifest_	util/env_zone.cc	/^        const bool is_manifest_; \/\/ True if the file's name starts with MANIFEST.$/;"	m	class:leveldb::__anon21::final	file:
is_manifest_	util/zns/env_zone_cp.cc	/^		const bool is_manifest_;  \/\/ True if the file's name starts with MANIFEST.$/;"	m	class:leveldb::__anon8::ZoneFile	file:
is_manifest_	util/zns/env_zone_temp.cc	/^		const bool is_manifest_;  \/\/ True if the file's name starts with MANIFEST.$/;"	m	class:leveldb::__anon7::ZoneFile	file:
is_valid	util/env_windows.cc	/^  bool is_valid() const {$/;"	f	class:leveldb::__anon11::ScopedHandle
iter	table/iterator_wrapper.h	/^  Iterator* iter() const { return iter_; }$/;"	f	class:leveldb::IteratorWrapper
iter_	db/db_iter.cc	/^  Iterator* const iter_;$/;"	m	class:leveldb::__anon38::DBIter	file:
iter_	db/db_test.cc	/^    KVMap::const_iterator iter_;$/;"	m	class:leveldb::ModelDB::ModelIter	file:
iter_	db/memtable.cc	/^  MemTable::Table::Iterator iter_;$/;"	m	class:leveldb::MemTableIterator	file:
iter_	table/iterator_wrapper.h	/^  Iterator* iter_;$/;"	m	class:leveldb::IteratorWrapper
iter_	table/table_test.cc	/^  Iterator* iter_;$/;"	m	class:leveldb::KeyConvertingIterator	file:
iter_	util/env_zone.cc	/^        vector<File_Info*>::iterator iter_;$/;"	m	class:leveldb::__anon21::final	file:
kBadRecord	db/log_reader.h	/^    kBadRecord = kMaxRecordType + 2$/;"	e	enum:leveldb::log::Reader::__anon33
kBlockSize	db/log_format.h	/^static const int kBlockSize = 32768;$/;"	m	namespace:leveldb::log
kBlockSize	helpers/memenv/memenv.cc	/^  enum { kBlockSize = 8 * 1024 };$/;"	e	enum:leveldb::__anon5::FileState::__anon6	file:
kBlockSize	util/arena.cc	/^static const int kBlockSize = 4096;$/;"	m	namespace:leveldb	file:
kBlockTrailerSize	table/format.h	/^static const size_t kBlockTrailerSize = 5;$/;"	m	namespace:leveldb
kBucketLimit	util/histogram.cc	/^const double Histogram::kBucketLimit[kNumBuckets] = {$/;"	m	class:leveldb::Histogram	file:
kBucketLimit	util/histogram.h	/^  static const double kBucketLimit[kNumBuckets];$/;"	m	class:leveldb::Histogram
kByteExtensionTable	util/crc32c.cc	/^const uint32_t kByteExtensionTable[256] = {$/;"	m	namespace:leveldb::crc32c::__anon15	file:
kCRC32Xor	util/crc32c.cc	/^static constexpr const uint32_t kCRC32Xor = static_cast<uint32_t>(0xffffffffU);$/;"	m	namespace:leveldb::crc32c::__anon15	file:
kCacheSize	util/cache_test.cc	/^  static const int kCacheSize = 1000;$/;"	m	class:leveldb::CacheTest	file:
kCompactPointer	db/version_edit.cc	/^  kCompactPointer = 5,$/;"	e	enum:leveldb::Tag	file:
kComparator	db/version_edit.cc	/^  kComparator = 1,$/;"	e	enum:leveldb::Tag	file:
kCorrupt	db/version_set.cc	/^  kCorrupt,$/;"	e	enum:leveldb::__anon32::SaverState	file:
kCorruption	include/leveldb/status.h	/^    kCorruption = 2,$/;"	e	enum:leveldb::Status::Code
kCount	db/autocompact_test.cc	/^static const int kCount = kTotalSize \/ kValueSize;$/;"	m	namespace:leveldb	file:
kCurrentFile	db/filename.h	/^  kCurrentFile,$/;"	e	enum:leveldb::FileType
kDBLockFile	db/filename.h	/^  kDBLockFile,$/;"	e	enum:leveldb::FileType
kDefault	db/db_test.cc	/^  enum OptionConfig { kDefault, kReuse, kFilter, kUncompressed, kEnd };$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kDefaultMmapLimit	util/env_posix.cc	/^constexpr const int kDefaultMmapLimit = (sizeof(void*) >= 8) ? 1000 : 0;$/;"	m	namespace:leveldb::__anon19	file:
kDefaultMmapLimit	util/env_windows.cc	/^constexpr int kDefaultMmapLimit = (sizeof(void*) >= 8) ? 1000 : 0;$/;"	m	namespace:leveldb::__anon11	file:
kDelayMicros	util/env_test.cc	/^static const int kDelayMicros = 100000;$/;"	m	namespace:leveldb	file:
kDeleted	db/version_set.cc	/^  kDeleted,$/;"	e	enum:leveldb::__anon32::SaverState	file:
kDeletedFile	db/version_edit.cc	/^  kDeletedFile = 6,$/;"	e	enum:leveldb::Tag	file:
kDescriptorFile	db/filename.h	/^  kDescriptorFile,$/;"	e	enum:leveldb::FileType
kEncodedLength	table/format.h	/^  enum { kEncodedLength = 2 * BlockHandle::kMaxEncodedLength + 8 };$/;"	e	enum:leveldb::Footer::__anon26
kEnd	db/db_test.cc	/^  enum OptionConfig { kDefault, kReuse, kFilter, kUncompressed, kEnd };$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kEof	db/log_reader.h	/^    kEof = kMaxRecordType + 1,$/;"	e	enum:leveldb::log::Reader::__anon33
kFilter	db/db_test.cc	/^  enum OptionConfig { kDefault, kReuse, kFilter, kUncompressed, kEnd };$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kFilterBase	table/filter_block.cc	/^static const size_t kFilterBase = 1 << kFilterBaseLg;$/;"	m	namespace:leveldb	file:
kFilterBaseLg	table/filter_block.cc	/^static const size_t kFilterBaseLg = 11;$/;"	m	namespace:leveldb	file:
kFirstType	db/log_format.h	/^  kFirstType = 2,$/;"	e	enum:leveldb::log::RecordType
kForward	db/db_iter.cc	/^  enum Direction { kForward, kReverse };$/;"	e	enum:leveldb::__anon38::DBIter::Direction	file:
kForward	table/merger.cc	/^  enum Direction { kForward, kReverse };$/;"	e	enum:leveldb::__anon27::MergingIterator::Direction	file:
kFound	db/version_set.cc	/^  kFound,$/;"	e	enum:leveldb::__anon32::SaverState	file:
kFullType	db/log_format.h	/^  kFullType = 1,$/;"	e	enum:leveldb::log::RecordType
kGoldenA	util/no_destructor_test.cc	/^constexpr const uint32_t kGoldenA = 0xdeadbeef;$/;"	m	namespace:leveldb::__anon9	file:
kGoldenB	util/no_destructor_test.cc	/^constexpr const uint64_t kGoldenB = 0xaabbccddeeffaabb;$/;"	m	namespace:leveldb::__anon9	file:
kHeader	db/write_batch.cc	/^static const size_t kHeader = 12;$/;"	m	namespace:leveldb	file:
kHeaderSize	db/log_format.h	/^static const int kHeaderSize = 4 + 2 + 1;$/;"	m	namespace:leveldb::log
kIOError	include/leveldb/status.h	/^    kIOError = 5$/;"	e	enum:leveldb::Status::Code
kInfoLogFile	db/filename.h	/^  kInfoLogFile  \/\/ Either the current one, or an old one$/;"	e	enum:leveldb::FileType
kInvalidArgument	include/leveldb/status.h	/^    kInvalidArgument = 4,$/;"	e	enum:leveldb::Status::Code
kL0_CompactionTrigger	db/dbformat.h	/^static const int kL0_CompactionTrigger = 4;$/;"	m	namespace:leveldb::config
kL0_SlowdownWritesTrigger	db/dbformat.h	/^static const int kL0_SlowdownWritesTrigger = 8;$/;"	m	namespace:leveldb::config
kL0_StopWritesTrigger	db/dbformat.h	/^static const int kL0_StopWritesTrigger = 12;$/;"	m	namespace:leveldb::config
kLastSequence	db/version_edit.cc	/^  kLastSequence = 4,$/;"	e	enum:leveldb::Tag	file:
kLastType	db/log_format.h	/^  kLastType = 4$/;"	e	enum:leveldb::log::RecordType
kLittleEndian	port/port_example.h	/^static const bool kLittleEndian = true \/* or some other expression *\/;$/;"	m	namespace:leveldb::port
kLittleEndian	port/port_stdcxx.h	/^static const bool kLittleEndian = !LEVELDB_IS_BIG_ENDIAN;$/;"	m	namespace:leveldb::port
kLogFile	db/filename.h	/^  kLogFile,$/;"	e	enum:leveldb::FileType
kLogNumber	db/version_edit.cc	/^  kLogNumber = 2,$/;"	e	enum:leveldb::Tag	file:
kMMapLimit	util/env_posix_test.cc	/^static const int kMMapLimit = 4;$/;"	m	namespace:leveldb	file:
kMMapLimit	util/env_windows_test.cc	/^static const int kMMapLimit = 4;$/;"	m	namespace:leveldb	file:
kMajorVersion	include/leveldb/db.h	/^static const int kMajorVersion = 1;$/;"	m	namespace:leveldb
kMaskDelta	util/crc32c.h	/^static const uint32_t kMaskDelta = 0xa282ead8ul;$/;"	m	namespace:leveldb::crc32c
kMaxEncodedLength	table/format.h	/^  enum { kMaxEncodedLength = 10 + 10 };$/;"	e	enum:leveldb::BlockHandle::__anon25
kMaxHeight	db/skiplist.h	/^  enum { kMaxHeight = 12 };$/;"	e	enum:leveldb::SkipList::__anon34
kMaxMemCompactLevel	db/dbformat.h	/^static const int kMaxMemCompactLevel = 2;$/;"	m	namespace:leveldb::config
kMaxNumValues	db/fault_injection_test.cc	/^static const int kMaxNumValues = 2000;$/;"	m	namespace:leveldb	file:
kMaxRecordType	db/log_format.h	/^static const int kMaxRecordType = kLastType;$/;"	m	namespace:leveldb::log
kMaxSequenceNumber	db/dbformat.h	/^static const SequenceNumber kMaxSequenceNumber = ((0x1ull << 56) - 1);$/;"	m	namespace:leveldb
kMiddleType	db/log_format.h	/^  kMiddleType = 3,$/;"	e	enum:leveldb::log::RecordType
kMinorVersion	include/leveldb/db.h	/^static const int kMinorVersion = 22;$/;"	m	namespace:leveldb
kNewFile	db/version_edit.cc	/^  kNewFile = 7,$/;"	e	enum:leveldb::Tag	file:
kNextFileNumber	db/version_edit.cc	/^  kNextFileNumber = 3,$/;"	e	enum:leveldb::Tag	file:
kNoCompression	include/leveldb/options.h	/^  kNoCompression = 0x0,$/;"	e	enum:leveldb::CompressionType
kNotFound	db/version_set.cc	/^  kNotFound,$/;"	e	enum:leveldb::__anon32::SaverState	file:
kNotFound	include/leveldb/status.h	/^    kNotFound = 1,$/;"	e	enum:leveldb::Status::Code
kNotSupported	include/leveldb/status.h	/^    kNotSupported = 3,$/;"	e	enum:leveldb::Status::Code
kNumBuckets	util/histogram.h	/^  enum { kNumBuckets = 154 };$/;"	e	enum:leveldb::Histogram::__anon12
kNumIterations	db/fault_injection_test.cc	/^static const size_t kNumIterations = 3;$/;"	m	namespace:leveldb	file:
kNumKeys	db/db_test.cc	/^static const int kNumKeys = 1000;$/;"	m	namespace:leveldb::__anon42	file:
kNumKeys	issues/issue178_test.cc	/^const int kNumKeys = 1100000;$/;"	m	namespace:__anon22	file:
kNumLevels	db/dbformat.h	/^static const int kNumLevels = 7;$/;"	m	namespace:leveldb::config
kNumNonTableCacheFiles	db/db_impl.cc	/^const int kNumNonTableCacheFiles = 10;$/;"	m	namespace:leveldb	file:
kNumShardBits	util/cache.cc	/^static const int kNumShardBits = 4;$/;"	m	namespace:leveldb::__anon16	file:
kNumShards	util/cache.cc	/^static const int kNumShards = 1 << kNumShardBits;$/;"	m	namespace:leveldb::__anon16	file:
kNumTestArgs	table/table_test.cc	/^static const int kNumTestArgs = sizeof(kTestArgList) \/ sizeof(kTestArgList[0]);$/;"	m	namespace:leveldb	file:
kNumThreads	db/db_test.cc	/^static const int kNumThreads = 4;$/;"	m	namespace:leveldb::__anon42	file:
kOk	include/leveldb/status.h	/^    kOk = 0,$/;"	e	enum:leveldb::Status::Code
kOpenBaseFlags	util/env_posix.cc	/^constexpr const int kOpenBaseFlags = 0;$/;"	m	namespace:leveldb::__anon19	file:
kOpenBaseFlags	util/env_posix.cc	/^constexpr const int kOpenBaseFlags = O_CLOEXEC;$/;"	m	namespace:leveldb::__anon19	file:
kPrevLogNumber	db/version_edit.cc	/^  kPrevLogNumber = 9$/;"	e	enum:leveldb::Tag	file:
kReadBytesPeriod	db/dbformat.h	/^static const int kReadBytesPeriod = 1048576;$/;"	m	namespace:leveldb::config
kReadOnlyFileLimit	util/env_posix_test.cc	/^static const int kReadOnlyFileLimit = 4;$/;"	m	namespace:leveldb	file:
kReuse	db/db_test.cc	/^  enum OptionConfig { kDefault, kReuse, kFilter, kUncompressed, kEnd };$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kReverse	db/db_iter.cc	/^  enum Direction { kForward, kReverse };$/;"	e	enum:leveldb::__anon38::DBIter::Direction	file:
kReverse	table/merger.cc	/^  enum Direction { kForward, kReverse };$/;"	e	enum:leveldb::__anon27::MergingIterator::Direction	file:
kSnappyCompression	include/leveldb/options.h	/^  kSnappyCompression = 0x1$/;"	e	enum:leveldb::CompressionType
kStrideExtensionTable0	util/crc32c.cc	/^const uint32_t kStrideExtensionTable0[256] = {$/;"	m	namespace:leveldb::crc32c::__anon15	file:
kStrideExtensionTable1	util/crc32c.cc	/^const uint32_t kStrideExtensionTable1[256] = {$/;"	m	namespace:leveldb::crc32c::__anon15	file:
kStrideExtensionTable2	util/crc32c.cc	/^const uint32_t kStrideExtensionTable2[256] = {$/;"	m	namespace:leveldb::crc32c::__anon15	file:
kStrideExtensionTable3	util/crc32c.cc	/^const uint32_t kStrideExtensionTable3[256] = {$/;"	m	namespace:leveldb::crc32c::__anon15	file:
kTableFile	db/filename.h	/^  kTableFile,$/;"	e	enum:leveldb::FileType
kTableMagicNumber	table/format.h	/^static const uint64_t kTableMagicNumber = 0xdb4775248b80fb57ull;$/;"	m	namespace:leveldb
kTempFile	db/filename.h	/^  kTempFile,$/;"	e	enum:leveldb::FileType
kTestArgList	table/table_test.cc	/^static const TestArgs kTestArgList[] = {$/;"	m	namespace:leveldb	file:
kTestCloseOnExecSwitch	util/env_posix_test.cc	/^static const char kTestCloseOnExecSwitch[] = "--test-close-on-exec-helper";$/;"	m	namespace:__anon13	file:
kTestSeconds	db/db_test.cc	/^static const int kTestSeconds = 10;$/;"	m	namespace:leveldb::__anon42	file:
kTextCloseOnExecHelperDup2FailedCode	util/env_posix_test.cc	/^constexpr int kTextCloseOnExecHelperDup2FailedCode = 62;$/;"	m	namespace:__anon13	file:
kTextCloseOnExecHelperExecFailedCode	util/env_posix_test.cc	/^constexpr int kTextCloseOnExecHelperExecFailedCode = 61;$/;"	m	namespace:__anon13	file:
kTextCloseOnExecHelperFoundOpenFdCode	util/env_posix_test.cc	/^constexpr int kTextCloseOnExecHelperFoundOpenFdCode = 63;$/;"	m	namespace:__anon13	file:
kTotalSize	db/autocompact_test.cc	/^static const int kTotalSize = 100 * 1024 * 1024;$/;"	m	namespace:leveldb	file:
kTypeDeletion	db/dbformat.h	/^enum ValueType { kTypeDeletion = 0x0, kTypeValue = 0x1 };$/;"	e	enum:leveldb::ValueType
kTypeValue	db/dbformat.h	/^enum ValueType { kTypeDeletion = 0x0, kTypeValue = 0x1 };$/;"	e	enum:leveldb::ValueType
kUncompressed	db/db_test.cc	/^  enum OptionConfig { kDefault, kReuse, kFilter, kUncompressed, kEnd };$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kValueSize	db/autocompact_test.cc	/^static const int kValueSize = 200 * 1024;$/;"	m	namespace:leveldb	file:
kValueSize	db/corruption_test.cc	/^static const int kValueSize = 1000;$/;"	m	namespace:leveldb	file:
kValueSize	db/fault_injection_test.cc	/^static const int kValueSize = 1000;$/;"	m	namespace:leveldb	file:
kValueTypeForSeek	db/dbformat.h	/^static const ValueType kValueTypeForSeek = kTypeValue;$/;"	m	namespace:leveldb
kVerbose	util/bloom_test.cc	/^static const int kVerbose = 1;$/;"	m	namespace:leveldb	file:
kWritableFileBufferSize	util/env_posix.cc	/^constexpr const size_t kWritableFileBufferSize = 65536;$/;"	m	namespace:leveldb::__anon19	file:
kWritableFileBufferSize	util/env_windows.cc	/^constexpr const size_t kWritableFileBufferSize = 65536;$/;"	m	namespace:leveldb::__anon11	file:
kWritableFileBufferSize	util/zns/env_zone_cp.cc	/^		constexpr const size_t kWritableFileBufferSize = 0;\/\/512;$/;"	m	namespace:leveldb::__anon8	file:
kWritableFileBufferSize	util/zns/env_zone_temp.cc	/^		constexpr const size_t kWritableFileBufferSize = 0;\/\/512;$/;"	m	namespace:leveldb::__anon7	file:
kZeroType	db/log_format.h	/^  kZeroType = 0,$/;"	e	enum:leveldb::log::RecordType
k_	util/bloom.cc	/^  size_t k_;$/;"	m	class:leveldb::__anon18::BloomFilterPolicy	file:
kas	zns_ctl/controller.h	/^	__le16			kas;$/;"	m	struct:nvme_id_ctrl
key	db/skiplist.h	/^  Key const key;$/;"	m	struct:leveldb::SkipList::Node
key	db/skiplist.h	/^inline const Key& SkipList<Key, Comparator>::Iterator::key() const {$/;"	f	class:leveldb::SkipList::Iterator
key	db/skiplist_test.cc	/^  static uint64_t key(Key key) { return (key >> 40); }$/;"	f	class:leveldb::ConcurrentTest	file:
key	table/iterator_wrapper.h	/^  Slice key() const {$/;"	f	class:leveldb::IteratorWrapper
key	util/cache.cc	/^  Slice key() const {$/;"	f	struct:leveldb::__anon16::LRUHandle
key_	table/block.cc	/^  std::string key_;$/;"	m	class:leveldb::Block::Iter	file:
key_	table/iterator_wrapper.h	/^  Slice key_;$/;"	m	class:leveldb::IteratorWrapper
key_data	util/cache.cc	/^  char key_data[1];  \/\/ Beginning of key$/;"	m	struct:leveldb::__anon16::LRUHandle	file:
key_length	util/cache.cc	/^  size_t key_length;$/;"	m	struct:leveldb::__anon16::LRUHandle	file:
key_match_	db/c.cc	/^  uint8_t (*key_match_)(void*, const char* key, size_t length,$/;"	m	struct:leveldb_filterpolicy_t	file:
keys_	table/filter_block.h	/^  std::string keys_;             \/\/ Flattened key contents$/;"	m	class:leveldb::FilterBlockBuilder
keys_	util/bloom_test.cc	/^  std::vector<std::string> keys_;$/;"	m	class:leveldb::BloomTest	file:
kstart_	db/dbformat.h	/^  const char* kstart_;$/;"	m	class:leveldb::LookupKey
l2z_map	util/zns/env_zone_cp.cc	/^        std::multimap<unsigned int, unsigned int> l2z_map;$/;"	m	class:leveldb::__anon8::ZoneEnv	file:
l2z_map	util/zns/env_zone_temp.cc	/^		std::multimap<unsigned int, unsigned int> l2z_map;$/;"	m	class:leveldb::__anon7::Z_interface	file:
largest	db/db_impl.cc	/^    InternalKey smallest, largest;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
largest	db/version_edit.h	/^  InternalKey largest;   \/\/ Largest internal key served by table$/;"	m	struct:leveldb::FileMetaData
last_id_	util/cache.cc	/^  uint64_t last_id_;$/;"	m	class:leveldb::__anon16::ShardedLRUCache	file:
last_key	table/table_builder.cc	/^  std::string last_key;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
last_key_	table/block_builder.h	/^  std::string last_key_;$/;"	m	class:leveldb::BlockBuilder
last_op_finish_	benchmarks/db_bench.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::__anon4::Stats	file:
last_op_finish_	benchmarks/db_bench_sqlite3.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::Benchmark	file:
last_op_finish_	benchmarks/db_bench_tree_db.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::Benchmark	file:
last_options_	db/db_test.cc	/^  Options last_options_;$/;"	m	class:leveldb::DBTest	file:
last_record_offset_	db/log_reader.h	/^  uint64_t last_record_offset_;$/;"	m	class:leveldb::log::Reader
last_sequence_	db/version_edit.h	/^  SequenceNumber last_sequence_;$/;"	m	class:leveldb::VersionEdit
last_sequence_	db/version_set.h	/^  uint64_t last_sequence_;$/;"	m	class:leveldb::VersionSet
lbaf	zns_ctl/controller.h	/^	struct nvme_lbaf	lbaf[16];$/;"	m	struct:nvme_id_ns	typeref:struct:nvme_id_ns::nvme_lbaf
le16_to_cpu	zns_ctl/controller.h	/^static inline uint16_t le16_to_cpu(__le16 x)$/;"	f
le32_to_cpu	zns_ctl/controller.h	/^static inline uint32_t le32_to_cpu(__le32 x)$/;"	f
le64_to_cpu	zns_ctl/controller.h	/^static inline uint64_t le64_to_cpu(__le64 x)$/;"	f
length_	util/cache.cc	/^  uint32_t length_;$/;"	m	class:leveldb::__anon16::HandleTable	file:
length_	util/env_posix.cc	/^  const size_t length_;$/;"	m	class:leveldb::__anon19::final	file:
length_	util/env_windows.cc	/^  const size_t length_;$/;"	m	class:leveldb::__anon11::WindowsMmapReadableFile	file:
level	db/db_impl.h	/^    int level;$/;"	m	struct:leveldb::DBImpl::ManualCompaction
level	db/version_set.h	/^  int level() const { return level_; }$/;"	f	class:leveldb::Compaction
level	zns_ctl/controller.h	/^	int level;$/;"	m	struct:zns_zone_info
level_	db/version_set.h	/^  int level_;$/;"	m	class:leveldb::Compaction
level_	util/zns/env_zone_cp.cc	/^		uint64_t level_;$/;"	m	class:leveldb::__anon8::ZoneFile	file:
level_	util/zns/env_zone_temp.cc	/^		uint64_t level_;$/;"	m	class:leveldb::__anon7::ZoneFile	file:
level_files_	db/version_set_test.cc	/^  std::vector<FileMetaData*> level_files_;$/;"	m	class:leveldb::AddBoundaryInputsTest	file:
level_ptrs_	db/version_set.h	/^  size_t level_ptrs_[config::kNumLevels];$/;"	m	class:leveldb::Compaction
leveldb	benchmarks/db_bench.cc	/^namespace leveldb {$/;"	n	file:
leveldb	benchmarks/db_bench_sqlite3.cc	/^namespace leveldb {$/;"	n	file:
leveldb	benchmarks/db_bench_tree_db.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/autocompact_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/builder.h	/^namespace leveldb {$/;"	n
leveldb	db/corruption_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/db_impl.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/db_impl.h	/^namespace leveldb {$/;"	n
leveldb	db/db_iter.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/db_iter.h	/^namespace leveldb {$/;"	n
leveldb	db/db_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/dbformat.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/dbformat.h	/^namespace leveldb {$/;"	n
leveldb	db/dbformat_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/dumpfile.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/fault_injection_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/filename.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/filename.h	/^namespace leveldb {$/;"	n
leveldb	db/filename_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/leveldbutil.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/log_format.h	/^namespace leveldb {$/;"	n
leveldb	db/log_reader.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/log_reader.h	/^namespace leveldb {$/;"	n
leveldb	db/log_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/log_writer.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/log_writer.h	/^namespace leveldb {$/;"	n
leveldb	db/memtable.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/memtable.h	/^namespace leveldb {$/;"	n
leveldb	db/recovery_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/repair.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/skiplist.h	/^namespace leveldb {$/;"	n
leveldb	db/skiplist_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/snapshot.h	/^namespace leveldb {$/;"	n
leveldb	db/table_cache.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/table_cache.h	/^namespace leveldb {$/;"	n
leveldb	db/version_edit.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/version_edit.h	/^namespace leveldb {$/;"	n
leveldb	db/version_edit_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/version_set.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/version_set.h	/^namespace leveldb {$/;"	n
leveldb	db/version_set_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/write_batch.cc	/^namespace leveldb {$/;"	n	file:
leveldb	db/write_batch_internal.h	/^namespace leveldb {$/;"	n
leveldb	db/write_batch_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	helpers/memenv/memenv.cc	/^namespace leveldb {$/;"	n	file:
leveldb	helpers/memenv/memenv.h	/^namespace leveldb {$/;"	n
leveldb	helpers/memenv/memenv_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	include/leveldb/cache.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/comparator.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/db.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/dumpfile.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/env.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/filter_policy.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/iterator.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/options.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/slice.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/status.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/table.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/table_builder.h	/^namespace leveldb {$/;"	n
leveldb	include/leveldb/write_batch.h	/^namespace leveldb {$/;"	n
leveldb	issues/issue200_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	issues/issue320_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	port/port_example.h	/^namespace leveldb {$/;"	n
leveldb	port/port_stdcxx.h	/^namespace leveldb {$/;"	n
leveldb	table/block.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/block.h	/^namespace leveldb {$/;"	n
leveldb	table/block_builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/block_builder.h	/^namespace leveldb {$/;"	n
leveldb	table/filter_block.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/filter_block.h	/^namespace leveldb {$/;"	n
leveldb	table/filter_block_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/format.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/format.h	/^namespace leveldb {$/;"	n
leveldb	table/iterator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/iterator_wrapper.h	/^namespace leveldb {$/;"	n
leveldb	table/merger.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/merger.h	/^namespace leveldb {$/;"	n
leveldb	table/table.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/table_builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/table_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/two_level_iterator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	table/two_level_iterator.h	/^namespace leveldb {$/;"	n
leveldb	util/arena.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/arena.h	/^namespace leveldb {$/;"	n
leveldb	util/arena_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/bloom.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/bloom_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/cache.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/cache_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/coding.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/coding.h	/^namespace leveldb {$/;"	n
leveldb	util/coding_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/comparator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/crc32c.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/crc32c.h	/^namespace leveldb {$/;"	n
leveldb	util/crc32c_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/env.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/env_posix.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/env_posix_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/env_posix_test_helper.h	/^namespace leveldb {$/;"	n
leveldb	util/env_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/env_windows.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/env_windows_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/env_windows_test_helper.h	/^namespace leveldb {$/;"	n
leveldb	util/env_zone.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/env_zone_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/filter_policy.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/hash.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/hash.h	/^namespace leveldb {$/;"	n
leveldb	util/hash_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/histogram.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/histogram.h	/^namespace leveldb {$/;"	n
leveldb	util/logging.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/logging.h	/^namespace leveldb {$/;"	n
leveldb	util/logging_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/mutexlock.h	/^namespace leveldb {$/;"	n
leveldb	util/no_destructor.h	/^namespace leveldb {$/;"	n
leveldb	util/no_destructor_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/options.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/posix_logger.h	/^namespace leveldb {$/;"	n
leveldb	util/random.h	/^namespace leveldb {$/;"	n
leveldb	util/status.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/status_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/testharness.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/testharness.h	/^namespace leveldb {$/;"	n
leveldb	util/testutil.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/testutil.h	/^namespace leveldb {$/;"	n
leveldb	util/windows_logger.h	/^namespace leveldb {$/;"	n
leveldb	util/zns/env_zone_cp.cc	/^namespace leveldb {$/;"	n	file:
leveldb	util/zns/env_zone_temp.cc	/^namespace leveldb {$/;"	n	file:
leveldb_approximate_sizes	db/c.cc	/^void leveldb_approximate_sizes(leveldb_t* db, int num_ranges,$/;"	f
leveldb_cache_create_lru	db/c.cc	/^leveldb_cache_t* leveldb_cache_create_lru(size_t capacity) {$/;"	f
leveldb_cache_destroy	db/c.cc	/^void leveldb_cache_destroy(leveldb_cache_t* cache) {$/;"	f
leveldb_cache_t	db/c.cc	/^struct leveldb_cache_t {$/;"	s	file:
leveldb_cache_t	include/leveldb/c.h	/^typedef struct leveldb_cache_t leveldb_cache_t;$/;"	t	typeref:struct:leveldb_cache_t
leveldb_close	db/c.cc	/^void leveldb_close(leveldb_t* db) {$/;"	f
leveldb_compact_range	db/c.cc	/^void leveldb_compact_range(leveldb_t* db, const char* start_key,$/;"	f
leveldb_comparator_create	db/c.cc	/^leveldb_comparator_t* leveldb_comparator_create($/;"	f
leveldb_comparator_destroy	db/c.cc	/^void leveldb_comparator_destroy(leveldb_comparator_t* cmp) { delete cmp; }$/;"	f
leveldb_comparator_t	db/c.cc	/^struct leveldb_comparator_t : public Comparator {$/;"	s	file:
leveldb_comparator_t	include/leveldb/c.h	/^typedef struct leveldb_comparator_t leveldb_comparator_t;$/;"	t	typeref:struct:leveldb_comparator_t
leveldb_create_default_env	db/c.cc	/^leveldb_env_t* leveldb_create_default_env() {$/;"	f
leveldb_create_iterator	db/c.cc	/^leveldb_iterator_t* leveldb_create_iterator($/;"	f
leveldb_create_snapshot	db/c.cc	/^const leveldb_snapshot_t* leveldb_create_snapshot(leveldb_t* db) {$/;"	f
leveldb_delete	db/c.cc	/^void leveldb_delete(leveldb_t* db, const leveldb_writeoptions_t* options,$/;"	f
leveldb_destroy_db	db/c.cc	/^void leveldb_destroy_db(const leveldb_options_t* options, const char* name,$/;"	f
leveldb_env_destroy	db/c.cc	/^void leveldb_env_destroy(leveldb_env_t* env) {$/;"	f
leveldb_env_get_test_directory	db/c.cc	/^char* leveldb_env_get_test_directory(leveldb_env_t* env) {$/;"	f
leveldb_env_t	db/c.cc	/^struct leveldb_env_t {$/;"	s	file:
leveldb_env_t	include/leveldb/c.h	/^typedef struct leveldb_env_t leveldb_env_t;$/;"	t	typeref:struct:leveldb_env_t
leveldb_filelock_t	db/c.cc	/^struct leveldb_filelock_t {$/;"	s	file:
leveldb_filelock_t	include/leveldb/c.h	/^typedef struct leveldb_filelock_t leveldb_filelock_t;$/;"	t	typeref:struct:leveldb_filelock_t
leveldb_filterpolicy_create	db/c.cc	/^leveldb_filterpolicy_t* leveldb_filterpolicy_create($/;"	f
leveldb_filterpolicy_create_bloom	db/c.cc	/^leveldb_filterpolicy_t* leveldb_filterpolicy_create_bloom(int bits_per_key) {$/;"	f
leveldb_filterpolicy_destroy	db/c.cc	/^void leveldb_filterpolicy_destroy(leveldb_filterpolicy_t* filter) {$/;"	f
leveldb_filterpolicy_t	db/c.cc	/^struct leveldb_filterpolicy_t : public FilterPolicy {$/;"	s	file:
leveldb_filterpolicy_t	include/leveldb/c.h	/^typedef struct leveldb_filterpolicy_t leveldb_filterpolicy_t;$/;"	t	typeref:struct:leveldb_filterpolicy_t
leveldb_free	db/c.cc	/^void leveldb_free(void* ptr) { free(ptr); }$/;"	f
leveldb_get	db/c.cc	/^char* leveldb_get(leveldb_t* db, const leveldb_readoptions_t* options,$/;"	f
leveldb_iter_destroy	db/c.cc	/^void leveldb_iter_destroy(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_get_error	db/c.cc	/^void leveldb_iter_get_error(const leveldb_iterator_t* iter, char** errptr) {$/;"	f
leveldb_iter_key	db/c.cc	/^const char* leveldb_iter_key(const leveldb_iterator_t* iter, size_t* klen) {$/;"	f
leveldb_iter_next	db/c.cc	/^void leveldb_iter_next(leveldb_iterator_t* iter) { iter->rep->Next(); }$/;"	f
leveldb_iter_prev	db/c.cc	/^void leveldb_iter_prev(leveldb_iterator_t* iter) { iter->rep->Prev(); }$/;"	f
leveldb_iter_seek	db/c.cc	/^void leveldb_iter_seek(leveldb_iterator_t* iter, const char* k, size_t klen) {$/;"	f
leveldb_iter_seek_to_first	db/c.cc	/^void leveldb_iter_seek_to_first(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_seek_to_last	db/c.cc	/^void leveldb_iter_seek_to_last(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_valid	db/c.cc	/^uint8_t leveldb_iter_valid(const leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_value	db/c.cc	/^const char* leveldb_iter_value(const leveldb_iterator_t* iter, size_t* vlen) {$/;"	f
leveldb_iterator_t	db/c.cc	/^struct leveldb_iterator_t {$/;"	s	file:
leveldb_iterator_t	include/leveldb/c.h	/^typedef struct leveldb_iterator_t leveldb_iterator_t;$/;"	t	typeref:struct:leveldb_iterator_t
leveldb_logger_t	db/c.cc	/^struct leveldb_logger_t {$/;"	s	file:
leveldb_logger_t	include/leveldb/c.h	/^typedef struct leveldb_logger_t leveldb_logger_t;$/;"	t	typeref:struct:leveldb_logger_t
leveldb_major_version	db/c.cc	/^int leveldb_major_version() { return kMajorVersion; }$/;"	f
leveldb_minor_version	db/c.cc	/^int leveldb_minor_version() { return kMinorVersion; }$/;"	f
leveldb_no_compression	include/leveldb/c.h	/^enum { leveldb_no_compression = 0, leveldb_snappy_compression = 1 };$/;"	e	enum:__anon1
leveldb_open	db/c.cc	/^leveldb_t* leveldb_open(const leveldb_options_t* options, const char* name,$/;"	f
leveldb_options_create	db/c.cc	/^leveldb_options_t* leveldb_options_create() { return new leveldb_options_t; }$/;"	f
leveldb_options_destroy	db/c.cc	/^void leveldb_options_destroy(leveldb_options_t* options) { delete options; }$/;"	f
leveldb_options_set_block_restart_interval	db/c.cc	/^void leveldb_options_set_block_restart_interval(leveldb_options_t* opt, int n) {$/;"	f
leveldb_options_set_block_size	db/c.cc	/^void leveldb_options_set_block_size(leveldb_options_t* opt, size_t s) {$/;"	f
leveldb_options_set_cache	db/c.cc	/^void leveldb_options_set_cache(leveldb_options_t* opt, leveldb_cache_t* c) {$/;"	f
leveldb_options_set_comparator	db/c.cc	/^void leveldb_options_set_comparator(leveldb_options_t* opt,$/;"	f
leveldb_options_set_compression	db/c.cc	/^void leveldb_options_set_compression(leveldb_options_t* opt, int t) {$/;"	f
leveldb_options_set_create_if_missing	db/c.cc	/^void leveldb_options_set_create_if_missing(leveldb_options_t* opt, uint8_t v) {$/;"	f
leveldb_options_set_env	db/c.cc	/^void leveldb_options_set_env(leveldb_options_t* opt, leveldb_env_t* env) {$/;"	f
leveldb_options_set_error_if_exists	db/c.cc	/^void leveldb_options_set_error_if_exists(leveldb_options_t* opt, uint8_t v) {$/;"	f
leveldb_options_set_filter_policy	db/c.cc	/^void leveldb_options_set_filter_policy(leveldb_options_t* opt,$/;"	f
leveldb_options_set_info_log	db/c.cc	/^void leveldb_options_set_info_log(leveldb_options_t* opt, leveldb_logger_t* l) {$/;"	f
leveldb_options_set_max_file_size	db/c.cc	/^void leveldb_options_set_max_file_size(leveldb_options_t* opt, size_t s) {$/;"	f
leveldb_options_set_max_open_files	db/c.cc	/^void leveldb_options_set_max_open_files(leveldb_options_t* opt, int n) {$/;"	f
leveldb_options_set_paranoid_checks	db/c.cc	/^void leveldb_options_set_paranoid_checks(leveldb_options_t* opt, uint8_t v) {$/;"	f
leveldb_options_set_write_buffer_size	db/c.cc	/^void leveldb_options_set_write_buffer_size(leveldb_options_t* opt, size_t s) {$/;"	f
leveldb_options_t	db/c.cc	/^struct leveldb_options_t {$/;"	s	file:
leveldb_options_t	include/leveldb/c.h	/^typedef struct leveldb_options_t leveldb_options_t;$/;"	t	typeref:struct:leveldb_options_t
leveldb_property_value	db/c.cc	/^char* leveldb_property_value(leveldb_t* db, const char* propname) {$/;"	f
leveldb_put	db/c.cc	/^void leveldb_put(leveldb_t* db, const leveldb_writeoptions_t* options,$/;"	f
leveldb_randomfile_t	db/c.cc	/^struct leveldb_randomfile_t {$/;"	s	file:
leveldb_randomfile_t	include/leveldb/c.h	/^typedef struct leveldb_randomfile_t leveldb_randomfile_t;$/;"	t	typeref:struct:leveldb_randomfile_t
leveldb_readoptions_create	db/c.cc	/^leveldb_readoptions_t* leveldb_readoptions_create() {$/;"	f
leveldb_readoptions_destroy	db/c.cc	/^void leveldb_readoptions_destroy(leveldb_readoptions_t* opt) { delete opt; }$/;"	f
leveldb_readoptions_set_fill_cache	db/c.cc	/^void leveldb_readoptions_set_fill_cache(leveldb_readoptions_t* opt, uint8_t v) {$/;"	f
leveldb_readoptions_set_snapshot	db/c.cc	/^void leveldb_readoptions_set_snapshot(leveldb_readoptions_t* opt,$/;"	f
leveldb_readoptions_set_verify_checksums	db/c.cc	/^void leveldb_readoptions_set_verify_checksums(leveldb_readoptions_t* opt,$/;"	f
leveldb_readoptions_t	db/c.cc	/^struct leveldb_readoptions_t {$/;"	s	file:
leveldb_readoptions_t	include/leveldb/c.h	/^typedef struct leveldb_readoptions_t leveldb_readoptions_t;$/;"	t	typeref:struct:leveldb_readoptions_t
leveldb_release_snapshot	db/c.cc	/^void leveldb_release_snapshot(leveldb_t* db,$/;"	f
leveldb_repair_db	db/c.cc	/^void leveldb_repair_db(const leveldb_options_t* options, const char* name,$/;"	f
leveldb_seqfile_t	db/c.cc	/^struct leveldb_seqfile_t {$/;"	s	file:
leveldb_seqfile_t	include/leveldb/c.h	/^typedef struct leveldb_seqfile_t leveldb_seqfile_t;$/;"	t	typeref:struct:leveldb_seqfile_t
leveldb_snappy_compression	include/leveldb/c.h	/^enum { leveldb_no_compression = 0, leveldb_snappy_compression = 1 };$/;"	e	enum:__anon1
leveldb_snapshot_t	db/c.cc	/^struct leveldb_snapshot_t {$/;"	s	file:
leveldb_snapshot_t	include/leveldb/c.h	/^typedef struct leveldb_snapshot_t leveldb_snapshot_t;$/;"	t	typeref:struct:leveldb_snapshot_t
leveldb_t	db/c.cc	/^struct leveldb_t {$/;"	s	file:
leveldb_t	include/leveldb/c.h	/^typedef struct leveldb_t leveldb_t;$/;"	t	typeref:struct:leveldb_t
leveldb_writablefile_t	db/c.cc	/^struct leveldb_writablefile_t {$/;"	s	file:
leveldb_writablefile_t	include/leveldb/c.h	/^typedef struct leveldb_writablefile_t leveldb_writablefile_t;$/;"	t	typeref:struct:leveldb_writablefile_t
leveldb_write	db/c.cc	/^void leveldb_write(leveldb_t* db, const leveldb_writeoptions_t* options,$/;"	f
leveldb_writebatch_append	db/c.cc	/^void leveldb_writebatch_append(leveldb_writebatch_t* destination,$/;"	f
leveldb_writebatch_clear	db/c.cc	/^void leveldb_writebatch_clear(leveldb_writebatch_t* b) { b->rep.Clear(); }$/;"	f
leveldb_writebatch_create	db/c.cc	/^leveldb_writebatch_t* leveldb_writebatch_create() {$/;"	f
leveldb_writebatch_delete	db/c.cc	/^void leveldb_writebatch_delete(leveldb_writebatch_t* b, const char* key,$/;"	f
leveldb_writebatch_destroy	db/c.cc	/^void leveldb_writebatch_destroy(leveldb_writebatch_t* b) { delete b; }$/;"	f
leveldb_writebatch_iterate	db/c.cc	/^void leveldb_writebatch_iterate(const leveldb_writebatch_t* b, void* state,$/;"	f
leveldb_writebatch_put	db/c.cc	/^void leveldb_writebatch_put(leveldb_writebatch_t* b, const char* key,$/;"	f
leveldb_writebatch_t	db/c.cc	/^struct leveldb_writebatch_t {$/;"	s	file:
leveldb_writebatch_t	include/leveldb/c.h	/^typedef struct leveldb_writebatch_t leveldb_writebatch_t;$/;"	t	typeref:struct:leveldb_writebatch_t
leveldb_writeoptions_create	db/c.cc	/^leveldb_writeoptions_t* leveldb_writeoptions_create() {$/;"	f
leveldb_writeoptions_destroy	db/c.cc	/^void leveldb_writeoptions_destroy(leveldb_writeoptions_t* opt) { delete opt; }$/;"	f
leveldb_writeoptions_set_sync	db/c.cc	/^void leveldb_writeoptions_set_sync(leveldb_writeoptions_t* opt, uint8_t v) {$/;"	f
leveldb_writeoptions_t	db/c.cc	/^struct leveldb_writeoptions_t {$/;"	s	file:
leveldb_writeoptions_t	include/leveldb/c.h	/^typedef struct leveldb_writeoptions_t leveldb_writeoptions_t;$/;"	t	typeref:struct:leveldb_writeoptions_t
levels_	db/version_set.cc	/^  LevelState levels_[config::kNumLevels];$/;"	m	class:leveldb::VersionSet::Builder	file:
limit	include/leveldb/db.h	/^  Slice limit;  \/\/ Not included in the range$/;"	m	struct:leveldb::Range
line_	util/testharness.h	/^  int line_;$/;"	m	class:leveldb::test::Tester
list_	db/skiplist.h	/^    const SkipList* list_;$/;"	m	class:leveldb::SkipList::Iterator
list_	db/skiplist_test.cc	/^  SkipList<Key, Comparator> list_;$/;"	m	class:leveldb::ConcurrentTest	file:
list_	db/snapshot.h	/^  SnapshotList* list_ = nullptr;$/;"	m	class:leveldb::SnapshotImpl
list_	util/cache.cc	/^  LRUHandle** list_;$/;"	m	class:leveldb::__anon16::HandleTable	file:
locks_	util/env_posix.cc	/^  PosixLockTable locks_;  \/\/ Thread-safe.$/;"	m	class:leveldb::__anon19::PosixEnv	file:
locks_	util/env_zone.cc	/^		ZoneLockTable locks_;$/;"	m	class:leveldb::__anon21::ZoneEnv	file:
locks_	util/zns/env_zone_cp.cc	/^		ZoneLockTable locks_;$/;"	m	class:leveldb::__anon8::ZoneEnv	file:
locks_	util/zns/env_zone_temp.cc	/^		ZoneLockTable locks_;$/;"	m	class:leveldb::__anon7::ZoneEnv	file:
log	db/log_format.h	/^namespace log {$/;"	n	namespace:leveldb
log	db/log_reader.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	db/log_reader.h	/^namespace log {$/;"	n	namespace:leveldb
log	db/log_test.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	db/log_writer.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	db/log_writer.h	/^namespace log {$/;"	n	namespace:leveldb
log	db/version_set.h	/^namespace log {$/;"	n	namespace:leveldb
log_	db/db_impl.h	/^  log::Writer* log_;$/;"	m	class:leveldb::DBImpl
log_number_	db/version_edit.h	/^  uint64_t log_number_;$/;"	m	class:leveldb::VersionEdit
log_number_	db/version_set.h	/^  uint64_t log_number_;$/;"	m	class:leveldb::VersionSet
logfile_	db/db_impl.h	/^  WritableFile* logfile_;$/;"	m	class:leveldb::DBImpl
logs_	db/repair.cc	/^  std::vector<uint64_t> logs_;$/;"	m	class:leveldb::__anon37::Repairer	file:
lpa	zns_ctl/controller.h	/^	__u8			lpa;$/;"	m	struct:nvme_id_ctrl
main	benchmarks/db_bench.cc	/^int main(int argc, char** argv) {$/;"	f
main	benchmarks/db_bench_sqlite3.cc	/^int main(int argc, char** argv) {$/;"	f
main	benchmarks/db_bench_tree_db.cc	/^int main(int argc, char** argv) {$/;"	f
main	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	build/CMakeFiles/CheckTypeSize/CMAKE_SIZEOF_UNSIGNED_SHORT.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	db/autocompact_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	db/c_test.c	/^int main(int argc, char** argv) {$/;"	f
main	db/corruption_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	db/db_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	db/dbformat_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	db/fault_injection_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	db/filename_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	db/leveldbutil.cc	/^int main(int argc, char** argv) {$/;"	f
main	db/log_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	db/recovery_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	db/skiplist_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	db/version_edit_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	db/version_set_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	db/write_batch_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	helpers/memenv/memenv_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	issues/issue178_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	issues/issue200_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	issues/issue320_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	table/filter_block_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	table/table_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	util/arena_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	util/bloom_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	util/cache_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	util/coding_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	util/crc32c_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	util/env_posix_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	util/env_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	util/env_windows_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	util/env_zone_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	util/hash_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	util/logging_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	util/no_destructor_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	util/status_test.cc	/^int main(int argc, char** argv) { return leveldb::test::RunAllTests(); }$/;"	f
main	zns_ctl/main.cc	/^int main()$/;"	f
manifest_file_number_	db/version_set.h	/^  uint64_t manifest_file_number_;$/;"	m	class:leveldb::VersionSet
manifest_sync_error_	db/db_test.cc	/^  std::atomic<bool> manifest_sync_error_;$/;"	m	class:leveldb::SpecialEnv	file:
manifest_write_error_	db/db_test.cc	/^  std::atomic<bool> manifest_write_error_;$/;"	m	class:leveldb::SpecialEnv	file:
manifests_	db/repair.cc	/^  std::vector<std::string> manifests_;$/;"	m	class:leveldb::__anon37::Repairer	file:
map_	db/db_test.cc	/^    KVMap map_;$/;"	m	class:leveldb::ModelDB::ModelSnapshot	file:
map_	db/db_test.cc	/^    const KVMap* const map_;$/;"	m	class:leveldb::ModelDB::ModelIter	file:
map_	db/db_test.cc	/^  KVMap map_;$/;"	m	class:leveldb::ModelDB	file:
max_	util/histogram.h	/^  double max_;$/;"	m	class:leveldb::Histogram
max_file_size	include/leveldb/options.h	/^  size_t max_file_size = 2 * 1024 * 1024;$/;"	m	struct:leveldb::Options
max_height_	db/skiplist.h	/^  std::atomic<int> max_height_;  \/\/ Height of the entire list$/;"	m	class:leveldb::SkipList
max_open_files	include/leveldb/options.h	/^  int max_open_files = 1000;$/;"	m	struct:leveldb::Options
max_output_file_size_	db/version_set.h	/^  uint64_t max_output_file_size_;$/;"	m	class:leveldb::Compaction
max_power	zns_ctl/controller.h	/^	__le16			max_power;	\/* centiwatts *\/$/;"	m	struct:nvme_id_power_state
max_sequence	db/repair.cc	/^    SequenceNumber max_sequence;$/;"	m	struct:leveldb::__anon37::Repairer::TableInfo	file:
maxcmd	zns_ctl/controller.h	/^	__le16			maxcmd;$/;"	m	struct:nvme_id_ctrl
mc	zns_ctl/controller.h	/^	__u8			mc;$/;"	m	struct:nvme_id_ns
mdts	zns_ctl/controller.h	/^	__u8			mdts;$/;"	m	struct:nvme_id_ctrl
mem_	db/db_impl.h	/^  MemTable* mem_;$/;"	m	class:leveldb::DBImpl
mem_	db/write_batch.cc	/^  MemTable* mem_;$/;"	m	class:leveldb::__anon36::MemTableInserter	file:
memory_usage_	util/arena.h	/^  std::atomic<size_t> memory_usage_;$/;"	m	class:leveldb::Arena
memtable_	table/table_test.cc	/^  MemTable* memtable_;$/;"	m	class:leveldb::MemTableConstructor	file:
memtable_key	db/dbformat.h	/^  Slice memtable_key() const { return Slice(start_, end_ - start_); }$/;"	f	class:leveldb::LookupKey
message_	benchmarks/db_bench.cc	/^  std::string message_;$/;"	m	class:leveldb::__anon4::Stats	file:
message_	benchmarks/db_bench_sqlite3.cc	/^  std::string message_;$/;"	m	class:leveldb::Benchmark	file:
message_	benchmarks/db_bench_tree_db.cc	/^  std::string message_;$/;"	m	class:leveldb::Benchmark	file:
message_	db/log_test.cc	/^    std::string message_;$/;"	m	class:leveldb::log::LogTest::ReportCollector	file:
meta	db/repair.cc	/^    FileMetaData meta;$/;"	m	struct:leveldb::__anon37::Repairer::TableInfo	file:
metadata	zns_ctl/controller.h	/^	__u64	metadata;$/;"	m	struct:nvme_passthru_cmd
metadata	zns_ctl/controller.h	/^	__u64	metadata;$/;"	m	struct:nvme_user_io
metadata_len	zns_ctl/controller.h	/^	__u32	metadata_len;$/;"	m	struct:nvme_passthru_cmd
metaindex_handle	table/format.h	/^  const BlockHandle& metaindex_handle() const { return metaindex_handle_; }$/;"	f	class:leveldb::Footer
metaindex_handle	table/table.cc	/^  BlockHandle metaindex_handle;  \/\/ Handle to metaindex_block: saved from footer$/;"	m	struct:leveldb::Table::Rep	file:
metaindex_handle_	table/format.h	/^  BlockHandle metaindex_handle_;$/;"	m	class:leveldb::Footer
method	benchmarks/db_bench.cc	/^    void (Benchmark::*method)(ThreadState*);$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
micros	db/db_impl.h	/^    int64_t micros;$/;"	m	struct:leveldb::DBImpl::CompactionStats
min_	util/histogram.h	/^  double min_;$/;"	m	class:leveldb::Histogram
mmap_base_	util/env_posix.cc	/^  char* const mmap_base_;$/;"	m	class:leveldb::__anon19::final	file:
mmap_base_	util/env_windows.cc	/^  char* const mmap_base_;$/;"	m	class:leveldb::__anon11::WindowsMmapReadableFile	file:
mmap_limiter_	util/env_posix.cc	/^  Limiter mmap_limiter_;  \/\/ Thread-safe.$/;"	m	class:leveldb::__anon19::PosixEnv	file:
mmap_limiter_	util/env_posix.cc	/^  Limiter* const mmap_limiter_;$/;"	m	class:leveldb::__anon19::final	file:
mmap_limiter_	util/env_windows.cc	/^  Limiter mmap_limiter_;  \/\/ Thread-safe.$/;"	m	class:leveldb::__anon11::WindowsEnv	file:
mmap_limiter_	util/env_windows.cc	/^  Limiter* const mmap_limiter_;$/;"	m	class:leveldb::__anon11::WindowsMmapReadableFile	file:
mn	zns_ctl/controller.h	/^	char			mn[40];$/;"	m	struct:nvme_id_ctrl
mnan	zns_ctl/controller.h	/^	__le32			mnan;$/;"	m	struct:nvme_id_ctrl
mntmt	zns_ctl/controller.h	/^	__le16			mntmt;$/;"	m	struct:nvme_id_ctrl
ms	zns_ctl/controller.h	/^	__le16			ms;$/;"	m	struct:nvme_lbaf
msdbd	zns_ctl/controller.h	/^	__u8			msdbd;$/;"	m	struct:nvme_id_ctrl
mtfa	zns_ctl/controller.h	/^	__le16			mtfa;$/;"	m	struct:nvme_id_ctrl
mu	benchmarks/db_bench.cc	/^  port::Mutex mu;$/;"	m	struct:leveldb::__anon4::SharedState	file:
mu	db/db_impl.cc	/^  port::Mutex* const mu;$/;"	m	class:leveldb::__anon31::IterState::port	file:
mu_	db/db_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon41::AtomicCounter	file:
mu_	db/skiplist_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::TestState	file:
mu_	port/port_stdcxx.h	/^  Mutex* const mu_;$/;"	m	class:leveldb::port::CondVar
mu_	port/port_stdcxx.h	/^  std::mutex mu_;$/;"	m	class:leveldb::port::Mutex
mu_	util/env_posix.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon19::PosixLockTable	file:
mu_	util/env_zone.cc	/^		port::Mutex mu_;$/;"	m	class:leveldb::__anon21::ZoneLockTable	file:
mu_	util/mutexlock.h	/^  port::Mutex* const mu_;$/;"	m	class:leveldb::MutexLock::port
mu_	util/zns/env_zone_temp.cc	/^		port::Mutex mu_;$/;"	m	class:leveldb::__anon7::ZoneLockTable	file:
mutex_	db/db_impl.h	/^  port::Mutex mutex_;$/;"	m	class:leveldb::DBImpl
mutex_	db/fault_injection_test.cc	/^  port::Mutex mutex_;$/;"	m	class:leveldb::FaultInjectionTestEnv	file:
mutex_	helpers/memenv/memenv.cc	/^  port::Mutex mutex_;$/;"	m	class:leveldb::__anon5::InMemoryEnv	file:
mutex_	util/cache.cc	/^  mutable port::Mutex mutex_;$/;"	m	class:leveldb::__anon16::LRUCache	file:
mutex_	util/env_zone.cc	/^		port::Mutex mutex_;$/;"	m	class:leveldb::__anon21::ZoneEnv	file:
mutex_	util/zns/env_zone_cp.cc	/^		port::Mutex mutex_;$/;"	m	class:leveldb::__anon8::ZoneEnv	file:
mutex_	util/zns/env_zone_temp.cc	/^		port::Mutex mutex_;$/;"	m	class:leveldb::__anon7::ZoneEnv	file:
mxtmt	zns_ctl/controller.h	/^	__le16			mxtmt;$/;"	m	struct:nvme_id_ctrl
n_	table/merger.cc	/^  int n_;$/;"	m	class:leveldb::__anon27::MergingIterator	file:
nabo	zns_ctl/controller.h	/^	__le16			nabo;$/;"	m	struct:nvme_id_ns
nabsn	zns_ctl/controller.h	/^	__le16			nabsn;$/;"	m	struct:nvme_id_ns
nabspf	zns_ctl/controller.h	/^	__le16			nabspf;$/;"	m	struct:nvme_id_ns
nacwu	zns_ctl/controller.h	/^	__le16			nacwu;$/;"	m	struct:nvme_id_ns
name	util/testharness.cc	/^  const char* name;$/;"	m	struct:leveldb::test::__anon14::Test	file:
name_	db/c.cc	/^  const char* (*name_)(void*);$/;"	m	struct:leveldb_comparator_t	file:
name_	db/c.cc	/^  const char* (*name_)(void*);$/;"	m	struct:leveldb_filterpolicy_t	file:
name_	util/env_zone.cc	/^		std::string name_;$/;"	m	class:leveldb::__anon21::ZoneFileLock	file:
name_	util/zns/env_zone_temp.cc	/^		std::string name_;$/;"	m	class:leveldb::__anon7::ZoneFileLock	file:
nanagrpid	zns_ctl/controller.h	/^	__le32			nanagrpid;$/;"	m	struct:nvme_id_ctrl
nawun	zns_ctl/controller.h	/^	__le16			nawun;$/;"	m	struct:nvme_id_ns
nawupf	zns_ctl/controller.h	/^	__le16			nawupf;$/;"	m	struct:nvme_id_ns
nblocks	zns_ctl/controller.h	/^	__u16	nblocks;$/;"	m	struct:nvme_user_io
ncap	zns_ctl/controller.h	/^	__le64			ncap;$/;"	m	struct:nvme_id_ns
new_files_	db/version_edit.h	/^  std::vector<std::pair<int, FileMetaData>> new_files_;$/;"	m	class:leveldb::VersionEdit
newest	db/snapshot.h	/^  SnapshotImpl* newest() const {$/;"	f	class:leveldb::SnapshotList
next	include/leveldb/iterator.h	/^    CleanupNode* next;$/;"	m	struct:leveldb::Iterator::CleanupNode
next	util/cache.cc	/^  LRUHandle* next;$/;"	m	struct:leveldb::__anon16::LRUHandle	file:
next_	db/skiplist.h	/^  std::atomic<Node*> next_[1];$/;"	m	struct:leveldb::SkipList::Node
next_	db/snapshot.h	/^  SnapshotImpl* next_;$/;"	m	class:leveldb::SnapshotImpl
next_	db/version_set.h	/^  Version* next_;     \/\/ Next version in linked list$/;"	m	class:leveldb::Version
next_file_number_	db/repair.cc	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::__anon37::Repairer	file:
next_file_number_	db/version_edit.h	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::VersionEdit
next_file_number_	db/version_set.h	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::VersionSet
next_hash	util/cache.cc	/^  LRUHandle* next_hash;$/;"	m	struct:leveldb::__anon16::LRUHandle	file:
next_report_	benchmarks/db_bench.cc	/^  int next_report_;$/;"	m	class:leveldb::__anon4::Stats	file:
next_report_	benchmarks/db_bench_sqlite3.cc	/^  int next_report_;  \/\/ When to report next$/;"	m	class:leveldb::Benchmark	file:
next_report_	benchmarks/db_bench_tree_db.cc	/^  int next_report_;  \/\/ When to report next$/;"	m	class:leveldb::Benchmark	file:
nguid	zns_ctl/controller.h	/^	__u8			nguid[16];$/;"	m	struct:nvme_id_ns
nlbaf	zns_ctl/controller.h	/^	__u8			nlbaf;$/;"	m	struct:nvme_id_ns
nmic	zns_ctl/controller.h	/^	__u8			nmic;$/;"	m	struct:nvme_id_ns
nn	zns_ctl/controller.h	/^	__le32			nn;$/;"	m	struct:nvme_id_ctrl
no_space_	db/db_test.cc	/^  std::atomic<bool> no_space_;$/;"	m	class:leveldb::SpecialEnv	file:
node_	db/skiplist.h	/^    Node* node_;$/;"	m	class:leveldb::SkipList::Iterator
noexcept	include/leveldb/status.h	/^  Status& operator=(Status&& rhs) noexcept;$/;"	m	class:leveldb::Status
noiob	zns_ctl/controller.h	/^	__le16			noiob;$/;"	m	struct:nvme_id_ns
non_writable_	db/db_test.cc	/^  std::atomic<bool> non_writable_;$/;"	m	class:leveldb::SpecialEnv	file:
npss	zns_ctl/controller.h	/^	__u8			npss;$/;"	m	struct:nvme_id_ctrl
nr_zones	util/env_zone.cc	/^        int nr_zones;$/;"	m	class:leveldb::__anon21::Zone_Coordinator	file:
nr_zones	util/zns/env_zone_cp.cc	/^        int nr_zones;$/;"	m	class:leveldb::__anon8::Zone_Coordinator	file:
nr_zones	util/zns/env_zone_temp.cc	/^        int nr_zones;$/;"	m	class:leveldb::__anon7::Z_interface	file:
nsattr	zns_ctl/controller.h	/^	__u8			nsattr;$/;"	m	struct:nvme_id_ns
nsetidmax	zns_ctl/controller.h	/^	__le16			nsetidmax;$/;"	m	struct:nvme_id_ctrl
nsfeat	zns_ctl/controller.h	/^	__u8			nsfeat;$/;"	m	struct:nvme_id_ns
nsid	zns_ctl/controller.h	/^	__u32	nsid;$/;"	m	struct:nvme_passthru_cmd
nsze	zns_ctl/controller.h	/^	__le64			nsze;$/;"	m	struct:nvme_id_ns
num_	benchmarks/db_bench.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	benchmarks/db_bench_sqlite3.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	benchmarks/db_bench_tree_db.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	table/filter_block.h	/^  size_t num_;          \/\/ Number of entries in offset array$/;"	m	class:leveldb::FilterBlockReader
num_	util/histogram.h	/^  double num_;$/;"	m	class:leveldb::Histogram
num_entries	table/table_builder.cc	/^  int64_t num_entries;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
num_initial_offset_records_	db/log_test.cc	/^  static int num_initial_offset_records_;$/;"	m	class:leveldb::log::LogTest	file:
num_initial_offset_records_	db/log_test.cc	/^int LogTest::num_initial_offset_records_ =$/;"	m	class:leveldb::log::LogTest	file:
num_input_files	db/version_set.h	/^  int num_input_files(int which) const { return inputs_[which].size(); }$/;"	f	class:leveldb::Compaction
num_restarts_	table/block.cc	/^  uint32_t const num_restarts_;  \/\/ Number of uint32_t entries in restart array$/;"	m	class:leveldb::Block::Iter	file:
num_writable_file_errors_	util/testutil.h	/^  int num_writable_file_errors_;$/;"	m	class:leveldb::test::ErrorEnv
number	db/db_impl.cc	/^    uint64_t number;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
number	db/version_edit.h	/^  uint64_t number;$/;"	m	struct:leveldb::FileMetaData
number	util/zns/env_zone_temp.cc	/^		unsigned int number;$/;"	m	class:leveldb::__anon7::Zone	file:
number_zones	zns_ctl/controller.h	/^	__u64	number_zones;$/;"	m	struct:nvme_zone_info
nuse	zns_ctl/controller.h	/^	__le64			nuse;$/;"	m	struct:nvme_id_ns
nvmcap	zns_ctl/controller.h	/^	__u8			nvmcap[16];$/;"	m	struct:nvme_id_ns
nvme_admin_abort_cmd	zns_ctl/controller.h	/^	nvme_admin_abort_cmd		= 0x08,$/;"	e	enum:nvme_admin_opcode
nvme_admin_activate_fw	zns_ctl/controller.h	/^	nvme_admin_activate_fw		= 0x10,$/;"	e	enum:nvme_admin_opcode
nvme_admin_async_event	zns_ctl/controller.h	/^	nvme_admin_async_event		= 0x0c,$/;"	e	enum:nvme_admin_opcode
nvme_admin_cmd	zns_ctl/controller.h	400;"	d
nvme_admin_create_cq	zns_ctl/controller.h	/^	nvme_admin_create_cq		= 0x05,$/;"	e	enum:nvme_admin_opcode
nvme_admin_create_sq	zns_ctl/controller.h	/^	nvme_admin_create_sq		= 0x01,$/;"	e	enum:nvme_admin_opcode
nvme_admin_dbbuf	zns_ctl/controller.h	/^	nvme_admin_dbbuf		= 0x7C,$/;"	e	enum:nvme_admin_opcode
nvme_admin_delete_cq	zns_ctl/controller.h	/^	nvme_admin_delete_cq		= 0x04,$/;"	e	enum:nvme_admin_opcode
nvme_admin_delete_sq	zns_ctl/controller.h	/^	nvme_admin_delete_sq		= 0x00,$/;"	e	enum:nvme_admin_opcode
nvme_admin_dev_self_test	zns_ctl/controller.h	/^	nvme_admin_dev_self_test	= 0x14,$/;"	e	enum:nvme_admin_opcode
nvme_admin_directive_recv	zns_ctl/controller.h	/^	nvme_admin_directive_recv	= 0x1a,$/;"	e	enum:nvme_admin_opcode
nvme_admin_directive_send	zns_ctl/controller.h	/^	nvme_admin_directive_send	= 0x19,$/;"	e	enum:nvme_admin_opcode
nvme_admin_download_fw	zns_ctl/controller.h	/^	nvme_admin_download_fw		= 0x11,$/;"	e	enum:nvme_admin_opcode
nvme_admin_format_nvm	zns_ctl/controller.h	/^	nvme_admin_format_nvm		= 0x80,$/;"	e	enum:nvme_admin_opcode
nvme_admin_get_features	zns_ctl/controller.h	/^	nvme_admin_get_features		= 0x0a,$/;"	e	enum:nvme_admin_opcode
nvme_admin_get_log_page	zns_ctl/controller.h	/^	nvme_admin_get_log_page		= 0x02,$/;"	e	enum:nvme_admin_opcode
nvme_admin_identify	zns_ctl/controller.h	/^	nvme_admin_identify		= 0x06,$/;"	e	enum:nvme_admin_opcode
nvme_admin_keep_alive	zns_ctl/controller.h	/^	nvme_admin_keep_alive		= 0x18,$/;"	e	enum:nvme_admin_opcode
nvme_admin_ns_attach	zns_ctl/controller.h	/^	nvme_admin_ns_attach		= 0x15,$/;"	e	enum:nvme_admin_opcode
nvme_admin_ns_mgmt	zns_ctl/controller.h	/^	nvme_admin_ns_mgmt		= 0x0d,$/;"	e	enum:nvme_admin_opcode
nvme_admin_nvme_mi_recv	zns_ctl/controller.h	/^	nvme_admin_nvme_mi_recv		= 0x1e,$/;"	e	enum:nvme_admin_opcode
nvme_admin_nvme_mi_send	zns_ctl/controller.h	/^	nvme_admin_nvme_mi_send		= 0x1d,$/;"	e	enum:nvme_admin_opcode
nvme_admin_opcode	zns_ctl/controller.h	/^enum nvme_admin_opcode {$/;"	g
nvme_admin_sanitize_nvm	zns_ctl/controller.h	/^	nvme_admin_sanitize_nvm		= 0x84,$/;"	e	enum:nvme_admin_opcode
nvme_admin_security_recv	zns_ctl/controller.h	/^	nvme_admin_security_recv	= 0x82,$/;"	e	enum:nvme_admin_opcode
nvme_admin_security_send	zns_ctl/controller.h	/^	nvme_admin_security_send	= 0x81,$/;"	e	enum:nvme_admin_opcode
nvme_admin_set_features	zns_ctl/controller.h	/^	nvme_admin_set_features		= 0x09,$/;"	e	enum:nvme_admin_opcode
nvme_admin_virtual_mgmt	zns_ctl/controller.h	/^	nvme_admin_virtual_mgmt		= 0x1c,$/;"	e	enum:nvme_admin_opcode
nvme_cmd_compare	zns_ctl/controller.h	/^	nvme_cmd_compare	= 0x05,$/;"	e	enum:nvme_opcode
nvme_cmd_dsm	zns_ctl/controller.h	/^	nvme_cmd_dsm		= 0x09,$/;"	e	enum:nvme_opcode
nvme_cmd_flush	zns_ctl/controller.h	/^	nvme_cmd_flush		= 0x00,$/;"	e	enum:nvme_opcode
nvme_cmd_read	zns_ctl/controller.h	/^	nvme_cmd_read		= 0x02,$/;"	e	enum:nvme_opcode
nvme_cmd_resv_acquire	zns_ctl/controller.h	/^	nvme_cmd_resv_acquire	= 0x11,$/;"	e	enum:nvme_opcode
nvme_cmd_resv_register	zns_ctl/controller.h	/^	nvme_cmd_resv_register	= 0x0d,$/;"	e	enum:nvme_opcode
nvme_cmd_resv_release	zns_ctl/controller.h	/^	nvme_cmd_resv_release	= 0x15,$/;"	e	enum:nvme_opcode
nvme_cmd_resv_report	zns_ctl/controller.h	/^	nvme_cmd_resv_report	= 0x0e,$/;"	e	enum:nvme_opcode
nvme_cmd_verify	zns_ctl/controller.h	/^	nvme_cmd_verify		= 0x0c,$/;"	e	enum:nvme_opcode
nvme_cmd_write	zns_ctl/controller.h	/^	nvme_cmd_write		= 0x01,$/;"	e	enum:nvme_opcode
nvme_cmd_write_uncor	zns_ctl/controller.h	/^	nvme_cmd_write_uncor	= 0x04,$/;"	e	enum:nvme_opcode
nvme_cmd_write_zeroes	zns_ctl/controller.h	/^	nvme_cmd_write_zeroes	= 0x08,$/;"	e	enum:nvme_opcode
nvme_cmd_zone_info	zns_ctl/controller.h	/^	nvme_cmd_zone_info	= 0x06,$/;"	e	enum:nvme_opcode
nvme_id_ctrl	zns_ctl/controller.h	/^struct nvme_id_ctrl {$/;"	s
nvme_id_ns	zns_ctl/controller.h	/^struct nvme_id_ns {$/;"	s
nvme_id_power_state	zns_ctl/controller.h	/^struct nvme_id_power_state {$/;"	s
nvme_lbaf	zns_ctl/controller.h	/^struct nvme_lbaf {$/;"	s
nvme_opcode	zns_ctl/controller.h	/^enum nvme_opcode {$/;"	g
nvme_passthru_cmd	zns_ctl/controller.h	/^struct nvme_passthru_cmd {$/;"	s
nvme_user_io	zns_ctl/controller.h	/^struct nvme_user_io {$/;"	s
nvme_zone_info	zns_ctl/controller.h	/^struct nvme_zone_info {$/;"	s
nvme_zone_info_entry	zns_ctl/controller.h	/^struct nvme_zone_info_entry {$/;"	s
nvmsetid	zns_ctl/controller.h	/^	__le16			nvmsetid;$/;"	m	struct:nvme_id_ns
nvscc	zns_ctl/controller.h	/^	__u8			nvscc;$/;"	m	struct:nvme_id_ctrl
nwpc	zns_ctl/controller.h	/^	__u8			nwpc;$/;"	m	struct:nvme_id_ctrl
oacs	zns_ctl/controller.h	/^	__le16			oacs;$/;"	m	struct:nvme_id_ctrl
oaes	zns_ctl/controller.h	/^	__le32			oaes;$/;"	m	struct:nvme_id_ctrl
offset	table/format.h	/^  uint64_t offset() const { return offset_; }$/;"	f	class:leveldb::BlockHandle
offset	table/table_builder.cc	/^  uint64_t offset;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
offset_	table/filter_block.h	/^  const char* offset_;  \/\/ Pointer to beginning of offset array (at block-end)$/;"	m	class:leveldb::FilterBlockReader
offset_	table/format.h	/^  uint64_t offset_;$/;"	m	class:leveldb::BlockHandle
ok	include/leveldb/status.h	/^  bool ok() const { return (state_ == nullptr); }$/;"	f	class:leveldb::Status
ok	include/leveldb/table_builder.h	/^  bool ok() const { return status().ok(); }$/;"	f	class:leveldb::TableBuilder
ok_	util/testharness.h	/^  bool ok_;$/;"	m	class:leveldb::test::Tester
oldest	db/snapshot.h	/^  SnapshotImpl* oldest() const {$/;"	f	class:leveldb::SnapshotList
oncs	zns_ctl/controller.h	/^	__le16			oncs;$/;"	m	struct:nvme_id_ctrl
opcode	zns_ctl/controller.h	/^	__u8	opcode;$/;"	m	struct:nvme_passthru_cmd
opcode	zns_ctl/controller.h	/^	__u8	opcode;$/;"	m	struct:nvme_user_io
open_	util/zns/env_zone_cp.cc	/^        bool open_;$/;"	m	class:leveldb::__anon8::Zone	file:
open_read_only_file_limit	util/zns/env_zone_temp.cc	/^		static int open_read_only_file_limit = -1;$/;"	m	namespace:leveldb::__anon7	file:
opened	util/zns/env_zone_temp.cc	/^		bool opened;$/;"	m	class:leveldb::__anon7::Zone	file:
openzones	zns_ctl/controller.h	/^	__u32			openzones;$/;"	m	struct:nvme_id_ns
openzones	zns_ctl/controller.h	/^	__u32 openzones;$/;"	m	struct:zns_share_info
operator !=	include/leveldb/slice.h	/^inline bool operator!=(const Slice& x, const Slice& y) { return !(x == y); }$/;"	f	namespace:leveldb
operator ()	db/memtable.cc	/^int MemTable::KeyComparator::operator()(const char* aptr,$/;"	f	class:leveldb::MemTable::KeyComparator
operator ()	db/skiplist_test.cc	/^  int operator()(const Key& a, const Key& b) const {$/;"	f	struct:leveldb::Comparator
operator ()	db/version_set.cc	/^    bool operator()(FileMetaData* f1, FileMetaData* f2) const {$/;"	f	struct:leveldb::VersionSet::Builder::BySmallestKey
operator ()	table/table_test.cc	/^  bool operator()(const std::string& a, const std::string& b) const {$/;"	f	struct:leveldb::__anon29::STLLessThan
operator <<	util/testharness.h	/^  Tester& operator<<(const V& value) {$/;"	f	class:leveldb::test::Tester
operator =	include/leveldb/status.h	/^inline Status& Status::operator=(const Status& rhs) {$/;"	f	class:leveldb::Status
operator ==	include/leveldb/slice.h	/^inline bool operator==(const Slice& x, const Slice& y) {$/;"	f	namespace:leveldb
operator []	include/leveldb/slice.h	/^  char operator[](size_t n) const {$/;"	f	class:leveldb::Slice
option_config_	db/db_test.cc	/^  int option_config_;$/;"	m	class:leveldb::DBTest	file:
options	table/table.cc	/^  Options options;$/;"	m	struct:leveldb::Table::Rep	file:
options	table/table_builder.cc	/^  Options options;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
options_	db/autocompact_test.cc	/^  Options options_;$/;"	m	class:leveldb::AutoCompactTest	file:
options_	db/corruption_test.cc	/^  Options options_;$/;"	m	class:leveldb::CorruptionTest	file:
options_	db/db_impl.h	/^  const Options options_;  \/\/ options_.comparator == &internal_comparator_$/;"	m	class:leveldb::DBImpl
options_	db/db_test.cc	/^  const Options options_;$/;"	m	class:leveldb::ModelDB	file:
options_	db/fault_injection_test.cc	/^  Options options_;$/;"	m	class:leveldb::FaultInjectionTest	file:
options_	db/repair.cc	/^  const Options options_;$/;"	m	class:leveldb::__anon37::Repairer	file:
options_	db/table_cache.h	/^  const Options& options_;$/;"	m	class:leveldb::TableCache
options_	db/version_set.h	/^  const Options* const options_;$/;"	m	class:leveldb::VersionSet
options_	table/block_builder.h	/^  const Options* options_;$/;"	m	class:leveldb::BlockBuilder
options_	table/table_test.cc	/^  Options options_;$/;"	m	class:leveldb::Harness	file:
options_	table/two_level_iterator.cc	/^  const ReadOptions options_;$/;"	m	class:leveldb::__anon30::TwoLevelIterator	file:
outfile	db/db_impl.cc	/^  WritableFile* outfile;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
outputs	db/db_impl.cc	/^  std::vector<Output> outputs;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
overlapped_bytes_	db/version_set.h	/^  int64_t overlapped_bytes_;  \/\/ Bytes of overlap between current output$/;"	m	class:leveldb::Compaction
override	db/db_impl.h	/^             const Slice& value) override;$/;"	m	class:leveldb::DBImpl
override	db/db_impl.h	/^             std::string* value) override;$/;"	m	class:leveldb::DBImpl
override	db/db_impl.h	/^  Iterator* NewIterator(const ReadOptions&) override;$/;"	m	class:leveldb::DBImpl
override	db/db_impl.h	/^  Status Delete(const WriteOptions&, const Slice& key) override;$/;"	m	class:leveldb::DBImpl
override	db/db_impl.h	/^  Status Write(const WriteOptions& options, WriteBatch* updates) override;$/;"	m	class:leveldb::DBImpl
override	db/db_impl.h	/^  bool GetProperty(const Slice& property, std::string* value) override;$/;"	m	class:leveldb::DBImpl
override	db/db_impl.h	/^  const Snapshot* GetSnapshot() override;$/;"	m	class:leveldb::DBImpl
override	db/db_impl.h	/^  void CompactRange(const Slice* begin, const Slice* end) override;$/;"	m	class:leveldb::DBImpl
override	db/db_impl.h	/^  void GetApproximateSizes(const Range* range, int n, uint64_t* sizes) override;$/;"	m	class:leveldb::DBImpl
override	db/db_impl.h	/^  void ReleaseSnapshot(const Snapshot* snapshot) override;$/;"	m	class:leveldb::DBImpl
override	db/db_impl.h	/^  ~DBImpl() override;$/;"	m	class:leveldb::DBImpl
override	db/db_iter.cc	/^  void Next() override;$/;"	m	class:leveldb::__anon38::DBIter	file:
override	db/db_iter.cc	/^  void Prev() override;$/;"	m	class:leveldb::__anon38::DBIter	file:
override	db/db_iter.cc	/^  void Seek(const Slice& target) override;$/;"	m	class:leveldb::__anon38::DBIter	file:
override	db/db_iter.cc	/^  void SeekToFirst() override;$/;"	m	class:leveldb::__anon38::DBIter	file:
override	db/db_iter.cc	/^  void SeekToLast() override;$/;"	m	class:leveldb::__anon38::DBIter	file:
override	db/db_test.cc	/^  ~ModelDB() override = default;$/;"	m	class:leveldb::ModelDB	file:
override	db/dbformat.h	/^                             const Slice& limit) const override;$/;"	m	class:leveldb::InternalKeyComparator
override	db/dbformat.h	/^  bool KeyMayMatch(const Slice& key, const Slice& filter) const override;$/;"	m	class:leveldb::InternalFilterPolicy
override	db/dbformat.h	/^  const char* Name() const override;$/;"	m	class:leveldb::InternalFilterPolicy
override	db/dbformat.h	/^  const char* Name() const override;$/;"	m	class:leveldb::InternalKeyComparator
override	db/dbformat.h	/^  int Compare(const Slice& a, const Slice& b) const override;$/;"	m	class:leveldb::InternalKeyComparator
override	db/dbformat.h	/^  void CreateFilter(const Slice* keys, int n, std::string* dst) const override;$/;"	m	class:leveldb::InternalFilterPolicy
override	db/dbformat.h	/^  void FindShortSuccessor(std::string* key) const override;$/;"	m	class:leveldb::InternalKeyComparator
override	db/fault_injection_test.cc	/^                           WritableFile** result) override;$/;"	m	class:leveldb::FaultInjectionTestEnv	file:
override	db/fault_injection_test.cc	/^                         WritableFile** result) override;$/;"	m	class:leveldb::FaultInjectionTestEnv	file:
override	db/fault_injection_test.cc	/^  Status Append(const Slice& data) override;$/;"	m	class:leveldb::TestWritableFile	file:
override	db/fault_injection_test.cc	/^  Status Close() override;$/;"	m	class:leveldb::TestWritableFile	file:
override	db/fault_injection_test.cc	/^  Status DeleteFile(const std::string& f) override;$/;"	m	class:leveldb::FaultInjectionTestEnv	file:
override	db/fault_injection_test.cc	/^  Status Flush() override;$/;"	m	class:leveldb::TestWritableFile	file:
override	db/fault_injection_test.cc	/^  Status RenameFile(const std::string& s, const std::string& t) override;$/;"	m	class:leveldb::FaultInjectionTestEnv	file:
override	db/fault_injection_test.cc	/^  Status Sync() override;$/;"	m	class:leveldb::TestWritableFile	file:
override	db/fault_injection_test.cc	/^  ~FaultInjectionTestEnv() override = default;$/;"	m	class:leveldb::FaultInjectionTestEnv	file:
override	db/fault_injection_test.cc	/^  ~TestWritableFile() override;$/;"	m	class:leveldb::TestWritableFile	file:
override	db/memtable.cc	/^  ~MemTableIterator() override = default;$/;"	m	class:leveldb::MemTableIterator	file:
override	table/iterator.cc	/^  ~EmptyIterator() override = default;$/;"	m	class:leveldb::__anon24::EmptyIterator	file:
override	table/table_test.cc	/^  ~StringSink() override = default;$/;"	m	class:leveldb::StringSink	file:
override	table/table_test.cc	/^  ~StringSource() override = default;$/;"	m	class:leveldb::StringSource	file:
override	table/two_level_iterator.cc	/^  void Next() override;$/;"	m	class:leveldb::__anon30::TwoLevelIterator	file:
override	table/two_level_iterator.cc	/^  void Prev() override;$/;"	m	class:leveldb::__anon30::TwoLevelIterator	file:
override	table/two_level_iterator.cc	/^  void Seek(const Slice& target) override;$/;"	m	class:leveldb::__anon30::TwoLevelIterator	file:
override	table/two_level_iterator.cc	/^  void SeekToFirst() override;$/;"	m	class:leveldb::__anon30::TwoLevelIterator	file:
override	table/two_level_iterator.cc	/^  void SeekToLast() override;$/;"	m	class:leveldb::__anon30::TwoLevelIterator	file:
override	table/two_level_iterator.cc	/^  ~TwoLevelIterator() override;$/;"	m	class:leveldb::__anon30::TwoLevelIterator	file:
override	util/env_posix.cc	/^                void* background_work_arg) override;$/;"	m	class:leveldb::__anon19::PosixEnv	file:
override	util/env_windows.cc	/^                void* background_work_arg) override;$/;"	m	class:leveldb::__anon11::WindowsEnv	file:
override	util/env_windows.cc	/^  ~WindowsRandomAccessFile() override = default;$/;"	m	class:leveldb::__anon11::WindowsRandomAccessFile	file:
override	util/env_windows.cc	/^  ~WindowsWritableFile() override = default;$/;"	m	class:leveldb::__anon11::WindowsWritableFile	file:
override	util/zns/env_zone_cp.cc	/^		~ZoneEnv() override = default;$/;"	m	class:leveldb::__anon8::ZoneEnv	file:
owned_	db/db_test.cc	/^    const bool owned_;  \/\/ Do we own map_$/;"	m	class:leveldb::ModelDB::ModelIter	file:
owned_	table/block.h	/^  bool owned_;               \/\/ Block owns data_[]$/;"	m	class:leveldb::Block
owns_cache_	db/db_impl.h	/^  const bool owns_cache_;$/;"	m	class:leveldb::DBImpl
owns_cache_	db/repair.cc	/^  bool owns_cache_;$/;"	m	class:leveldb::__anon37::Repairer	file:
owns_info_log_	db/db_impl.h	/^  const bool owns_info_log_;$/;"	m	class:leveldb::DBImpl
owns_info_log_	db/repair.cc	/^  bool owns_info_log_;$/;"	m	class:leveldb::__anon37::Repairer	file:
paranoid_checks	include/leveldb/options.h	/^  bool paranoid_checks = false;$/;"	m	struct:leveldb::Options
pending_handle	table/table_builder.cc	/^  BlockHandle pending_handle;  \/\/ Handle to add to index block$/;"	m	struct:leveldb::TableBuilder::Rep	file:
pending_index_entry	table/table_builder.cc	/^  bool pending_index_entry;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
phase	db/c_test.c	/^const char* phase = "";$/;"	v
policy_	table/filter_block.h	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::FilterBlockBuilder
policy_	table/filter_block.h	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::FilterBlockReader
policy_	table/filter_block_test.cc	/^  TestHashFilter policy_;$/;"	m	class:leveldb::FilterBlockTest	file:
policy_	util/bloom_test.cc	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::BloomTest	file:
port	port/port_example.h	/^namespace port {$/;"	n	namespace:leveldb
port	port/port_stdcxx.h	/^namespace port {$/;"	n	namespace:leveldb
pos_	benchmarks/db_bench.cc	/^  int pos_;$/;"	m	class:leveldb::__anon4::RandomGenerator	file:
pos_	benchmarks/db_bench_sqlite3.cc	/^  int pos_;$/;"	m	class:leveldb::__anon3::RandomGenerator	file:
pos_	benchmarks/db_bench_tree_db.cc	/^  int pos_;$/;"	m	class:leveldb::__anon2::RandomGenerator	file:
pos_	db/fault_injection_test.cc	/^  int64_t pos_;$/;"	m	struct:leveldb::__anon40::FileState	file:
pos_	helpers/memenv/memenv.cc	/^  uint64_t pos_;$/;"	m	class:leveldb::__anon5::SequentialFileImpl	file:
pos_	util/env_posix.cc	/^  size_t pos_;$/;"	m	class:leveldb::__anon19::final	file:
pos_	util/env_windows.cc	/^  size_t pos_;$/;"	m	class:leveldb::__anon11::WindowsWritableFile	file:
pos_	util/zns/env_zone_cp.cc	/^		uint64_t pos_;$/;"	m	class:leveldb::__anon8::final	file:
pos_	util/zns/env_zone_temp.cc	/^		uint64_t pos_;$/;"	m	class:leveldb::__anon7::ZoneSequentialFile	file:
pos_at_last_flush_	db/fault_injection_test.cc	/^  int64_t pos_at_last_flush_;$/;"	m	struct:leveldb::__anon40::FileState	file:
pos_at_last_sync_	db/fault_injection_test.cc	/^  int64_t pos_at_last_sync_;$/;"	m	struct:leveldb::__anon40::FileState	file:
prev	util/cache.cc	/^  LRUHandle* prev;$/;"	m	struct:leveldb::__anon16::LRUHandle	file:
prev_	db/snapshot.h	/^  SnapshotImpl* prev_;$/;"	m	class:leveldb::SnapshotImpl
prev_	db/version_set.h	/^  Version* prev_;     \/\/ Previous version in linked list$/;"	m	class:leveldb::Version
prev_log_number_	db/version_edit.h	/^  uint64_t prev_log_number_;$/;"	m	class:leveldb::VersionEdit
prev_log_number_	db/version_set.h	/^  uint64_t prev_log_number_;  \/\/ 0 or backing store for memtable being compacted$/;"	m	class:leveldb::VersionSet
psd	zns_ctl/controller.h	/^	struct nvme_id_power_state	psd[32];$/;"	m	struct:nvme_id_ctrl	typeref:struct:nvme_id_ctrl::nvme_id_power_state
qnxnto	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	build/CMakeFiles/3.15.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
quit_flag_	db/skiplist_test.cc	/^  std::atomic<bool> quit_flag_;$/;"	m	class:leveldb::TestState	file:
rab	zns_ctl/controller.h	/^	__u8			rab;$/;"	m	struct:nvme_id_ctrl
rand	benchmarks/db_bench.cc	/^  Random rand;  \/\/ Has different seeds for different threads$/;"	m	struct:leveldb::__anon4::ThreadState	file:
rand_	benchmarks/db_bench_sqlite3.cc	/^  Random rand_;$/;"	m	class:leveldb::Benchmark	file:
rand_	benchmarks/db_bench_tree_db.cc	/^  Random rand_;$/;"	m	class:leveldb::Benchmark	file:
random_read_counter_	db/db_test.cc	/^  AtomicCounter random_read_counter_;$/;"	m	class:leveldb::SpecialEnv	file:
read_lat	zns_ctl/controller.h	/^	__u8			read_lat;$/;"	m	struct:nvme_id_power_state
read_tput	zns_ctl/controller.h	/^	__u8			read_tput;$/;"	m	struct:nvme_id_power_state
reader_	db/log_test.cc	/^  Reader* reader_;$/;"	m	class:leveldb::log::LogTest	file:
reading_	db/log_test.cc	/^  bool reading_;$/;"	m	class:leveldb::log::LogTest	file:
reads_	benchmarks/db_bench.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark	file:
reads_	benchmarks/db_bench_sqlite3.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark	file:
reads_	benchmarks/db_bench_tree_db.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark	file:
refs	db/version_edit.h	/^  int refs;$/;"	m	struct:leveldb::FileMetaData
refs	util/cache.cc	/^  uint32_t refs;     \/\/ References, including cache reference, if present.$/;"	m	struct:leveldb::__anon16::LRUHandle	file:
refs_	db/memtable.h	/^  int refs_;$/;"	m	class:leveldb::MemTable
refs_	db/version_set.h	/^  int refs_;          \/\/ Number of live refs to this version$/;"	m	class:leveldb::Version
refs_mutex_	helpers/memenv/memenv.cc	/^  port::Mutex refs_mutex_;$/;"	m	class:leveldb::__anon5::FileState	file:
refs_mutex_	util/zns/env_zone_temp.cc	/^		port::Mutex refs_mutex_;$/;"	m	class:leveldb::__anon7::ZoneFile	file:
reftag	zns_ctl/controller.h	/^	__u32	reftag;$/;"	m	struct:nvme_user_io
remove_prefix	include/leveldb/slice.h	/^  void remove_prefix(size_t n) {$/;"	f	class:leveldb::Slice
rep	db/c.cc	/^  Cache* rep;$/;"	m	struct:leveldb_cache_t	file:
rep	db/c.cc	/^  DB* rep;$/;"	m	struct:leveldb_t	file:
rep	db/c.cc	/^  Env* rep;$/;"	m	struct:leveldb_env_t	file:
rep	db/c.cc	/^  FileLock* rep;$/;"	m	struct:leveldb_filelock_t	file:
rep	db/c.cc	/^  Iterator* rep;$/;"	m	struct:leveldb_iterator_t	file:
rep	db/c.cc	/^  Logger* rep;$/;"	m	struct:leveldb_logger_t	file:
rep	db/c.cc	/^  Options rep;$/;"	m	struct:leveldb_options_t	file:
rep	db/c.cc	/^  RandomAccessFile* rep;$/;"	m	struct:leveldb_randomfile_t	file:
rep	db/c.cc	/^  ReadOptions rep;$/;"	m	struct:leveldb_readoptions_t	file:
rep	db/c.cc	/^  SequentialFile* rep;$/;"	m	struct:leveldb_seqfile_t	file:
rep	db/c.cc	/^  WritableFile* rep;$/;"	m	struct:leveldb_writablefile_t	file:
rep	db/c.cc	/^  WriteBatch rep;$/;"	m	struct:leveldb_writebatch_t	file:
rep	db/c.cc	/^  WriteOptions rep;$/;"	m	struct:leveldb_writeoptions_t	file:
rep	db/c.cc	/^  const Snapshot* rep;$/;"	m	struct:leveldb_snapshot_t	file:
rep_	db/dbformat.h	/^  std::string rep_;$/;"	m	class:leveldb::InternalKey
rep_	include/leveldb/cache.h	/^  Rep* rep_;$/;"	m	class:leveldb::Cache
rep_	include/leveldb/table.h	/^  Rep* const rep_;$/;"	m	class:leveldb::Table
rep_	include/leveldb/table_builder.h	/^  Rep* rep_;$/;"	m	class:leveldb::TableBuilder
rep_	include/leveldb/write_batch.h	/^  std::string rep_;  \/\/ See comment in write_batch.cc for the format of rep_$/;"	m	class:leveldb::WriteBatch
report_	db/log_test.cc	/^  ReportCollector report_;$/;"	m	class:leveldb::log::LogTest	file:
reporter_	db/log_reader.h	/^  Reporter* const reporter_;$/;"	m	class:leveldb::log::Reader
rescap	zns_ctl/controller.h	/^	__u8			rescap;$/;"	m	struct:nvme_id_ns
restart_index_	table/block.cc	/^  uint32_t restart_index_;  \/\/ Index of restart block in which current_ falls$/;"	m	class:leveldb::Block::Iter	file:
restart_interval	table/table_test.cc	/^  int restart_interval;$/;"	m	struct:leveldb::TestArgs	file:
restart_offset_	table/block.h	/^  uint32_t restart_offset_;  \/\/ Offset in data_ of restart array$/;"	m	class:leveldb::Block
restarts_	table/block.cc	/^  uint32_t const restarts_;      \/\/ Offset of restart array (list of fixed32)$/;"	m	class:leveldb::Block::Iter	file:
restarts_	table/block_builder.h	/^  std::vector<uint32_t> restarts_;  \/\/ Restart points$/;"	m	class:leveldb::BlockBuilder
result	zns_ctl/controller.h	/^	__u32	result;$/;"	m	struct:nvme_passthru_cmd
result_	table/filter_block.h	/^  std::string result_;           \/\/ Filter data computed so far$/;"	m	class:leveldb::FilterBlockBuilder
resyncing_	db/log_reader.h	/^  bool resyncing_;$/;"	m	class:leveldb::log::Reader
returned_partial_	db/log_test.cc	/^    bool returned_partial_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
reuse_logs	include/leveldb/options.h	/^  bool reuse_logs = false;$/;"	m	struct:leveldb::Options
reverse_compare	table/table_test.cc	/^  bool reverse_compare;$/;"	m	struct:leveldb::TestArgs	file:
reverse_key_comparator	table/table_test.cc	/^static ReverseKeyComparator reverse_key_comparator;$/;"	m	namespace:leveldb	file:
rnblock_	util/env_zone.cc	/^        size_t rnblock_;$/;"	m	class:leveldb::__anon21::File_Info	file:
rnd_	db/db_iter.cc	/^  Random rnd_;$/;"	m	class:leveldb::__anon38::DBIter	file:
rnd_	db/skiplist.h	/^  Random rnd_;$/;"	m	class:leveldb::SkipList
roffset_	util/env_zone.cc	/^        ssize_t roffset_;$/;"	m	class:leveldb::__anon21::File_Info	file:
rp	zns_ctl/controller.h	/^	__u8			rp;$/;"	m	struct:nvme_lbaf
rpmbs	zns_ctl/controller.h	/^	__le32			rpmbs;$/;"	m	struct:nvme_id_ctrl
rrls	zns_ctl/controller.h	/^	__le16			rrls;$/;"	m	struct:nvme_id_ctrl
rsvd	zns_ctl/controller.h	/^	__u16	rsvd;$/;"	m	struct:nvme_user_io
rsvd0	zns_ctl/controller.h	/^	__u8		rsvd0 : 4;$/;"	m	struct:nvme_zone_info_entry
rsvd1	zns_ctl/controller.h	/^	__u16	rsvd1;$/;"	m	struct:nvme_passthru_cmd
rsvd1	zns_ctl/controller.h	/^	__u8		rsvd1 : 4;$/;"	m	struct:nvme_zone_info_entry
rsvd102	zns_ctl/controller.h	/^	__u8			rsvd102[154];$/;"	m	struct:nvme_id_ctrl
rsvd1024	zns_ctl/controller.h	/^	__u8			rsvd1024[768];$/;"	m	struct:nvme_id_ctrl
rsvd1804	zns_ctl/controller.h	/^	__u8			rsvd1804[244];$/;"	m	struct:nvme_id_ctrl
rsvd19	zns_ctl/controller.h	/^	__u8			rsvd19;$/;"	m	struct:nvme_id_power_state
rsvd192	zns_ctl/controller.h	/^	__u8			rsvd192[192];$/;"	m	struct:nvme_id_ns
rsvd2	zns_ctl/controller.h	/^	__u8			rsvd2;$/;"	m	struct:nvme_id_power_state
rsvd23	zns_ctl/controller.h	/^	__u8			rsvd23[9];$/;"	m	struct:nvme_id_power_state
rsvd340	zns_ctl/controller.h	/^	__u8			rsvd340[2];$/;"	m	struct:nvme_id_ctrl
rsvd352	zns_ctl/controller.h	/^	__u8			rsvd352[160];$/;"	m	struct:nvme_id_ctrl
rsvd534	zns_ctl/controller.h	/^	__u8			rsvd534[2];$/;"	m	struct:nvme_id_ctrl
rsvd544	zns_ctl/controller.h	/^	__u8			rsvd544[224];$/;"	m	struct:nvme_id_ctrl
rsvd56	zns_ctl/controller.h	/^	__u8		rsvd56[12];$/;"	m	struct:nvme_zone_info_entry
rsvd8	zns_ctl/controller.h	/^	__u8		rsvd8[6];$/;"	m	struct:nvme_zone_info_entry
rsvd8	zns_ctl/controller.h	/^	__u8	rsvd8[56];$/;"	m	struct:nvme_zone_info
rsvd80	zns_ctl/controller.h	/^	__u8			rsvd80[6];$/;"	m	struct:nvme_id_ns
rsvd88	zns_ctl/controller.h	/^	__u8			rsvd88[4];$/;"	m	struct:nvme_id_ns
rsvd96	zns_ctl/controller.h	/^	__u8			rsvd96[3];$/;"	m	struct:nvme_id_ns
rtd3e	zns_ctl/controller.h	/^	__le32			rtd3e;$/;"	m	struct:nvme_id_ctrl
rtd3r	zns_ctl/controller.h	/^	__le32			rtd3r;$/;"	m	struct:nvme_id_ctrl
sanicap	zns_ctl/controller.h	/^	__le32			sanicap;$/;"	m	struct:nvme_id_ctrl
saved_key_	db/db_iter.cc	/^  std::string saved_key_;    \/\/ == current key when direction_==kReverse$/;"	m	class:leveldb::__anon38::DBIter	file:
saved_value_	db/db_iter.cc	/^  std::string saved_value_;  \/\/ == current raw value when direction_==kReverse$/;"	m	class:leveldb::__anon38::DBIter	file:
seconds_	benchmarks/db_bench.cc	/^  double seconds_;$/;"	m	class:leveldb::__anon4::Stats	file:
seed_	db/skiplist_test.cc	/^  int seed_;$/;"	m	class:leveldb::TestState	file:
seed_	util/random.h	/^  uint32_t seed_;$/;"	m	class:leveldb::Random
seek_file	db/version_set.h	/^    FileMetaData* seek_file;$/;"	m	struct:leveldb::Version::GetStats
seek_file_level	db/version_set.h	/^    int seek_file_level;$/;"	m	struct:leveldb::Version::GetStats
seen_key_	db/version_set.h	/^  bool seen_key_;             \/\/ Some output key has been seen$/;"	m	class:leveldb::Compaction
sequence	db/dbformat.h	/^  SequenceNumber sequence;$/;"	m	struct:leveldb::ParsedInternalKey
sequence_	db/db_iter.cc	/^  SequenceNumber const sequence_;$/;"	m	class:leveldb::__anon38::DBIter	file:
sequence_	db/write_batch.cc	/^  SequenceNumber sequence_;$/;"	m	class:leveldb::__anon36::MemTableInserter	file:
sequence_number	db/snapshot.h	/^  SequenceNumber sequence_number() const { return sequence_number_; }$/;"	f	class:leveldb::SnapshotImpl
sequence_number_	db/snapshot.h	/^  const SequenceNumber sequence_number_;$/;"	m	class:leveldb::SnapshotImpl
set_index_handle	table/format.h	/^  void set_index_handle(const BlockHandle& h) { index_handle_ = h; }$/;"	f	class:leveldb::Footer
set_metaindex_handle	table/format.h	/^  void set_metaindex_handle(const BlockHandle& h) { metaindex_handle_ = h; }$/;"	f	class:leveldb::Footer
set_offset	table/format.h	/^  void set_offset(uint64_t offset) { offset_ = offset; }$/;"	f	class:leveldb::BlockHandle
set_open	util/zns/env_zone_cp.cc	/^        void set_open(bool open) { open_ = open; }$/;"	f	class:leveldb::__anon8::Zone
set_size	table/format.h	/^  void set_size(uint64_t size) { size_ = size; }$/;"	f	class:leveldb::BlockHandle
set_valid	util/env_zone.cc	/^        void set_valid(bool valid) { valid_ = valid; }        $/;"	f	class:leveldb::__anon21::File_Info
set_valid	util/zns/env_zone_cp.cc	/^        void set_valid(bool valid) { valid_ = valid; }$/;"	f	class:leveldb::__anon8::Zone
sgls	zns_ctl/controller.h	/^	__le32			sgls;$/;"	m	struct:nvme_id_ctrl
shard_	util/cache.cc	/^  LRUCache shard_[kNumShards];$/;"	m	class:leveldb::__anon16::ShardedLRUCache	file:
shared	benchmarks/db_bench.cc	/^    SharedState* shared;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
shared	benchmarks/db_bench.cc	/^  SharedState* shared;$/;"	m	struct:leveldb::__anon4::ThreadState	file:
shutting_down_	db/db_impl.h	/^  std::atomic<bool> shutting_down_;$/;"	m	class:leveldb::DBImpl
size	include/leveldb/slice.h	/^  size_t size() const { return size_; }$/;"	f	class:leveldb::Slice
size	table/block.h	/^  size_t size() const { return size_; }$/;"	f	class:leveldb::Block
size	table/format.h	/^  uint64_t size() const { return size_; }$/;"	f	class:leveldb::BlockHandle
size	util/zns/env_zone_cp.cc	/^		uint64_t size;$/;"	m	class:leveldb::__anon8::ZoneFile	file:
size	util/zns/env_zone_temp.cc	/^		uint64_t size;$/;"	m	class:leveldb::__anon7::ZoneFile	file:
size_	include/leveldb/slice.h	/^  size_t size_;$/;"	m	class:leveldb::Slice
size_	table/block.h	/^  size_t size_;$/;"	m	class:leveldb::Block
size_	table/format.h	/^  uint64_t size_;$/;"	m	class:leveldb::BlockHandle
size_	util/env_zone.cc	/^        ssize_t size_;$/;"	m	class:leveldb::__anon21::File_Info	file:
size_	util/zns/env_zone_cp.cc	/^        unsigned int size_;$/;"	m	class:leveldb::__anon8::Zone	file:
slba	zns_ctl/controller.h	/^	__u64	slba;$/;"	m	struct:nvme_user_io
smallest	db/db_impl.cc	/^    InternalKey smallest, largest;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
smallest	db/version_edit.h	/^  InternalKey smallest;  \/\/ Smallest internal key served by table$/;"	m	struct:leveldb::FileMetaData
smallest_snapshot	db/db_impl.cc	/^  SequenceNumber smallest_snapshot;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
sn	zns_ctl/controller.h	/^	char			sn[20];$/;"	m	struct:nvme_id_ctrl
snapshot	include/leveldb/options.h	/^  const Snapshot* snapshot = nullptr;$/;"	m	struct:leveldb::ReadOptions
source_	db/log_test.cc	/^  StringSource source_;$/;"	m	class:leveldb::log::LogTest	file:
source_	table/table_test.cc	/^  StringSource* source_;$/;"	m	class:leveldb::TableConstructor	file:
space_	db/dbformat.h	/^  char space_[200];  \/\/ Avoid allocation for short keys$/;"	m	class:leveldb::LookupKey
sqes	zns_ctl/controller.h	/^	__u8			sqes;$/;"	m	struct:nvme_id_ctrl
ss_	util/testharness.h	/^  std::stringstream ss_;$/;"	m	class:leveldb::test::Tester
ssvid	zns_ctl/controller.h	/^	__le16			ssvid;$/;"	m	struct:nvme_id_ctrl
start	include/leveldb/db.h	/^  Slice start;  \/\/ Included in the range$/;"	m	struct:leveldb::Range
start_	benchmarks/db_bench.cc	/^  double start_;$/;"	m	class:leveldb::__anon4::Stats	file:
start_	benchmarks/db_bench_sqlite3.cc	/^  double start_;$/;"	m	class:leveldb::Benchmark	file:
start_	benchmarks/db_bench_tree_db.cc	/^  double start_;$/;"	m	class:leveldb::Benchmark	file:
start_	db/dbformat.h	/^  const char* start_;$/;"	m	class:leveldb::LookupKey
start_	table/filter_block.h	/^  std::vector<size_t> start_;    \/\/ Starting index in keys_ of each key$/;"	m	class:leveldb::FilterBlockBuilder
start_offset_	util/env_zone.cc	/^        ssize_t start_offset_;$/;"	m	class:leveldb::__anon21::File_Info	file:
starts_with	include/leveldb/slice.h	/^  bool starts_with(const Slice& x) const {$/;"	f	class:leveldb::Slice
state	db/db_test.cc	/^  MTState* state;$/;"	m	struct:leveldb::__anon42::MTThread	file:
state	db/version_set.cc	/^  SaverState state;$/;"	m	struct:leveldb::__anon32::Saver	file:
state_	db/c.cc	/^  void* state_;$/;"	m	struct:leveldb_comparator_t	file:
state_	db/c.cc	/^  void* state_;$/;"	m	struct:leveldb_filterpolicy_t	file:
state_	db/fault_injection_test.cc	/^  FileState state_;$/;"	m	class:leveldb::TestWritableFile	file:
state_	include/leveldb/status.h	/^  Status() noexcept : state_(nullptr) {}$/;"	f	class:leveldb::Status
state_	include/leveldb/status.h	/^  Status(Status&& rhs) noexcept : state_(rhs.state_) { rhs.state_ = nullptr; }$/;"	f	class:leveldb::Status
state_	include/leveldb/status.h	/^  const char* state_;$/;"	m	class:leveldb::Status
stats	benchmarks/db_bench.cc	/^  Stats stats;$/;"	m	struct:leveldb::__anon4::ThreadState	file:
status	db/db_impl.cc	/^  Status status;$/;"	m	struct:leveldb::DBImpl::Writer	file:
status	table/iterator_wrapper.h	/^  Status status() const {$/;"	f	class:leveldb::IteratorWrapper
status	table/table.cc	/^  Status status;$/;"	m	struct:leveldb::Table::Rep	file:
status	table/table_builder.cc	/^  Status status;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
status	table/table_builder.cc	/^Status TableBuilder::status() const { return rep_->status; }$/;"	f	class:leveldb::TableBuilder
status_	db/db_iter.cc	/^  Status status_;$/;"	m	class:leveldb::__anon38::DBIter	file:
status_	table/block.cc	/^  Status status_;$/;"	m	class:leveldb::Block::Iter	file:
status_	table/iterator.cc	/^  Status status_;$/;"	m	class:leveldb::__anon24::EmptyIterator	file:
status_	table/table_test.cc	/^  mutable Status status_;$/;"	m	class:leveldb::KeyConvertingIterator	file:
status_	table/two_level_iterator.cc	/^  Status status_;$/;"	m	class:leveldb::__anon30::TwoLevelIterator	file:
stop	db/db_test.cc	/^  std::atomic<bool> stop;$/;"	m	struct:leveldb::__anon42::MTState	file:
subnqn	zns_ctl/controller.h	/^	char			subnqn[256];$/;"	m	struct:nvme_id_ctrl
sum_	util/histogram.h	/^  double sum_;$/;"	m	class:leveldb::Histogram
sum_squares_	util/histogram.h	/^  double sum_squares_;$/;"	m	class:leveldb::Histogram
sync	db/db_impl.cc	/^  bool sync;$/;"	m	struct:leveldb::DBImpl::Writer	file:
sync	include/leveldb/options.h	/^  bool sync = false;$/;"	m	struct:leveldb::WriteOptions
t_	db/skiplist_test.cc	/^  ConcurrentTest t_;$/;"	m	class:leveldb::TestState	file:
table	db/table_cache.cc	/^  Table* table;$/;"	m	struct:leveldb::TableAndFile	file:
table_	db/memtable.h	/^  Table table_;$/;"	m	class:leveldb::MemTable
table_	table/table_test.cc	/^  Table* table_;$/;"	m	class:leveldb::TableConstructor	file:
table_cache_	db/db_impl.h	/^  TableCache* const table_cache_;$/;"	m	class:leveldb::DBImpl
table_cache_	db/repair.cc	/^  TableCache* table_cache_;$/;"	m	class:leveldb::__anon37::Repairer	file:
table_cache_	db/version_set.h	/^  TableCache* const table_cache_;$/;"	m	class:leveldb::VersionSet
table_numbers_	db/repair.cc	/^  std::vector<uint64_t> table_numbers_;$/;"	m	class:leveldb::__anon37::Repairer	file:
tables_	db/repair.cc	/^  std::vector<TableInfo> tables_;$/;"	m	class:leveldb::__anon37::Repairer	file:
target	include/leveldb/env.h	/^  Env* target() const { return target_; }$/;"	f	class:leveldb::EnvWrapper
target_	db/fault_injection_test.cc	/^  WritableFile* target_;$/;"	m	class:leveldb::TestWritableFile	file:
target_	include/leveldb/env.h	/^  Env* target_;$/;"	m	class:leveldb::EnvWrapper
test	db/db_test.cc	/^  DBTest* test;$/;"	m	struct:leveldb::__anon42::MTState	file:
test	util/testharness.cc	/^namespace test {$/;"	n	namespace:leveldb	file:
test	util/testharness.h	/^namespace test {$/;"	n	namespace:leveldb
test	util/testutil.cc	/^namespace test {$/;"	n	namespace:leveldb	file:
test	util/testutil.h	/^namespace test {$/;"	n	namespace:leveldb
tests	util/testharness.cc	/^std::vector<Test>* tests;$/;"	m	namespace:leveldb::test::__anon14	file:
thread	benchmarks/db_bench.cc	/^    ThreadState* thread;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
thread_done	db/db_test.cc	/^  std::atomic<bool> thread_done[kNumThreads];$/;"	m	struct:leveldb::__anon42::MTState	file:
tid	benchmarks/db_bench.cc	/^  int tid;      \/\/ 0..n-1 when running in n threads$/;"	m	struct:leveldb::__anon4::ThreadState	file:
timeout_ms	zns_ctl/controller.h	/^	__u32	timeout_ms;$/;"	m	struct:nvme_passthru_cmd
tiny_cache_	db/autocompact_test.cc	/^  Cache* tiny_cache_;$/;"	m	class:leveldb::AutoCompactTest	file:
tiny_cache_	db/corruption_test.cc	/^  Cache* tiny_cache_;$/;"	m	class:leveldb::CorruptionTest	file:
tiny_cache_	db/fault_injection_test.cc	/^  Cache* tiny_cache_;$/;"	m	class:leveldb::FaultInjectionTest	file:
tmp_	db/memtable.cc	/^  std::string tmp_;  \/\/ For passing to EncodeKey$/;"	m	class:leveldb::MemTableIterator	file:
tmp_keys_	table/filter_block.h	/^  std::vector<Slice> tmp_keys_;  \/\/ policy_->CreateFilter() argument$/;"	m	class:leveldb::FilterBlockBuilder
tmp_storage	db/db_impl.h	/^    InternalKey tmp_storage;   \/\/ Used to keep track of compaction progress$/;"	m	struct:leveldb::DBImpl::ManualCompaction
tnvmcap	zns_ctl/controller.h	/^	__u8			tnvmcap[16];$/;"	m	struct:nvme_id_ctrl
total_bytes	db/db_impl.cc	/^  uint64_t total_bytes;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
totalzones	zns_ctl/controller.h	/^	__u16			totalzones;$/;"	m	struct:nvme_id_ns
totalzones	zns_ctl/controller.h	/^	__u16 totalzones;$/;"	m	struct:zns_share_info
type	db/dbformat.h	/^  ValueType type;$/;"	m	struct:leveldb::ParsedInternalKey
type	table/table_test.cc	/^  TestType type;$/;"	m	struct:leveldb::TestArgs	file:
type_crc_	db/log_writer.h	/^  uint32_t type_crc_[kMaxRecordType + 1];$/;"	m	class:leveldb::log::Writer
ucmp	db/version_set.cc	/^  const Comparator* ucmp;$/;"	m	struct:leveldb::__anon32::Saver	file:
unlikely	zns_ctl/controller.h	29;"	d
unvmcap	zns_ctl/controller.h	/^	__u8			unvmcap[16];$/;"	m	struct:nvme_id_ctrl
user_comparator	db/db_impl.h	/^  const Comparator* user_comparator() const {$/;"	f	class:leveldb::DBImpl
user_comparator	db/dbformat.h	/^  const Comparator* user_comparator() const { return user_comparator_; }$/;"	f	class:leveldb::InternalKeyComparator
user_comparator_	db/db_iter.cc	/^  const Comparator* const user_comparator_;$/;"	m	class:leveldb::__anon38::DBIter	file:
user_comparator_	db/dbformat.h	/^  const Comparator* user_comparator_;$/;"	m	class:leveldb::InternalKeyComparator
user_key	db/dbformat.h	/^  Slice user_key() const { return ExtractUserKey(rep_); }$/;"	f	class:leveldb::InternalKey
user_key	db/dbformat.h	/^  Slice user_key() const { return Slice(kstart_, end_ - kstart_ - 8); }$/;"	f	class:leveldb::LookupKey
user_key	db/dbformat.h	/^  Slice user_key;$/;"	m	struct:leveldb::ParsedInternalKey
user_key	db/version_set.cc	/^  Slice user_key;$/;"	m	struct:leveldb::__anon32::Saver	file:
user_policy_	db/dbformat.h	/^  const FilterPolicy* const user_policy_;$/;"	m	class:leveldb::InternalFilterPolicy
valid_	db/db_iter.cc	/^  bool valid_;$/;"	m	class:leveldb::__anon38::DBIter	file:
valid_	table/iterator_wrapper.h	/^  bool valid_;$/;"	m	class:leveldb::IteratorWrapper
valid_	util/env_zone.cc	/^        bool valid_;$/;"	m	class:leveldb::__anon21::File_Info	file:
valid_	util/zns/env_zone_cp.cc	/^        bool valid_;$/;"	m	class:leveldb::__anon8::Zone	file:
value	db/version_set.cc	/^  std::string* value;$/;"	m	struct:leveldb::__anon32::Saver	file:
value	table/iterator_wrapper.h	/^  Slice value() const {$/;"	f	class:leveldb::IteratorWrapper
value	util/cache.cc	/^  void* value;$/;"	m	struct:leveldb::__anon16::LRUHandle	file:
value_	table/block.cc	/^  Slice value_;$/;"	m	class:leveldb::Block::Iter	file:
value_buf_	db/version_set.cc	/^  mutable char value_buf_[16];$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
value_size_	benchmarks/db_bench.cc	/^  int value_size_;$/;"	m	class:leveldb::Benchmark	file:
ver	zns_ctl/controller.h	/^	__le32			ver;$/;"	m	struct:nvme_id_ctrl
verify_checksums	include/leveldb/options.h	/^  bool verify_checksums = false;$/;"	m	struct:leveldb::ReadOptions
vid	zns_ctl/controller.h	/^	__le16			vid;$/;"	m	struct:nvme_id_ctrl
volatile	build/CMakeFiles/3.15.2/CompilerIdC/CMakeCCompilerId.c	11;"	d	file:
vs	zns_ctl/controller.h	/^	__u8			vs[1024];$/;"	m	struct:nvme_id_ctrl
vs	zns_ctl/controller.h	/^	__u8			vs[3712];$/;"	m	struct:nvme_id_ns
vset_	db/version_set.cc	/^  VersionSet* vset_;$/;"	m	class:leveldb::VersionSet::Builder	file:
vset_	db/version_set.h	/^  VersionSet* vset_;  \/\/ VersionSet to which this Version belongs$/;"	m	class:leveldb::Version
vwc	zns_ctl/controller.h	/^	__u8			vwc;$/;"	m	struct:nvme_id_ctrl
wb_lock	util/env_zone.cc	/^        port::Mutex wb_lock;$/;"	m	class:leveldb::__anon21::Zone_Coordinator	file:
wb_lock	util/env_zone.cc	/^        port::Mutex wb_lock;$/;"	m	class:leveldb::__anon21::final	file:
wctemp	zns_ctl/controller.h	/^	__le16			wctemp;$/;"	m	struct:nvme_id_ctrl
wnblock_	util/env_zone.cc	/^        size_t wnblock_;$/;"	m	class:leveldb::__anon21::File_Info	file:
wp	util/zns/env_zone_temp.cc	/^		unsigned long long wp;$/;"	m	class:leveldb::__anon7::Zone	file:
writable_file_error_	util/testutil.h	/^  bool writable_file_error_;$/;"	m	class:leveldb::test::ErrorEnv
writable_file_opened_	db/fault_injection_test.cc	/^  bool writable_file_opened_;$/;"	m	class:leveldb::TestWritableFile	file:
write_buf	util/env_zone.cc	/^        queue<WriteBuffer*> write_buf;$/;"	m	class:leveldb::__anon21::Zone_Coordinator	file:
write_buffer_size	include/leveldb/options.h	/^  size_t write_buffer_size = 4 * 1024 * 1024;$/;"	m	struct:leveldb::Options
write_lat	zns_ctl/controller.h	/^	__u8			write_lat;$/;"	m	struct:nvme_id_power_state
write_options_	benchmarks/db_bench.cc	/^  WriteOptions write_options_;$/;"	m	class:leveldb::Benchmark	file:
write_point_	util/env_zone.cc	/^        uint64_t write_point_;$/;"	m	class:leveldb::__anon21::File_Info	file:
write_point_	util/zns/env_zone_cp.cc	/^        unsigned long long int write_point_;$/;"	m	class:leveldb::__anon8::Zone	file:
write_pointer	zns_ctl/controller.h	/^	__u64		write_pointer;$/;"	m	struct:nvme_zone_info_entry
write_tput	zns_ctl/controller.h	/^	__u8			write_tput;$/;"	m	struct:nvme_id_power_state
writer_	db/log_test.cc	/^  Writer* writer_;$/;"	m	class:leveldb::log::LogTest	file:
zns_block	zns_ctl/controller.h	/^struct zns_block {$/;"	s
zns_get_log_entry_info	zns_ctl/controller.cc	/^int zns_get_log_entry_info(int fd, void * data, __u64 zid)$/;"	f
zns_get_total_log_entry_info	zns_ctl/controller.cc	/^int zns_get_total_log_entry_info(int fd, int nzones)$/;"	f
zns_info_ctrl	zns_ctl/controller.cc	/^void * zns_info_ctrl(int fd, void * data)$/;"	f
zns_info_ctrl_print	zns_ctl/controller.cc	/^void zns_info_ctrl_print(void * data)$/;"	f
zns_info_ns	zns_ctl/controller.cc	/^void * zns_info_ns(int fd, void * data)$/;"	f
zns_info_ns_print	zns_ctl/controller.cc	/^void zns_info_ns_print(void * data)$/;"	f
zns_init	zns_ctl/controller.cc	/^int zns_init(char * dev, struct zns_share_info * zonelist)$/;"	f
zns_init_print	zns_ctl/controller.cc	/^int zns_init_print(struct zns_share_info * zonelist)$/;"	f
zns_log_info_entry_print	zns_ctl/controller.cc	/^int zns_log_info_entry_print(int num, void * data)$/;"	f
zns_read	zns_ctl/controller.cc	/^int zns_read(struct zns_share_info * zonelist, void * read_data, int data_size, int zone_number, __u64 offset)$/;"	f
zns_read_request	zns_ctl/controller.cc	/^int zns_read_request(int fd, void * read_data, int nblocks, __u64 slba)$/;"	f
zns_sector	zns_ctl/controller.h	/^struct zns_sector {$/;"	s
zns_share_info	zns_ctl/controller.h	/^struct zns_share_info {$/;"	s
zns_update_zone_info	zns_ctl/controller.cc	/^int zns_update_zone_info(struct zns_share_info * zonelist, int zonenumber)$/;"	f
zns_write	zns_ctl/controller.cc	/^int zns_write(struct zns_share_info * zonelist, const void * write_data, int data_size, int zone_number, __u64 offset)$/;"	f
zns_write_request	zns_ctl/controller.cc	/^int zns_write_request(int fd, const void * write_data, int nblocks, __u64 slba)$/;"	f
zns_zone_finish	zns_ctl/controller.cc	/^int zns_zone_finish(struct zns_share_info * zonelist, int zonenumber)$/;"	f
zns_zone_finish_request	zns_ctl/controller.cc	/^int zns_zone_finish_request(int fd, __u64 slba)$/;"	f
zns_zone_info	zns_ctl/controller.h	/^struct zns_zone_info {$/;"	s
zns_zone_io_managemnet	zns_ctl/controller.cc	/^int zns_zone_io_managemnet(int fd, __u64 slba, __u64 action)$/;"	f
zns_zone_open	zns_ctl/controller.cc	/^int zns_zone_open(struct zns_share_info * zonelist, int zonenumber)$/;"	f
zns_zone_open_request	zns_ctl/controller.cc	/^int zns_zone_open_request(int fd, __u64 slba)$/;"	f
zns_zone_reset	zns_ctl/controller.cc	/^int zns_zone_reset(struct zns_share_info * zonelist, int zonenumber)$/;"	f
zns_zone_reset_request	zns_ctl/controller.cc	/^int zns_zone_reset_request(int fd, __u64 slba)$/;"	f
zone_	util/zns/env_zone_cp.cc	/^        Zone* zone_;$/;"	m	class:leveldb::__anon8::final	file:
zone_capacity	zns_ctl/controller.h	/^	__u64		zone_capacity;$/;"	m	struct:nvme_zone_info_entry
zone_condition	zns_ctl/controller.h	/^	__u8		zone_condition : 4;$/;"	m	struct:nvme_zone_info_entry
zone_condition_rsvd	zns_ctl/controller.h	/^	__u8		zone_condition_rsvd : 4;$/;"	m	struct:nvme_zone_info_entry
zone_device_init	util/zns/env_zone_cp.cc	/^		void zone_device_init()$/;"	f	class:leveldb::__anon8::Zone_Coordinator	file:
zone_entry	zns_ctl/controller.h	/^	struct nvme_zone_info_entry zone_entry;$/;"	m	struct:zns_zone_info	typeref:struct:zns_zone_info::nvme_zone_info_entry
zone_entrys	zns_ctl/controller.h	/^	struct nvme_zone_info_entry * zone_entrys;$/;"	m	struct:nvme_zone_info	typeref:struct:nvme_zone_info::nvme_zone_info_entry
zone_info	util/env_zone.cc	/^        zns_share_info* zone_info;$/;"	m	class:leveldb::__anon21::Zone_Coordinator	file:
zone_info	util/zns/env_zone_cp.cc	/^        struct zns_share_info *zone_info;$/;"	m	class:leveldb::__anon8::Zone_Coordinator	typeref:struct:leveldb::__anon8::Zone_Coordinator::zns_share_info	file:
zone_info	util/zns/env_zone_temp.cc	/^        struct zns_share_info *zone_info;$/;"	m	class:leveldb::__anon7::Z_interface	typeref:struct:leveldb::__anon7::Z_interface::zns_share_info	file:
zone_interface	util/zns/env_zone_temp.cc	/^        Z_interface *zone_interface;	$/;"	m	class:leveldb::__anon7::ZoneEnv	file:
zone_interface_	util/zns/env_zone_temp.cc	/^        Z_interface *zone_interface_;$/;"	m	class:leveldb::__anon7::ZoneFile	file:
zone_list	util/env_zone.cc	/^		deque<int> zone_list;$/;"	m	class:leveldb::__anon21::Zone_Coordinator	file:
zone_list	util/zns/env_zone_cp.cc	/^		vector<Zone> zone_list;$/;"	m	class:leveldb::__anon8::Zone_Coordinator	file:
zone_list	util/zns/env_zone_temp.cc	/^		vector<Zone> zone_list;$/;"	m	class:leveldb::__anon7::Z_interface	file:
zone_list	zns_ctl/controller.h	/^	struct zns_zone_info * zone_list;$/;"	m	struct:zns_share_info	typeref:struct:zns_share_info::zns_zone_info
zone_mutex_	util/env_zone.cc	/^port::Mutex zone_mutex_;$/;"	m	namespace:leveldb::__anon21	file:
zone_mutex_	util/zns/env_zone_cp.cc	/^port::Mutex zone_mutex_;$/;"	m	namespace:leveldb::__anon8	file:
zone_mutex_	util/zns/env_zone_temp.cc	/^port::Mutex zone_mutex_;$/;"	m	namespace:leveldb::__anon7	file:
zone_number	zns_ctl/controller.h	/^	int zone_number;$/;"	m	struct:zns_zone_info
zone_number_	util/env_zone.cc	/^        ssize_t zone_number_;$/;"	m	class:leveldb::__anon21::File_Info	file:
zone_number_	util/zns/env_zone_cp.cc	/^        unsigned int zone_number_;$/;"	m	class:leveldb::__anon8::Zone	file:
zone_start_lba	zns_ctl/controller.h	/^	__u64		zone_start_lba;$/;"	m	struct:nvme_zone_info_entry
zonesize	zns_ctl/controller.h	/^	__u64			zonesize;$/;"	m	struct:nvme_id_ns
zonesize	zns_ctl/controller.h	/^	__u64 zonesize;$/;"	m	struct:zns_share_info
~AddBoundaryInputsTest	db/version_set_test.cc	/^  ~AddBoundaryInputsTest() {$/;"	f	class:leveldb::AddBoundaryInputsTest
~Arena	util/arena.cc	/^Arena::~Arena() {$/;"	f	class:leveldb::Arena
~AutoCompactTest	db/autocompact_test.cc	/^  ~AutoCompactTest() {$/;"	f	class:leveldb::AutoCompactTest
~Benchmark	benchmarks/db_bench.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~Benchmark	benchmarks/db_bench_sqlite3.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~Benchmark	benchmarks/db_bench_tree_db.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~Block	table/block.cc	/^Block::~Block() {$/;"	f	class:leveldb::Block
~BloomTest	util/bloom_test.cc	/^  ~BloomTest() { delete policy_; }$/;"	f	class:leveldb::BloomTest
~Builder	db/version_set.cc	/^  ~Builder() {$/;"	f	class:leveldb::VersionSet::Builder
~Cache	util/cache.cc	/^Cache::~Cache() {}$/;"	f	class:leveldb::Cache
~CacheTest	util/cache_test.cc	/^  ~CacheTest() { delete cache_; }$/;"	f	class:leveldb::CacheTest
~Compaction	db/version_set.cc	/^Compaction::~Compaction() {$/;"	f	class:leveldb::Compaction
~CorruptionTest	db/corruption_test.cc	/^  ~CorruptionTest() {$/;"	f	class:leveldb::CorruptionTest
~DBImpl	db/db_impl.cc	/^DBImpl::~DBImpl() {$/;"	f	class:leveldb::DBImpl
~DBTest	db/db_test.cc	/^  ~DBTest() {$/;"	f	class:leveldb::DBTest
~DoNotDestruct	util/no_destructor_test.cc	/^  ~DoNotDestruct() { std::abort(); }$/;"	f	struct:leveldb::__anon9::DoNotDestruct
~EnvWrapper	util/env.cc	/^EnvWrapper::~EnvWrapper() {}$/;"	f	class:leveldb::EnvWrapper
~FaultInjectionTest	db/fault_injection_test.cc	/^  ~FaultInjectionTest() {$/;"	f	class:leveldb::FaultInjectionTest
~FileState	helpers/memenv/memenv.cc	/^  ~FileState() { Truncate(); }$/;"	f	class:leveldb::__anon5::FileState	file:
~File_Info	util/env_zone.cc	/^        ~File_Info() {}$/;"	f	class:leveldb::__anon21::File_Info
~FilterPolicy	util/filter_policy.cc	/^FilterPolicy::~FilterPolicy() {}$/;"	f	class:leveldb::FilterPolicy
~FindFileTest	db/version_set_test.cc	/^  ~FindFileTest() {$/;"	f	class:leveldb::FindFileTest
~HandleTable	util/cache.cc	/^  ~HandleTable() { delete[] list_; }$/;"	f	class:leveldb::__anon16::HandleTable
~Harness	table/table_test.cc	/^  ~Harness() { delete constructor_; }$/;"	f	class:leveldb::Harness
~Histogram	util/histogram.h	/^  ~Histogram() {}$/;"	f	class:leveldb::Histogram
~Iterator	table/iterator.cc	/^Iterator::~Iterator() {$/;"	f	class:leveldb::Iterator
~IteratorWrapper	table/iterator_wrapper.h	/^  ~IteratorWrapper() { delete iter_; }$/;"	f	class:leveldb::IteratorWrapper
~LRUCache	util/cache.cc	/^LRUCache::~LRUCache() {$/;"	f	class:leveldb::__anon16::LRUCache
~LogTest	db/log_test.cc	/^  ~LogTest() {$/;"	f	class:leveldb::log::LogTest
~LookupKey	db/dbformat.h	/^inline LookupKey::~LookupKey() {$/;"	f	class:leveldb::LookupKey
~MemEnvTest	helpers/memenv/memenv_test.cc	/^  ~MemEnvTest() { delete env_; }$/;"	f	class:leveldb::MemEnvTest
~MemTable	db/memtable.cc	/^MemTable::~MemTable() { assert(refs_ == 0); }$/;"	f	class:leveldb::MemTable
~Reader	db/log_reader.cc	/^Reader::~Reader() { delete[] backing_store_; }$/;"	f	class:leveldb::log::Reader
~RecoveryTest	db/recovery_test.cc	/^  ~RecoveryTest() {$/;"	f	class:leveldb::RecoveryTest
~Rep	table/table.cc	/^  ~Rep() {$/;"	f	struct:leveldb::Table::Rep
~Repairer	db/repair.cc	/^  ~Repairer() {$/;"	f	class:leveldb::__anon37::Repairer
~ScopedHandle	util/env_windows.cc	/^  ~ScopedHandle() { Close(); }$/;"	f	class:leveldb::__anon11::ScopedHandle
~Status	include/leveldb/status.h	/^  ~Status() { delete[] state_; }$/;"	f	class:leveldb::Status
~Table	table/table.cc	/^Table::~Table() { delete rep_; }$/;"	f	class:leveldb::Table
~TableBuilder	table/table_builder.cc	/^TableBuilder::~TableBuilder() {$/;"	f	class:leveldb::TableBuilder
~TableCache	db/table_cache.cc	/^TableCache::~TableCache() { delete cache_; }$/;"	f	class:leveldb::TableCache
~TestWritableFile	db/fault_injection_test.cc	/^TestWritableFile::~TestWritableFile() {$/;"	f	class:leveldb::TestWritableFile
~Tester	util/testharness.h	/^  ~Tester() {$/;"	f	class:leveldb::test::Tester
~Version	db/version_set.cc	/^Version::~Version() {$/;"	f	class:leveldb::Version
~VersionSet	db/version_set.cc	/^VersionSet::~VersionSet() {$/;"	f	class:leveldb::VersionSet
~WritableFileImpl	util/zns/env_zone_temp.cc	/^		~WritableFileImpl()$/;"	f	class:leveldb::__anon7::ZoneWritableFile
~WriteBuffer	util/env_zone.cc	/^        ~WriteBuffer() {}$/;"	f	class:leveldb::__anon21::WriteBuffer
~Z_interface	util/zns/env_zone_temp.cc	/^		~Z_interface()$/;"	f	class:leveldb::__anon7::Z_interface
~ZoneEnv	util/zns/env_zone_temp.cc	/^		virtual ~ZoneEnv()$/;"	f	class:leveldb::__anon7::ZoneEnv
~ZoneFile	util/zns/env_zone_cp.cc	/^		~ZoneFile()$/;"	f	class:leveldb::__anon8::ZoneFile
~ZoneFile	util/zns/env_zone_temp.cc	/^		~ZoneFile()$/;"	f	class:leveldb::__anon7::ZoneFile
~ZoneRandomAccessFile	util/zns/env_zone_temp.cc	/^		~ZoneRandomAccessFile()$/;"	f	class:leveldb::__anon7::ZoneRandomAccessFile
~ZoneSequentialFile	util/zns/env_zone_cp.cc	/^		~ZoneSequentialFile() {}$/;"	f	class:leveldb::__anon8::final
~ZoneSequentialFile	util/zns/env_zone_temp.cc	/^		~ZoneSequentialFile()$/;"	f	class:leveldb::__anon7::ZoneSequentialFile
~ZoneWritableFile	util/env_zone.cc	/^		~ZoneWritableFile() {$/;"	f	class:leveldb::__anon21::final
~Zone_Coordinator	util/env_zone.cc	/^		~Zone_Coordinator()$/;"	f	class:leveldb::__anon21::Zone_Coordinator
~Zone_Coordinator	util/zns/env_zone_cp.cc	/^		~Zone_Coordinator()$/;"	f	class:leveldb::__anon8::Zone_Coordinator
